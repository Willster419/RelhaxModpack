<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RelhaxModpack</name>
    </assembly>
    <members>
        <member name="T:RelhaxModpack.AtlasesCreator.FailCode">
            <summary>
            List of possible areas in the Atlas creation process where it could fail
            </summary>
        </member>
        <member name="F:RelhaxModpack.AtlasesCreator.FailCode.None">
            <summary>
            No error occurred
            </summary>
        </member>
        <member name="F:RelhaxModpack.AtlasesCreator.FailCode.ImageImporter">
            <summary>
            Failed to import the DDS image file to a bitmap object
            </summary>
        </member>
        <member name="F:RelhaxModpack.AtlasesCreator.FailCode.ImageExporter">
            <summary>
            Failed to export the bitmap object to a DDS image file
            </summary>
        </member>
        <member name="F:RelhaxModpack.AtlasesCreator.FailCode.MapImporter">
            <summary>
            Failed to load and parse the WG xml atlas map
            </summary>
        </member>
        <member name="F:RelhaxModpack.AtlasesCreator.FailCode.MapExporter">
            <summary>
            Failed to parse and save the WG xml atlas map
            </summary>
        </member>
        <member name="F:RelhaxModpack.AtlasesCreator.FailCode.NoImages">
            <summary>
            No images to build for the atlas
            </summary>
        </member>
        <member name="F:RelhaxModpack.AtlasesCreator.FailCode.ImageNameCollision">
            <summary>
            Duplicate image names in list of images to pack
            </summary>
        </member>
        <member name="F:RelhaxModpack.AtlasesCreator.FailCode.FailedToPackImage">
            <summary>
            Failed to pack the images into one large image (most likely they don't fit into the provided dimensions)
            </summary>
        </member>
        <member name="F:RelhaxModpack.AtlasesCreator.FailCode.FailedToCreateBitmapAtlas">
            <summary>
            Failed to create the atlas bitmap object
            </summary>
        </member>
        <member name="T:RelhaxModpack.AtlasesCreator.AtlasProgressDelegate">
            <summary>
            The delegate to invoke when calling back to the sender for the AtlasProgres event
            </summary>
            <param name="sender">The sending Atlas Creator</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:RelhaxModpack.AtlasesCreator.AtlasCreator">
            <summary>
            Represents the entire process of building an atlas image
            </summary>
        </member>
        <member name="F:RelhaxModpack.AtlasesCreator.AtlasCreator.Atlas">
            <summary>
            The object of atlas arguments for building the image
            </summary>
        </member>
        <member name="F:RelhaxModpack.AtlasesCreator.AtlasCreator.Token">
            <summary>
            The token for handling a cancel call from the user
            </summary>
        </member>
        <member name="E:RelhaxModpack.AtlasesCreator.AtlasCreator.OnAtlasProgres">
            <summary>
            The event when atlas child progress occurs
            </summary>
        </member>
        <member name="M:RelhaxModpack.AtlasesCreator.AtlasCreator.CreateAtlas">
            <summary>
            Create the atlas image
            </summary>
            <returns>Success code if complete, any other FailCode otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.AtlasesCreator.AtlasCreator.Dispose(System.Boolean)">
            <summary>
            Dispose of the Atlas Creator (mostly disposing image data)
            </summary>
            <param name="disposing">Set to true to dispose managed objects as well as unmanaged</param>
        </member>
        <member name="M:RelhaxModpack.AtlasesCreator.AtlasCreator.Dispose">
            <summary>
            Dispose of the Atlas Creator (mostly disposing image data)
            </summary>
        </member>
        <member name="T:RelhaxModpack.AtlasesCreator.AtlasUtils">
            <summary>
            A utility class for Atlas file processing
            </summary>
        </member>
        <member name="F:RelhaxModpack.AtlasesCreator.AtlasUtils.ParseModTexturesTask">
            <summary>
            The task of parsing all mod png images from multiple folders into a flat list of png bitmaps
            </summary>
        </member>
        <member name="F:RelhaxModpack.AtlasesCreator.AtlasUtils.ModContourIconImages">
            <summary>
            The list of parsed mod png images into textures
            </summary>
        </member>
        <member name="F:RelhaxModpack.AtlasesCreator.AtlasUtils.AtlasLoaderLockObject">
            <summary>
            Lock object used in AtlasCreator for critical sections that can't be done at the same time
            </summary>
            <remarks>Each atlas file is created by its own thread. However, the DDS loading and saving API used can't be used more then once at a time</remarks>
        </member>
        <member name="F:RelhaxModpack.AtlasesCreator.AtlasUtils.AtlasBuilders">
            <summary>
            A list of Atlas creating thread engines
            </summary>
        </member>
        <member name="M:RelhaxModpack.AtlasesCreator.AtlasUtils.LoadModContourIconsAsync(System.Collections.Generic.List{System.String},System.Threading.CancellationToken)">
            <summary>
            Loads all mod textures from disk into texture objects. This is done on a separate thread so it is not done redundantly multiple times on each atlas thread
            </summary>
            <param name="allModFolderPaths">The list of absolute paths containing mod contour icon images to be loaded</param>
            <param name="token">The cancellation token</param>
            <returns>The list of textures</returns>
        </member>
        <member name="M:RelhaxModpack.AtlasesCreator.AtlasUtils.DisposeparseModTextures">
            <summary>
            Dispose of all textures in the shared mod texture list
            </summary>
        </member>
        <member name="M:RelhaxModpack.AtlasesCreator.AtlasUtils.VerifyImageLibsLoaded">
            <summary>
            Verifies the Atlas processing libraries are loaded. If not, they are loaded.
            </summary>
        </member>
        <member name="M:RelhaxModpack.AtlasesCreator.AtlasUtils.DisposeOfAllAtlasResources">
            <summary>
            Disposes of all statically used AtlasUtils resources, including releasing the mod texture list
            </summary>
        </member>
        <member name="T:RelhaxModpack.AtlasesCreator.Packing.ArevaloRectanglePacker">
            <summary>Rectangle packer using an algorithm by Javier Arevalo</summary>
            <remarks>
              <para>
                Original code by Javier Arevalo (jare at iguanademos dot com). Rewritten
                to C# / .NET by Markus Ewald (cygon at nuclex dot org). The following comments
                were written by the original author when he published his algorithm.
              </para>
              <para>
                You have a bunch of rectangular pieces. You need to arrange them in a
                rectangular surface so that they don't overlap, keeping the total area of the
                rectangle as small as possible. This is fairly common when arranging characters
                in a bitmapped font, lightmaps for a 3D engine, and I guess other situations as
                well.
              </para>
              <para>
                The idea of this algorithm is that, as we add rectangles, we can pre-select
                "interesting" places where we can try to add the next rectangles. For optimal
                results, the rectangles should be added in order. I initially tried using area
                as a sorting criteria, but it didn't work well with very tall or very flat
                rectangles. I then tried using the longest dimension as a selector, and it
                worked much better. So much for intuition...
              </para>
              <para>
                These "interesting" places are just to the right and just below the currently
                added rectangle. The first rectangle, obviously, goes at the top left, the next
                one would go either to the right or below this one, and so on. It is a weird way
                to do it, but it seems to work very nicely.
              </para>
              <para>
                The way we search here is fairly brute-force, the fact being that for most
                off-line purposes the performance seems more than adequate. I have generated a
                Japanese font with around 8500 characters and all the time was spent generating
                the bitmaps.
              </para>
              <para>
                Also, for all we care, we could grow the parent rectangle in a different way
                than power of two. It just happens that power of 2 is very convenient for
                graphics hardware textures.
              </para>
              <para>
                I'd be interested in hearing of other approaches to this problem. Make sure
                to post them on http://www.flipcode.com
              </para>
            </remarks>
        </member>
        <member name="T:RelhaxModpack.AtlasesCreator.Packing.ArevaloRectanglePacker.AnchorRankComparer">
            <summary>Compares the 'rank' of anchoring points</summary>
            <remarks>
              Anchoring points are potential locations for the placement of new rectangles.
              Each time a rectangle is inserted, an anchor point is generated on its upper
              right end and another one at its lower left end. The anchor points are kept
              in a list that is ordered by their closeness to the upper left corner of the
              packing area (their 'rank') so the packer favors positions that are closer to
              the upper left for new rectangles.
            </remarks>
        </member>
        <member name="F:RelhaxModpack.AtlasesCreator.Packing.ArevaloRectanglePacker.AnchorRankComparer.Default">
            <summary>Provides a default instance for the anchor rank comparer</summary>
        </member>
        <member name="M:RelhaxModpack.AtlasesCreator.Packing.ArevaloRectanglePacker.AnchorRankComparer.Compare(System.Drawing.Point,System.Drawing.Point)">
            <summary>Compares the rank of two anchors against each other</summary>
            <param name="left">Left anchor point that will be compared</param>
            <param name="right">Right anchor point that will be compared</param>
            <returns>The relation of the two anchor point's ranks to each other</returns>
        </member>
        <member name="F:RelhaxModpack.AtlasesCreator.Packing.ArevaloRectanglePacker.actualPackingAreaHeight">
            <summary>Current height of the packing area</summary>
        </member>
        <member name="F:RelhaxModpack.AtlasesCreator.Packing.ArevaloRectanglePacker.actualPackingAreaWidth">
            <summary>Current width of the packing area</summary>
        </member>
        <member name="F:RelhaxModpack.AtlasesCreator.Packing.ArevaloRectanglePacker.anchors">
            <summary>Anchoring points where new rectangles can potentially be placed</summary>
        </member>
        <member name="F:RelhaxModpack.AtlasesCreator.Packing.ArevaloRectanglePacker.packedRectangles">
            <summary>Rectangles contained in the packing area</summary>
        </member>
        <member name="M:RelhaxModpack.AtlasesCreator.Packing.ArevaloRectanglePacker.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new rectangle packer</summary>
            <param name="packingAreaWidth">Maximum width of the packing area</param>
            <param name="packingAreaHeight">Maximum height of the packing area</param>
        </member>
        <member name="M:RelhaxModpack.AtlasesCreator.Packing.ArevaloRectanglePacker.TryPack(System.Int32,System.Int32,System.Drawing.Point@)">
            <summary>Tries to allocate space for a rectangle in the packing area</summary>
            <param name="rectangleWidth">Width of the rectangle to allocate</param>
            <param name="rectangleHeight">Height of the rectangle to allocate</param>
            <param name="placement">Output parameter receiving the rectangle's placement</param>
            <returns>True if space for the rectangle could be allocated</returns>
        </member>
        <member name="M:RelhaxModpack.AtlasesCreator.Packing.ArevaloRectanglePacker.OptimizePlacement(System.Drawing.Point@,System.Int32,System.Int32)">
            <summary>
              Optimizes the rectangle's placement by moving it either left or up to fill
              any gaps resulting from rectangles blocking the anchors of the most optimal
              placements.
            </summary>
            <param name="placement">Placement to be optimized</param>
            <param name="rectangleWidth">Width of the rectangle to be optimized</param>
            <param name="rectangleHeight">Height of the rectangle to be optimized</param>
        </member>
        <member name="M:RelhaxModpack.AtlasesCreator.Packing.ArevaloRectanglePacker.SelectAnchorRecursive(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Searches for a free anchor and recursively enlarges the packing area
              if none can be found.
            </summary>
            <param name="rectangleWidth">Width of the rectangle to be placed</param>
            <param name="rectangleHeight">Height of the rectangle to be placed</param>
            <param name="testedPackingAreaWidth">Width of the tested packing area</param>
            <param name="testedPackingAreaHeight">Height of the tested packing area</param>
            <returns>
              Index of the anchor the rectangle is to be placed at or -1 if the rectangle
              does not fit in the packing area anymore.
            </returns>
        </member>
        <member name="M:RelhaxModpack.AtlasesCreator.Packing.ArevaloRectanglePacker.FindFirstFreeAnchor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Locates the first free anchor at which the rectangle fits</summary>
            <param name="rectangleWidth">Width of the rectangle to be placed</param>
            <param name="rectangleHeight">Height of the rectangle to be placed</param>
            <param name="testedPackingAreaWidth">Total width of the packing area</param>
            <param name="testedPackingAreaHeight">Total height of the packing area</param>
            <returns>The index of the first free anchor or -1 if none is found</returns>
        </member>
        <member name="M:RelhaxModpack.AtlasesCreator.Packing.ArevaloRectanglePacker.IsFree(System.Drawing.Rectangle@,System.Int32,System.Int32)">
            <summary>
              Determines whether the rectangle can be placed in the packing area
              at its current location.
            </summary>
            <param name="rectangle">Rectangle whose position to check</param>
            <param name="testedPackingAreaWidth">Total width of the packing area</param>
            <param name="testedPackingAreaHeight">Total height of the packing area</param>
            <returns>True if the rectangle can be placed at its current position</returns>
        </member>
        <member name="M:RelhaxModpack.AtlasesCreator.Packing.ArevaloRectanglePacker.InsertAnchor(System.Drawing.Point)">
            <summary>Inserts a new anchor point into the anchor list</summary>
            <param name="anchor">Anchor point that will be inserted</param>
            <remarks>
              This method tries to keep the anchor list ordered by ranking the anchors
              depending on the distance from the top left corner in the packing area.
            </remarks>
        </member>
        <member name="T:RelhaxModpack.AtlasesCreator.Packing.ImagePacker">
            <summary>
            Handles packing a list of small bitmap objects into one large bitmap object 
            </summary>
        </member>
        <member name="M:RelhaxModpack.AtlasesCreator.Packing.ImagePacker.PackImage(System.Collections.Generic.IEnumerable{RelhaxModpack.Texture},System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Drawing.Bitmap@,System.Collections.Generic.Dictionary{System.String,System.Drawing.Rectangle}@)">
            <summary>
            Packs a collection of images into a single image.
            </summary>
            <param name="imageFiles">The list of Textures of the images to be combined.</param>
            <param name="requirePowerOfTwo">Whether or not the output image must have a power of two size.</param>
            <param name="requireSquareImage">Whether or not the output image must be a square.</param>
            <param name="fastImagePacker">Accept the first successful image packing.</param>
            <param name="maximumWidth">The maximum width of the output image.</param>
            <param name="maximumHeight">The maximum height of the output image.</param>
            <param name="imagePadding">The amount of blank space to insert in between individual images.</param>
            <param name="outputImage">The resulting output image.</param>
            <param name="outputMap">The resulting output map of placement rectangles for the images.</param>
            <returns>0 if the packing was successful, error code otherwise.</returns>
        </member>
        <member name="T:RelhaxModpack.AtlasesCreator.Packing.OutOfSpaceException">
            <summary>Insufficient space left in packing area to contain a given object</summary>
            <remarks>
              An exception being sent to you from deep space. Erm, no, wait, it's an exception
              that occurs when a packing algorithm runs out of space and is unable to fit
              the object you tried to pack into the remaining packing area.
            </remarks>
        </member>
        <member name="M:RelhaxModpack.AtlasesCreator.Packing.OutOfSpaceException.#ctor(System.String)">
            <summary>Initializes the exception with an error message</summary>
            <param name="message">Error message describing the cause of the exception</param>
        </member>
        <member name="T:RelhaxModpack.AtlasesCreator.Packing.RectanglePacker">
            <summary>Base class for rectangle packing algorithms</summary>
            <remarks>
              <para>
                By uniting all rectangle packers under this common base class, you can
                easily switch between different algorithms to find the most efficient or
                performant one for a given job.
              </para>
              <para>
                An almost exhaustive list of packing algorithms can be found here:
                http://www.csc.liv.ac.uk/~epa/surveyhtml.html
              </para>
            </remarks>
        </member>
        <member name="P:RelhaxModpack.AtlasesCreator.Packing.RectanglePacker.PackingAreaWidth">
            <summary>Maximum width the packing area is allowed to have</summary>
        </member>
        <member name="P:RelhaxModpack.AtlasesCreator.Packing.RectanglePacker.PackingAreaHeight">
            <summary>Maximum height the packing area is allowed to have</summary>
        </member>
        <member name="M:RelhaxModpack.AtlasesCreator.Packing.RectanglePacker.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new rectangle packer</summary>
            <param name="packingAreaWidth">Width of the packing area</param>
            <param name="packingAreaHeight">Height of the packing area</param>
        </member>
        <member name="M:RelhaxModpack.AtlasesCreator.Packing.RectanglePacker.Pack(System.Int32,System.Int32)">
            <summary>Allocates space for a rectangle in the packing area</summary>
            <param name="rectangleWidth">Width of the rectangle to allocate</param>
            <param name="rectangleHeight">Height of the rectangle to allocate</param>
            <returns>The location at which the rectangle has been placed</returns>
        </member>
        <member name="M:RelhaxModpack.AtlasesCreator.Packing.RectanglePacker.TryPack(System.Int32,System.Int32,System.Drawing.Point@)">
            <summary>Tries to allocate space for a rectangle in the packing area</summary>
            <param name="rectangleWidth">Width of the rectangle to allocate</param>
            <param name="rectangleHeight">Height of the rectangle to allocate</param>
            <param name="placement">Output parameter receiving the rectangle's placement</param>
            <returns>True if space for the rectangle could be allocated</returns>
        </member>
        <member name="T:RelhaxModpack.AtlasesCreator.IRelhaxUnmanagedLibrary">
            <summary>
            Represents an interface that all unmanaged libraries in the Modpack use. Allows for one method of testing.
            </summary>
        </member>
        <member name="P:RelhaxModpack.AtlasesCreator.IRelhaxUnmanagedLibrary.EmbeddedFilename">
            <summary>
            Gets the name of the embedded zip file containing the dll, 32 or 64 bit version
            </summary>
        </member>
        <member name="P:RelhaxModpack.AtlasesCreator.IRelhaxUnmanagedLibrary.ExtractedFilename">
            <summary>
            Gets the name of the dll file inside the embedded zip file, 32 or 64bit version
            </summary>
        </member>
        <member name="P:RelhaxModpack.AtlasesCreator.IRelhaxUnmanagedLibrary.Filepath">
            <summary>
            Gets the absolute path to the dll file
            </summary>
        </member>
        <member name="P:RelhaxModpack.AtlasesCreator.IRelhaxUnmanagedLibrary.IsExtracted">
            <summary>
            Determines if the file is extracted to the Filepath property location
            </summary>
        </member>
        <member name="P:RelhaxModpack.AtlasesCreator.IRelhaxUnmanagedLibrary.IsLoaded">
            <summary>
            Determines if the library is loaded into memory
            </summary>
        </member>
        <member name="M:RelhaxModpack.AtlasesCreator.IRelhaxUnmanagedLibrary.Load">
            <summary>
            Attempts to load the library using the Filepath property
            </summary>
            <returns>True if the library load was successful</returns>
        </member>
        <member name="M:RelhaxModpack.AtlasesCreator.IRelhaxUnmanagedLibrary.Unload">
            <summary>
            Attempts to unload the library
            </summary>
            <returns>True if the library was unloaded, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.AtlasesCreator.IRelhaxUnmanagedLibrary.Extract">
            <summary>
            Extracts the embedded compressed library to the location in the Filepath property
            </summary>
        </member>
        <member name="T:RelhaxModpack.Category">
            <summary>
            a category is what makes up each tab in the mod selection display window. It holds the first level of list of SelectablePackages
            </summary>
        </member>
        <member name="P:RelhaxModpack.Category.Name">
            <summary>
            The category name displayed to the user in the selection list
            </summary>
        </member>
        <member name="P:RelhaxModpack.Category.XmlFilename">
            <summary>
            The xml filename of this category. Used in database structure V2
            </summary>
        </member>
        <member name="P:RelhaxModpack.Category.OffsetInstallGroups">
            <summary>
            Get or set if the installGroup property of all packages in this category will be offset by each package's level in the package tree
            </summary>
        </member>
        <member name="P:RelhaxModpack.Category.Packages">
            <summary>
            The list of packages contained in this category
            </summary>
        </member>
        <member name="P:RelhaxModpack.Category.ComponentInternalName">
            <summary>
            When a databasePackage, the internal packageName. When category, the category name
            </summary>
        </member>
        <member name="P:RelhaxModpack.Category.Dependencies">
            <summary>
            List of dependencies of this category (Any package selected in this category needs these dependencies)
            </summary>
        </member>
        <member name="F:RelhaxModpack.Category.InstallGroup">
            <summary>
            The install group number of the category. Used to denote which install thread it is assigned to.
            Two (or more) categories can have the same number to be on the same install thread
            </summary>
        </member>
        <member name="P:RelhaxModpack.Category.TabPage">
            <summary>
            The TabItem object reference
            </summary>
        </member>
        <member name="P:RelhaxModpack.Category.CategoryHeader">
            <summary>
            The package created at selection list building that represents the header of this category
            </summary>
        </member>
        <member name="P:RelhaxModpack.Category.DependenciesProp">
            <summary>
            Property of Dependencies list to allow for interface implementation
            </summary>
        </member>
        <member name="M:RelhaxModpack.Category.CompareCatagories(RelhaxModpack.Category,RelhaxModpack.Category)">
            <summary>
            Sorts the Categories by their name property. Currently not implemented.
            </summary>
            <param name="x">The first Category to compare</param>
            <param name="y">The second Category to compare</param>
            <returns>1 if y is later in the alphabet, 0 if equal, -1 else</returns>
        </member>
        <member name="M:RelhaxModpack.Category.ToString">
            <summary>
            Output the object to a string representation
            </summary>
            <returns>The name of the category</returns>
        </member>
        <member name="M:RelhaxModpack.Category.GetFlatPackageList">
            <summary>
            Returns a single depth (flat) list of packages in the category. Leveling is preserved (a sub-package will be directly below the parent in the list)
            </summary>
            <returns>The list of packages</returns>
        </member>
        <member name="M:RelhaxModpack.Category.AnyPackagesChecked">
            <summary>
            Check if any packages in this category are selected for install
            </summary>
            <returns>Try if any package is selected, false otherwise</returns>
        </member>
        <member name="T:RelhaxModpack.Logic">
            <summary>
            An enumerated representation of "and" and "or" logic
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logic.AND">
            <summary>
            A logical AND
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logic.OR">
            <summary>
            A logical OR
            </summary>
        </member>
        <member name="T:RelhaxModpack.DatabaseLogic">
            <summary>
            Used for database dependency calculation. Determines what dependent packages use the package that this object is attached to
            </summary>
        </member>
        <member name="P:RelhaxModpack.DatabaseLogic.PackageName">
            <summary>
            The name of the package that this object is attached to
            </summary>
        </member>
        <member name="P:RelhaxModpack.DatabaseLogic.WillBeInstalled">
            <summary>
            Flag to determine if this package will be installed
            </summary>
        </member>
        <member name="P:RelhaxModpack.DatabaseLogic.NotFlag">
            <summary>
            Flag for negating the "AND" and "OR" logic (Creates "NAND" and "NOR") of how to install the attach object
            </summary>
        </member>
        <member name="P:RelhaxModpack.DatabaseLogic.Logic">
            <summary>
            The logic type to use for this package definition
            </summary>
        </member>
        <member name="P:RelhaxModpack.DatabaseLogic.RefrenceLinked">
            <summary>
            A flag for dependency calculation for when the application has linked the dependnecy refrence
            </summary>
            <remarks>During dependnecy calcuation, the application will 'link' the refrenced dependencies in a package
            to the refrenced dependency. This allows for the application to process dependency calcuation logic in a dynamic
            AND and OR system. Having the flag can help to determine if a refrence does not exist</remarks>
        </member>
        <member name="M:RelhaxModpack.DatabaseLogic.ToString">
            <summary>
            String representation of the object
            </summary>
            <returns>The name of the package this object attaches to</returns>
        </member>
        <member name="M:RelhaxModpack.DatabaseLogic.Copy(RelhaxModpack.DatabaseLogic)">
            <summary>
            Create a copy of the given DatabaseLogic object
            </summary>
            <param name="databaseLogicToCopy">The object to copy</param>
            <returns>A new DatabaseLogic object with the same values</returns>
        </member>
        <member name="T:RelhaxModpack.DatabasePackage">
            <summary>
            A database component is the base class for all other packages
            </summary>
        </member>
        <member name="M:RelhaxModpack.DatabasePackage.FieldsToXmlParseAttributes">
            <summary>
            Get the list of fields in the class that can be parsed as xml attributes
            </summary>
            <returns>The list of fields</returns>
        </member>
        <member name="M:RelhaxModpack.DatabasePackage.FieldsToXmlParseNodes">
            <summary>
            Get the list of fields in the class that can be parsed as xml elements
            </summary>
            <returns>The list of fields</returns>
        </member>
        <member name="P:RelhaxModpack.DatabasePackage.PackageName">
            <summary>
            A unique identifier for each component in the database. No two components will have the same PackageName
            </summary>
        </member>
        <member name="P:RelhaxModpack.DatabasePackage.Version">
            <summary>
            A method to keep track of the version of the package
            </summary>
        </member>
        <member name="P:RelhaxModpack.DatabasePackage.Timestamp">
            <summary>
            Used to determine when the package entry was last modified
            </summary>
        </member>
        <member name="P:RelhaxModpack.DatabasePackage.Size">
            <summary>
            Size of the zip file
            </summary>
        </member>
        <member name="P:RelhaxModpack.DatabasePackage.ZipFile">
            <summary>
            The zip file to extract (can be empty string)
            </summary>
        </member>
        <member name="F:RelhaxModpack.DatabasePackage._Enabled">
            <summary>
            Internal field for Enabled property
            </summary>
        </member>
        <member name="P:RelhaxModpack.DatabasePackage.Enabled">
            <summary>
            Determines if the component is enabled or disabled
            </summary>
        </member>
        <member name="P:RelhaxModpack.DatabasePackage.CRC">
            <summary>
            The crc checksum of the zipfile
            </summary>
        </member>
        <member name="P:RelhaxModpack.DatabasePackage.StartAddress">
            <summary>
            The start address of the URL to the zip file
            URL format: StartAddress + ZipFile + EndAddress
            </summary>
        </member>
        <member name="P:RelhaxModpack.DatabasePackage.EndAddress">
            <summary>
            The end address of the URL to the zip file
            URL format: StartAddress + ZipFile + EndAddress
            </summary>
        </member>
        <member name="P:RelhaxModpack.DatabasePackage.DownloadFlag">
            <summary>
            Determine at install time if the package needs to be downloaded
            </summary>
        </member>
        <member name="P:RelhaxModpack.DatabasePackage.ReadyForInstall">
            <summary>
            Determine if the mod has been downloaded and is ready for installation
            </summary>
        </member>
        <member name="P:RelhaxModpack.DatabasePackage.LogAtInstall">
            <summary>
            Determine if the files from the package should be logged for un-installation
            only set this to false if absolutely necessary!
            </summary>
        </member>
        <member name="P:RelhaxModpack.DatabasePackage.Triggers">
            <summary>
            The list of triggers that this package can start (list of triggers that apply to this package)
            </summary>
        </member>
        <member name="P:RelhaxModpack.DatabasePackage.DevURL">
            <summary>
            The URL link of where you can view the web page of the mod
            </summary>
        </member>
        <member name="P:RelhaxModpack.DatabasePackage.InstallGroup">
            <summary>
            The level at which this package can be installed. It will be installed with other packages of the same install group at the same time
            </summary>
        </member>
        <member name="P:RelhaxModpack.DatabasePackage.PatchGroup">
            <summary>
            The level at which the patches for this package can be installed. Patches will be executed with other patches of the same patch group
            </summary>
        </member>
        <member name="P:RelhaxModpack.DatabasePackage.InternalNotes">
            <summary>
            Internal instructions for updating the mod for database managers
            </summary>
        </member>
        <member name="P:RelhaxModpack.DatabasePackage.Author">
            <summary>
            The name of the author of the mod/configuration/etc.
            </summary>
        </member>
        <member name="P:RelhaxModpack.DatabasePackage.BytesToDownload">
            <summary>
            The number of bytes to download, used if "install while download" is true
            </summary>
        </member>
        <member name="P:RelhaxModpack.DatabasePackage.BytesDownloaded">
            <summary>
            The number of bytes currently downloaded, used if "install while download" is true
            </summary>
        </member>
        <member name="P:RelhaxModpack.DatabasePackage.IsCurrentlyDownloading">
            <summary>
            Flag to determine if this package is the one currently downloading, used if "install while download" is true
            </summary>
        </member>
        <member name="F:RelhaxModpack.DatabasePackage.AppendExtraction">
            <summary>
            Determines if this package should be put into a list that will be installed last. Used for when the package is possibly overwriting files, for example
            </summary>
        </member>
        <member name="P:RelhaxModpack.DatabasePackage.EditorTreeViewItem">
            <summary>
            Reference for the UI element of this package in the database editor
            </summary>
        </member>
        <member name="P:RelhaxModpack.DatabasePackage.ExtractionStarted">
            <summary>
            Flag used for the "download while install" setting. Default is false until it is set true. Once set, the installer will not try to extract this package again
            </summary>
        </member>
        <member name="M:RelhaxModpack.DatabasePackage.ToString">
            <summary>
            String representation of the object
            </summary>
            <returns>The PackageName of the package</returns>
        </member>
        <member name="P:RelhaxModpack.DatabasePackage.CompletePath">
            <summary>
            Provides a complete tree style path to the package using its UI name, starting with the category
            </summary>
        </member>
        <member name="P:RelhaxModpack.DatabasePackage.CompletePackageNamePath">
            <summary>
            Provides a complete tree style path to the package using its internal packageName, starting with the category
            </summary>
        </member>
        <member name="M:RelhaxModpack.DatabasePackage.#ctor">
            <summary>
            Creates an instance of the DatabasePackage class
            </summary>
        </member>
        <member name="M:RelhaxModpack.DatabasePackage.#ctor(RelhaxModpack.DatabasePackage,System.Boolean)">
            <summary>
            Creates an instance of the DatabasePackage class based on the provided DatabasePackage
            </summary>
            <param name="packageToCopy">The package to copy the information from</param>
            <param name="deep">Set to true to copy list objects, false to use new lists</param>
        </member>
        <member name="T:RelhaxModpack.Dependency">
            <summary>
            Represents a package with logical calculations. A dependency is only installed when a selectable package is checked
            for installation and is dependent on the dependency i.e. 6th sense sound and icon mods require the 6th sense script dependency
            </summary>
        </member>
        <member name="M:RelhaxModpack.Dependency.FieldsToXmlParseAttributes">
            <summary>
            Gets a list of fields (including from base classes) that can be parsed as xml attributes
            </summary>
            <returns>The string list</returns>
        </member>
        <member name="M:RelhaxModpack.Dependency.FieldsToXmlParseNodes">
            <summary>
            Gets a list of fields (including from base classes) that can be parsed as xml elements
            </summary>
            <returns>The string list</returns>
        </member>
        <member name="P:RelhaxModpack.Dependency.DatabasePackageLogic">
            <summary>
            List of linked mods and configs that use this dependency at install time
            </summary>
        </member>
        <member name="P:RelhaxModpack.Dependency.Dependencies">
            <summary>
            List of dependencies this dependency calls on
            </summary>
        </member>
        <member name="F:RelhaxModpack.Dependency.wasLogicalDependencyLegacy">
            <summary>
            When loading from legacy database type and is was of type "logicalDependency"
            </summary>
        </member>
        <member name="P:RelhaxModpack.Dependency.DependenciesProp">
            <summary>
            Property of Dependencies list to allow for interface implementation
            </summary>
        </member>
        <member name="M:RelhaxModpack.Dependency.#ctor">
            <summary>
            Create an instance of the Dependency class and over-ride DatabasePackage default values
            </summary>
        </member>
        <member name="M:RelhaxModpack.Dependency.#ctor(RelhaxModpack.DatabasePackage,System.Boolean)">
            <summary>
            Create an instance of the Dependency class and over-ride DatabasePackage default values, while using values provided for copy objects
            </summary>
            <param name="packageToCopyFrom">The package to copy the information from</param>
            <param name="deep">Set to true to copy list objects, false to use new lists</param>
        </member>
        <member name="T:RelhaxModpack.DatabaseComponents.IComponentWithDependencies">
            <summary>
            Provides an interface for Categories and packages to share commonality since they both can have dependencies
            </summary>
        </member>
        <member name="P:RelhaxModpack.DatabaseComponents.IComponentWithDependencies.DependenciesProp">
            <summary>
            The property wrapper of the Dependencies field
            </summary>
        </member>
        <member name="P:RelhaxModpack.DatabaseComponents.IComponentWithID.ComponentInternalName">
            <summary>
            When a databasePackage, the internal packageName. When category, the category name
            </summary>
        </member>
        <member name="T:RelhaxModpack.MediaType">
            <summary>
            The supported types of media formats supported for preview in the application
            </summary>
        </member>
        <member name="F:RelhaxModpack.MediaType.Unknown">
            <summary>
            Catch-all case for unknown media when parsing
            </summary>
        </member>
        <member name="F:RelhaxModpack.MediaType.Picture">
            <summary>
            A direct link to a picture
            </summary>
        </member>
        <member name="F:RelhaxModpack.MediaType.Webpage">
            <summary>
            A direct link to a website (like for embedding a web player)
            </summary>
        </member>
        <member name="F:RelhaxModpack.MediaType.MediaFile">
            <summary>
            A direct link to an audio file
            </summary>
        </member>
        <member name="F:RelhaxModpack.MediaType.HTML">
            <summary>
            Raw HTML code to display in embedded browser
            </summary>
        </member>
        <member name="T:RelhaxModpack.Media">
            <summary>
            A media object is a preview-able component stored in a list in SelectablePackages
            </summary>
        </member>
        <member name="P:RelhaxModpack.Media.URL">
            <summary>
            For direct link types, the URL to the element or resource
            </summary>
            <remarks>HTTP and HTTPS links work for this property</remarks>
        </member>
        <member name="P:RelhaxModpack.Media.MediaType">
            <summary>
            The type of media for the URL to be interpreted as
            </summary>
        </member>
        <member name="M:RelhaxModpack.Media.ToString">
            <summary>
            The string properties of the object
            </summary>
            <returns>The integer code of the MediaType and the first 80 characters of the URL</returns>
        </member>
        <member name="M:RelhaxModpack.Media.Copy(RelhaxModpack.Media)">
            <summary>
            Create a copy of the Media object
            </summary>
            <param name="mediaToCopy">The object to copy</param>
            <returns>A new Media object with the same values</returns>
        </member>
        <member name="T:RelhaxModpack.PackageComparerByPackageName">
            <summary>
            Enables comparison of Packages by their PackageName property
            </summary>
        </member>
        <member name="M:RelhaxModpack.PackageComparerByPackageName.Equals(RelhaxModpack.DatabasePackage,RelhaxModpack.DatabasePackage)">
            <summary>
            Determines if PackageName of package x is before or after PackageName of Package y
            </summary>
            <param name="x">The first package</param>
            <param name="y">The second package</param>
            <returns>1,0,-1 from string PackageName comparison</returns>
        </member>
        <member name="M:RelhaxModpack.PackageComparerByPackageName.GetHashCode(RelhaxModpack.DatabasePackage)">
            <summary>
            Returns the hash code of the PackageName of the Package
            </summary>
            <param name="package">The package to get the hash code</param>
            <returns>The hash code of the PackageName of the Package</returns>
        </member>
        <member name="T:RelhaxModpack.PackageComparerByDisplayName">
            <summary>
            Enables comparison of Packages by their Name property
            </summary>
        </member>
        <member name="M:RelhaxModpack.PackageComparerByDisplayName.Equals(RelhaxModpack.SelectablePackage,RelhaxModpack.SelectablePackage)">
            <summary>
            Determines if Name of package x is before or after Name of Package y
            </summary>
            <param name="x">The first package</param>
            <param name="y">The second package</param>
            <returns>1,0,-1 from string Name comparison</returns>
        </member>
        <member name="M:RelhaxModpack.PackageComparerByDisplayName.GetHashCode(RelhaxModpack.SelectablePackage)">
            <summary>
            Returns the hash code of the Name of the Package
            </summary>
            <param name="package">The package to get the hash code</param>
            <returns>The hash code of the Name of the Package</returns>
        </member>
        <member name="T:RelhaxModpack.SelectionTypes">
            <summary>
            The types of UI selections for building the selection tree
            </summary>
        </member>
        <member name="F:RelhaxModpack.SelectionTypes.none">
            <summary>
            Used as catch-all for any mis-assigned selection types
            </summary>
        </member>
        <member name="F:RelhaxModpack.SelectionTypes.single1">
            <summary>
            A radio button selection (only one of many), can have children
            </summary>
        </member>
        <member name="F:RelhaxModpack.SelectionTypes.single_dropdown1">
            <summary>
            A combobox selection (only one of many), cannot have children
            </summary>
        </member>
        <member name="F:RelhaxModpack.SelectionTypes.single_dropdown2">
            <summary>
            Another combobox selection (only one of many), cannot have children
            </summary>
        </member>
        <member name="F:RelhaxModpack.SelectionTypes.multi">
            <summary>
            A checkbox selection (many of many), can have children
            </summary>
        </member>
        <member name="T:RelhaxModpack.SelectablePackage">
            <summary>
            A package that can be selected in the UI, most commonly a mod or a configuration parameter for a mod
            </summary>
        </member>
        <member name="M:RelhaxModpack.SelectablePackage.FieldsToXmlParseAttributes">
            <summary>
            Gets a list of fields (including from base classes) that can be parsed as xml attributes
            </summary>
            <returns>The string list</returns>
        </member>
        <member name="M:RelhaxModpack.SelectablePackage.FieldsToXmlParseNodes">
            <summary>
            Gets a list of fields (including from base classes) that can be parsed as xml elements
            </summary>
            <returns>The string list</returns>
        </member>
        <member name="M:RelhaxModpack.SelectablePackage.#ctor">
            <summary>
            Create an instance of the SelectablePackage class and over-ride DatabasePackage default values
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.Name">
            <summary>
            The display name of the package
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.NameFormatted">
            <summary>
            The name of the package with the version macro replaced for use display
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.ParentCategory">
            <summary>
            The Category object reference
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.Type">
            <summary>
            The type of selectable package logic to follow (see SelectionTypes enumeration for options)
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.Parent">
            <summary>
            The reference for the direct parent of this package
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.TopParent">
            <summary>
            The reference for the absolute top of the package tree
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.Visible">
            <summary>
            A flag to determine whether or not the mod should be shown in UI
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.UpdateComment">
            <summary>
            Update comments of the package
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.Description">
            <summary>
            description of the package
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.PopularMod">
            <summary>
            Flag to determine if the package is popular
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.GreyAreaMod">
            <summary>
            Flag to determine if the package is of controversial nature
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.ObfuscatedMod">
            <summary>
            Flag to determine if the if the package is obfuscated/encrypted and can't be checked for viruses or malware
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.SortChildPackages">
            <summary>
            Flag to determine any packages of this package should be sorted (by name)
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.FlagForSelectionSave">
            <summary>
            Used as internal flag for if application settings is checked "SaveDisabledModsInSelection". Allows for disabled mods to be saved back to the user's selection
            </summary>
        </member>
        <member name="F:RelhaxModpack.SelectablePackage._Checked">
            <summary>
            Field for whether the package is selected to install
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.Checked">
            <summary>
            Property for if the package is selected by the user to install. handles all color change and single_dropdown updating code
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.Enabled">
            <summary>
            Overrides DatabasePackage.Enabled property. Used to toggle if the mod should be selectable and installed in the selection list.
            The override also enables the triggering of the UI components to reflect the user's selection changes.
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.Level">
            <summary>
            The level in the database tree where the package resides.
            Category header is -1, each child is +1 from there
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.UserFiles">
            <summary>
            The list of cache files that should be backed up before wiping the directory
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.Packages">
            <summary>
            The list of child SelectablePackage entries in this instance of SelectablePackages
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.Medias">
            <summary>
            List of media preview items associated with this package, shown in the preview window on right click of component
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.Dependencies">
            <summary>
            A list of packages (from dependencies list) that this package is dependent on in order to be installed
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.DependenciesProp">
            <summary>
            Property of Dependencies list to allow for interface implementation
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.ConflictingPackages">
            <summary>
            A list of any SelectablePackages that conflict with this mod. A conflict will result the package not being processed.
            Refer to examples for more information
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.ShowInSearchList">
            <summary>
            Toggle if the package should appear in the search list
            </summary>
        </member>
        <member name="F:RelhaxModpack.SelectablePackage.UIComponent">
            <summary>
            The UI element reference for this package
            </summary>
        </member>
        <member name="F:RelhaxModpack.SelectablePackage.ParentUIComponent">
            <summary>
            The UI element reference for the direct parent of this package
            </summary>
        </member>
        <member name="F:RelhaxModpack.SelectablePackage.TopParentUIComponent">
            <summary>
            The UI element reference for the absolute top of the package tree
            </summary>
        </member>
        <member name="F:RelhaxModpack.SelectablePackage.RelhaxWPFComboBoxList">
            <summary>
            The list of WPF combo boxes for each combobox type
            </summary>
        </member>
        <member name="F:RelhaxModpack.SelectablePackage.ChildBorder">
            <summary>
            The border for the legacy view to allow for putting all children in the border. sits inside TreeViewItem. WPF component
            </summary>
        </member>
        <member name="F:RelhaxModpack.SelectablePackage.ChildStackPanel">
            <summary>
            The StackPanel to allow the child TreeViewItems to stack upon each other. sits inside the border. WPF component
            </summary>
        </member>
        <member name="F:RelhaxModpack.SelectablePackage.ParentBorder">
            <summary>
            The border that this component is in. WPF component
            </summary>
        </member>
        <member name="F:RelhaxModpack.SelectablePackage.ParentStackPanel">
            <summary>
            The StackPanel that this item is inside. WPF component
            </summary>
        </member>
        <member name="F:RelhaxModpack.SelectablePackage.ContentControl">
            <summary>
            ContentControl item to allow for right-clicking of disabled components. defaultv2 WPF component
            </summary>
        </member>
        <member name="F:RelhaxModpack.SelectablePackage.ScrollViewer">
            <summary>
            Component used only in the top SelectablePackage to allow for scrolling of the package lists for each category
            </summary>
        </member>
        <member name="F:RelhaxModpack.SelectablePackage.TreeViewItem">
            <summary>
            The TreeViewItem that corresponds to this package. legacy WPF component
            </summary>
        </member>
        <member name="F:RelhaxModpack.SelectablePackage.TreeView">
            <summary>
            The TreeView that this package is in. legacy WPF component
            </summary>
        </member>
        <member name="F:RelhaxModpack.SelectablePackage.TabIndex">
            <summary>
            The TabItem UI reference
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.CompletePath">
            <summary>
            Provides a complete path of the name fields from the top package down to where this package is located in the tree
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.CompletePackageNamePath">
            <summary>
            Provides a complete path of the packageName fields from the top package down to where this package is located in the tree
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.IsStructureVisible">
            <summary>
            Determines if the UI package structure to this package is of all visible components.
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.IsStructureEnabled">
            <summary>
            Determines if all parent packages leading to this package are enabled. In other words, it checks if the path to this package is enabled
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.NameDisplay">
            <summary>
            Returns the display name of the package for the UI, with version macros replaced and any other statuses appended
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.TimeStampString">
            <summary>
            Returns a string representation of the timestamp of when the zip file of this package was last modified
            </summary>
        </member>
        <member name="P:RelhaxModpack.SelectablePackage.ToolTipString">
            <summary>
            Returns the display tool tip string, or the translation string for "no description"
            </summary>
        </member>
        <member name="M:RelhaxModpack.SelectablePackage.CompareModsPackageName(RelhaxModpack.SelectablePackage,RelhaxModpack.SelectablePackage)">
            <summary>
            Alphabetical sorting of packages by PackageName property at this level (not recursive)
            </summary>
            <param name="x">First package to compare</param>
            <param name="y">Second package to compare</param>
            <returns></returns>
        </member>
        <member name="M:RelhaxModpack.SelectablePackage.CompareModsName(RelhaxModpack.SelectablePackage,RelhaxModpack.SelectablePackage)">
            <summary>
            Alphabetical sorting of packages by NameFormatted property at this level (not recursive)
            </summary>
            <param name="x">First package to compare</param>
            <param name="y">Second package to compare</param>
            <returns></returns>
        </member>
        <member name="M:RelhaxModpack.SelectablePackage.ToString">
            <summary>
            Allows for display in a combobox and when debugging
            </summary>
            <returns>The nameFormatted property of the package</returns>
        </member>
        <member name="M:RelhaxModpack.SelectablePackage.AnyPackagesChecked">
            <summary>
            Check if the color change should be changed on or off, based on if any other packages at this level are enabled and checked
            </summary>
            <returns>True if another package at this level is checked and enabled, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.SelectablePackage.#ctor(RelhaxModpack.DatabasePackage,System.Boolean)">
            <summary>
            Create an instance of the SelectablePackage class and over-ride DatabasePackage default values, while using values provided for copy objects
            </summary>
            <param name="packageToCopyFrom">The package to copy the information from</param>
            <param name="deep">Set to true to copy list objects, false to use new lists</param>
        </member>
        <member name="T:RelhaxModpack.Trigger">
            <summary>
            Represents a trigger object used in the installer as an event starter.
            For example, a contour icon trigger exists to start the building of contour icons
            </summary>
        </member>
        <member name="P:RelhaxModpack.Trigger.Name">
            <summary>
            The name of the trigger
            </summary>
        </member>
        <member name="P:RelhaxModpack.Trigger.Total">
            <summary>
            The total number of instances that this trigger exists in the selected packages to install
            </summary>
        </member>
        <member name="P:RelhaxModpack.Trigger.NumberProcessed">
            <summary>
            The number of processed triggers for this trigger type. Prevents the trigger from firing early
            </summary>
        </member>
        <member name="P:RelhaxModpack.Trigger.Fired">
            <summary>
            Flag to determine if the trigger task has started
            </summary>
        </member>
        <member name="P:RelhaxModpack.Trigger.TriggerTask">
            <summary>
            The reference for the task that the trigger should perform
            </summary>
        </member>
        <member name="T:RelhaxModpack.UserFile">
            <summary>
            An object that represents cache files generated by mods that should be backed up and restored as to not loose cache data (like session stats or auto equip data)
            </summary>
        </member>
        <member name="P:RelhaxModpack.UserFile.Pattern">
            <summary>
            The path or pattern to a file or files to backup to a temporary directory
            </summary>
        </member>
        <member name="P:RelhaxModpack.UserFile.PlaceBeforeExtraction">
            <summary>
            Speed up the restore backup function in case of ClanIcons, the "backup folder" will be pushed back at once (and not file by file)
            </summary>
        </member>
        <member name="P:RelhaxModpack.UserFile.SystemInitiated">
            <summary>
            Entry will be processed in any case (if package is checked), even if "save user data" option is "false"
            </summary>
        </member>
        <member name="P:RelhaxModpack.UserFile.FilesSaved">
            <summary>
            The list of actual files saved to the temporary backup directory. Contains the full path and file name
            </summary>
        </member>
        <member name="M:RelhaxModpack.UserFile.ToString">
            <summary>
            The string representation of the UserFile object
            </summary>
            <returns>The string pattern</returns>
        </member>
        <member name="M:RelhaxModpack.UserFile.Copy(RelhaxModpack.UserFile)">
            <summary>
            Create a copy of the UserFile object
            </summary>
            <param name="userFileToCopy">The object to copy</param>
            <returns>A new UserFile object with the same values</returns>
        </member>
        <member name="M:RelhaxModpack.UserFile.DeepCopy(RelhaxModpack.UserFile)">
            <summary>
            Create a deep copy of the UserFile object
            </summary>
            <param name="userFileToCopy">The object to copy</param>
            <returns>A new UserFile object with the same values and new list elements with the same values</returns>
        </member>
        <member name="T:RelhaxModpack.UIComponents.BoundUISettings">
            <summary>
            The staic location for all color definitions that need to be databound by WPF
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.BoundUISettings.ButtonHighlightBrush">
            <summary>
            Get or set the Button highlight color
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.BoundUISettings.TabItemHighlightBrush">
            <summary>
            Get or set the TabItem highlight color
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.BoundUISettings.TabItemSelectedBrush">
            <summary>
            Get or set the TabItem selected (mouse down) color
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.BoundUISettings.CheckboxHighlightBrush">
            <summary>
            Get of set the Checkbox highlight color
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.BoundUISettings.CheckboxCheckmarkBrush">
            <summary>
            Get or set the Checkbox checkmark color (selected)
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.BoundUISettings.RadioButtonHighlightBrush">
            <summary>
            Get or set the RadioButton highlight color
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.BoundUISettings.RadioButtonCheckmarkBrush">
            <summary>
            Get or set the RadioButton checkmark color (selected)
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.BoundUISettings.ComboboxOutsideHighlightBrush">
            <summary>
            Get or set the combobox highlight background color
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.BoundUISettings.ComboboxInsideColorBrush">
            <summary>
            Get or set the combobox text color of the inside list items
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.BoundUISettings.ComboboxOutsideColorBrush">
            <summary>
            Get or set the combobox background color
            </summary>
        </member>
        <member name="E:RelhaxModpack.UIComponents.BoundUISettings.StaticPropertyChanged">
            <summary>
            Event handler for when a static property is changed in code
            </summary>
            <remarks>See https://stackoverflow.com/questions/34762879/static-binding-doesnt-update-when-resource-changes </remarks>
        </member>
        <member name="M:RelhaxModpack.UIComponents.BoundUISettings.SetBrushProperty(RelhaxModpack.UIComponents.CustomPropertyBrush)">
            <summary>
            Set the color of one of the properties in this class. The name of the property should be inside 
            </summary>
            <param name="customBrush">The color and property to update</param>
        </member>
        <member name="T:RelhaxModpack.UIComponents.ClassColorset">
            <summary>
            A ClassColorset is a definitions object of all the colors to apply to the corresponding UI object
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassColorset.ClassThemeDefinition">
            <summary>
            The theme definition rule set to use for this UI object class type (like Control)
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassColorset.BackgroundBrush">
            <summary>
            The Background color property
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassColorset.ForegroundBrush">
            <summary>
            The Foreground color property
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassColorset.HighlightBrush">
            <summary>
            The Highlight color property
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassColorset.SelectedBrush">
            <summary>
            The Selected (mouse down) color property
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassColorset.BoundedBrushes">
            <summary>
            Returns a list of brushes that are bounded to WPF UI definitions
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.ClassThemeDefinitions.BorderClassThemeDefinition">
            <summary>
            The UI class theme definition for Border class
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.BorderClassThemeDefinition.ClassType">
            <summary>
            The Type object that corresponds to this UI class
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.BorderClassThemeDefinition.BackgroundAllowed">
            <summary>
            Determines if background color is allowed to change
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.BorderClassThemeDefinition.BackgroundBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.BorderClassThemeDefinition.BackgroundAppliedLocal">
            <summary>
            Determines if the color is applied locally as to not interfere with dependency source ordering
            </summary>
            <remarks>See https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/dependency-property-value-precedence#setcurrentvalue </remarks>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.BorderClassThemeDefinition.BackgroundDependencyProperty">
            <summary>
            The reference to the Background DependencyProperty (if exists) of this class type for setting the value locally
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.BorderClassThemeDefinition.ForegroundAllowed">
            <summary>
            Determines if Foreground color is allowed to change
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.BorderClassThemeDefinition.ForegroundBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.BorderClassThemeDefinition.ForegroundAppliedLocal">
            <summary>
            Determines if the color is applied locally as to not interfere with dependency source ordering
            </summary>
            <remarks>See https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/dependency-property-value-precedence#setcurrentvalue </remarks>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.BorderClassThemeDefinition.ForegroundDependencyProperty">
            <summary>
            The reference to the Foreground DependencyProperty (if exists) of this class type for setting the value locally
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.BorderClassThemeDefinition.HighlightAllowed">
            <summary>
            Determines if Highlight color is allowed to change. Highlight can only be changed by WPF data-bind
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.BorderClassThemeDefinition.HighlightBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.BorderClassThemeDefinition.SelectAllowed">
            <summary>
            Determines if Select (mouse button down color) color is allowed to change. Select can only be changed by WPF data-bind
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.BorderClassThemeDefinition.SelectBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.ClassThemeDefinitions.ButtonClassThemeDefinition">
            <summary>
            The UI class theme definition for Button class
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ButtonClassThemeDefinition.ClassType">
            <summary>
            The Type object that corresponds to this UI class
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ButtonClassThemeDefinition.BackgroundAllowed">
            <summary>
            Determines if background color is allowed to change
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ButtonClassThemeDefinition.BackgroundBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ButtonClassThemeDefinition.BackgroundAppliedLocal">
            <summary>
            Determines if the color is applied locally as to not interfere with dependency source ordering
            </summary>
            <remarks>See https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/dependency-property-value-precedence#setcurrentvalue </remarks>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ButtonClassThemeDefinition.BackgroundDependencyProperty">
            <summary>
            The reference to the Background DependencyProperty (if exists) of this class type for setting the value locally
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ButtonClassThemeDefinition.ForegroundAllowed">
            <summary>
            Determines if Foreground color is allowed to change
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ButtonClassThemeDefinition.ForegroundBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ButtonClassThemeDefinition.ForegroundAppliedLocal">
            <summary>
            Determines if the color is applied locally as to not interfere with dependency source ordering
            </summary>
            <remarks>See https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/dependency-property-value-precedence#setcurrentvalue </remarks>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ButtonClassThemeDefinition.ForegroundDependencyProperty">
            <summary>
            The reference to the Foreground DependencyProperty (if exists) of this class type for setting the value locally
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ButtonClassThemeDefinition.HighlightAllowed">
            <summary>
            Determines if Highlight color is allowed to change. Highlight can only be changed by WPF data-bind
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ButtonClassThemeDefinition.HighlightBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ButtonClassThemeDefinition.SelectAllowed">
            <summary>
            Determines if Select (mouse button down color) color is allowed to change. Select can only be changed by WPF data-bind
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ButtonClassThemeDefinition.SelectBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.ClassThemeDefinitions.CheckboxClassThemeDefinition">
            <summary>
            The UI class theme definition for Checkbox class
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.CheckboxClassThemeDefinition.ClassType">
            <summary>
            The Type object that corresponds to this UI class
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.CheckboxClassThemeDefinition.BackgroundAllowed">
            <summary>
            Determines if background color is allowed to change
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.CheckboxClassThemeDefinition.BackgroundBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.CheckboxClassThemeDefinition.BackgroundAppliedLocal">
            <summary>
            Determines if the color is applied locally as to not interfere with dependency source ordering
            </summary>
            <remarks>See https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/dependency-property-value-precedence#setcurrentvalue </remarks>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.CheckboxClassThemeDefinition.BackgroundDependencyProperty">
            <summary>
            The reference to the Background DependencyProperty (if exists) of this class type for setting the value locally
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.CheckboxClassThemeDefinition.ForegroundAllowed">
            <summary>
            Determines if Foreground color is allowed to change
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.CheckboxClassThemeDefinition.ForegroundBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.CheckboxClassThemeDefinition.ForegroundAppliedLocal">
            <summary>
            Determines if the color is applied locally as to not interfere with dependency source ordering
            </summary>
            <remarks>See https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/dependency-property-value-precedence#setcurrentvalue </remarks>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.CheckboxClassThemeDefinition.ForegroundDependencyProperty">
            <summary>
            The reference to the Foreground DependencyProperty (if exists) of this class type for setting the value locally
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.CheckboxClassThemeDefinition.HighlightAllowed">
            <summary>
            Determines if Highlight color is allowed to change. Highlight can only be changed by WPF data-bind
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.CheckboxClassThemeDefinition.HighlightBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.CheckboxClassThemeDefinition.SelectAllowed">
            <summary>
            Determines if Select (mouse button down color) color is allowed to change. Select can only be changed by WPF data-bind
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.CheckboxClassThemeDefinition.SelectBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.ClassThemeDefinitions.ComboboxClassThemeDefinition">
            <summary>
            The UI class theme definition for Combobox class
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ComboboxClassThemeDefinition.ClassType">
            <summary>
            The Type object that corresponds to this UI class
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ComboboxClassThemeDefinition.BackgroundAllowed">
            <summary>
            Determines if background color is allowed to change
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ComboboxClassThemeDefinition.BackgroundBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ComboboxClassThemeDefinition.BackgroundAppliedLocal">
            <summary>
            Determines if the color is applied locally as to not interfere with dependency source ordering
            </summary>
            <remarks>See https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/dependency-property-value-precedence#setcurrentvalue </remarks>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ComboboxClassThemeDefinition.BackgroundDependencyProperty">
            <summary>
            The reference to the Background DependencyProperty (if exists) of this class type for setting the value locally
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ComboboxClassThemeDefinition.ForegroundAllowed">
            <summary>
            Determines if Foreground color is allowed to change
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ComboboxClassThemeDefinition.ForegroundBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ComboboxClassThemeDefinition.ForegroundAppliedLocal">
            <summary>
            Determines if the color is applied locally as to not interfere with dependency source ordering
            </summary>
            <remarks>See https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/dependency-property-value-precedence#setcurrentvalue </remarks>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ComboboxClassThemeDefinition.ForegroundDependencyProperty">
            <summary>
            The reference to the Foreground DependencyProperty (if exists) of this class type for setting the value locally
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ComboboxClassThemeDefinition.HighlightAllowed">
            <summary>
            Determines if Highlight color is allowed to change. Highlight can only be changed by WPF data-bind
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ComboboxClassThemeDefinition.HighlightBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ComboboxClassThemeDefinition.SelectAllowed">
            <summary>
            Determines if Select (mouse button down color) color is allowed to change. Select can only be changed by WPF data-bind
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ComboboxClassThemeDefinition.SelectBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.ClassThemeDefinitions.ControlClassThemeDefinition">
            <summary>
            The UI class theme definition for Control class
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ControlClassThemeDefinition.ClassType">
            <summary>
            The Type object that corresponds to this UI class
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ControlClassThemeDefinition.BackgroundAllowed">
            <summary>
            Determines if background color is allowed to change
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ControlClassThemeDefinition.BackgroundBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ControlClassThemeDefinition.BackgroundAppliedLocal">
            <summary>
            Determines if the color is applied locally as to not interfere with dependency source ordering
            </summary>
            <remarks>See https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/dependency-property-value-precedence#setcurrentvalue </remarks>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ControlClassThemeDefinition.BackgroundDependencyProperty">
            <summary>
            The reference to the Background DependencyProperty (if exists) of this class type for setting the value locally
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ControlClassThemeDefinition.ForegroundAllowed">
            <summary>
            Determines if Foreground color is allowed to change
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ControlClassThemeDefinition.ForegroundBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ControlClassThemeDefinition.ForegroundAppliedLocal">
            <summary>
            Determines if the color is applied locally as to not interfere with dependency source ordering
            </summary>
            <remarks>See https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/dependency-property-value-precedence#setcurrentvalue </remarks>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ControlClassThemeDefinition.ForegroundDependencyProperty">
            <summary>
            The reference to the Foreground DependencyProperty (if exists) of this class type for setting the value locally
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ControlClassThemeDefinition.HighlightAllowed">
            <summary>
            Determines if Highlight color is allowed to change. Highlight can only be changed by WPF data-bind
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ControlClassThemeDefinition.HighlightBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ControlClassThemeDefinition.SelectAllowed">
            <summary>
            Determines if Select (mouse button down color) color is allowed to change. Select can only be changed by WPF data-bind
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ControlClassThemeDefinition.SelectBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.ClassThemeDefinitions.IClassThemeDefinition">
            <summary>
            The UI class theme interface definition for holding all properties of theme definitions
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.IClassThemeDefinition.ClassType">
            <summary>
            The Type object that corresponds to the instanced UI class
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.IClassThemeDefinition.BackgroundAllowed">
            <summary>
            Determines if Background color is allowed to change
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.IClassThemeDefinition.BackgroundBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.IClassThemeDefinition.BackgroundAppliedLocal">
            <summary>
            Determines if the color is applied locally as to not interfere with dependency source ordering
            </summary>
            <remarks>See https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/dependency-property-value-precedence#setcurrentvalue </remarks>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.IClassThemeDefinition.BackgroundDependencyProperty">
            <summary>
            The reference to the Background DependencyProperty (if exists) of this class type for setting the value locally
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.IClassThemeDefinition.ForegroundAllowed">
            <summary>
            Determines if Foreground color is allowed to change
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.IClassThemeDefinition.ForegroundBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.IClassThemeDefinition.ForegroundAppliedLocal">
            <summary>
            Determines if the color is applied locally as to not interfere with dependency source ordering
            </summary>
            <remarks>See https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/dependency-property-value-precedence#setcurrentvalue </remarks>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.IClassThemeDefinition.ForegroundDependencyProperty">
            <summary>
            The reference to the Foreground DependencyProperty (if exists) of this class type for setting the value locally
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.IClassThemeDefinition.HighlightAllowed">
            <summary>
            Determines if Highlight color is allowed to change. Highlight can only be changed by WPF data-bind
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.IClassThemeDefinition.HighlightBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.IClassThemeDefinition.SelectAllowed">
            <summary>
            Determines if Select (mouse button down color) color is allowed to change. Select can only be changed by WPF data-bind
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.IClassThemeDefinition.SelectBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.ClassThemeDefinitions.PanelClassThemeDefinition">
            <summary>
            The UI class theme definition for Panel class
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.PanelClassThemeDefinition.ClassType">
            <summary>
            The Type object that corresponds to this UI class
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.PanelClassThemeDefinition.BackgroundAllowed">
            <summary>
            Determines if background color is allowed to change
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.PanelClassThemeDefinition.BackgroundBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.PanelClassThemeDefinition.BackgroundAppliedLocal">
            <summary>
            Determines if the color is applied locally as to not interfere with dependency source ordering
            </summary>
            <remarks>See https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/dependency-property-value-precedence#setcurrentvalue </remarks>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.PanelClassThemeDefinition.BackgroundDependencyProperty">
            <summary>
            The reference to the Background DependencyProperty (if exists) of this class type for setting the value locally
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.PanelClassThemeDefinition.ForegroundAllowed">
            <summary>
            Determines if Foreground color is allowed to change
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.PanelClassThemeDefinition.ForegroundBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.PanelClassThemeDefinition.ForegroundAppliedLocal">
            <summary>
            Determines if the color is applied locally as to not interfere with dependency source ordering
            </summary>
            <remarks>See https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/dependency-property-value-precedence#setcurrentvalue </remarks>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.PanelClassThemeDefinition.ForegroundDependencyProperty">
            <summary>
            The reference to the Foreground DependencyProperty (if exists) of this class type for setting the value locally
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.PanelClassThemeDefinition.HighlightAllowed">
            <summary>
            Determines if Highlight color is allowed to change. Highlight can only be changed by WPF data-bind
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.PanelClassThemeDefinition.HighlightBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.PanelClassThemeDefinition.SelectAllowed">
            <summary>
            Determines if Select (mouse button down color) color is allowed to change. Select can only be changed by WPF data-bind
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.PanelClassThemeDefinition.SelectBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.ClassThemeDefinitions.ProgressbarClassThemeDefinition">
            <summary>
            The UI class theme definition for Progressbar class
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ProgressbarClassThemeDefinition.ClassType">
            <summary>
            The Type object that corresponds to this UI class
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ProgressbarClassThemeDefinition.BackgroundAllowed">
            <summary>
            Determines if background color is allowed to change
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ProgressbarClassThemeDefinition.BackgroundBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ProgressbarClassThemeDefinition.BackgroundAppliedLocal">
            <summary>
            Determines if the color is applied locally as to not interfere with dependency source ordering
            </summary>
            <remarks>See https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/dependency-property-value-precedence#setcurrentvalue </remarks>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ProgressbarClassThemeDefinition.BackgroundDependencyProperty">
            <summary>
            The reference to the Background DependencyProperty (if exists) of this class type for setting the value locally
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ProgressbarClassThemeDefinition.ForegroundAllowed">
            <summary>
            Determines if Foreground color is allowed to change
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ProgressbarClassThemeDefinition.ForegroundBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ProgressbarClassThemeDefinition.ForegroundAppliedLocal">
            <summary>
            Determines if the color is applied locally as to not interfere with dependency source ordering
            </summary>
            <remarks>See https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/dependency-property-value-precedence#setcurrentvalue </remarks>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ProgressbarClassThemeDefinition.ForegroundDependencyProperty">
            <summary>
            The reference to the Foreground DependencyProperty (if exists) of this class type for setting the value locally
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ProgressbarClassThemeDefinition.HighlightAllowed">
            <summary>
            Determines if Highlight color is allowed to change. Highlight can only be changed by WPF data-bind
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ProgressbarClassThemeDefinition.HighlightBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ProgressbarClassThemeDefinition.SelectAllowed">
            <summary>
            Determines if Select (mouse button down color) color is allowed to change. Select can only be changed by WPF data-bind
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.ProgressbarClassThemeDefinition.SelectBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.ClassThemeDefinitions.RadioButtonClassThemeDefinition">
            <summary>
            The UI class theme definition for RadioButton class
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.RadioButtonClassThemeDefinition.ClassType">
            <summary>
            The Type object that corresponds to this UI class
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.RadioButtonClassThemeDefinition.BackgroundAllowed">
            <summary>
            Determines if background color is allowed to change
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.RadioButtonClassThemeDefinition.BackgroundBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.RadioButtonClassThemeDefinition.BackgroundAppliedLocal">
            <summary>
            Determines if the color is applied locally as to not interfere with dependency source ordering
            </summary>
            <remarks>See https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/dependency-property-value-precedence#setcurrentvalue </remarks>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.RadioButtonClassThemeDefinition.BackgroundDependencyProperty">
            <summary>
            The reference to the Background DependencyProperty (if exists) of this class type for setting the value locally
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.RadioButtonClassThemeDefinition.ForegroundAllowed">
            <summary>
            Determines if Foreground color is allowed to change
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.RadioButtonClassThemeDefinition.ForegroundBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.RadioButtonClassThemeDefinition.ForegroundAppliedLocal">
            <summary>
            Determines if the color is applied locally as to not interfere with dependency source ordering
            </summary>
            <remarks>See https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/dependency-property-value-precedence#setcurrentvalue </remarks>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.RadioButtonClassThemeDefinition.ForegroundDependencyProperty">
            <summary>
            The reference to the Foreground DependencyProperty (if exists) of this class type for setting the value locally
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.RadioButtonClassThemeDefinition.HighlightAllowed">
            <summary>
            Determines if Highlight color is allowed to change. Highlight can only be changed by WPF data-bind
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.RadioButtonClassThemeDefinition.HighlightBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.RadioButtonClassThemeDefinition.SelectAllowed">
            <summary>
            Determines if Select (mouse button down color) color is allowed to change. Select can only be changed by WPF data-bind
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.RadioButtonClassThemeDefinition.SelectBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.ClassThemeDefinitions.TabItemClassThemeDefinition">
            <summary>
            The UI class theme definition for TabItem class
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.TabItemClassThemeDefinition.ClassType">
            <summary>
            The Type object that corresponds to this UI class
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.TabItemClassThemeDefinition.BackgroundAllowed">
            <summary>
            Determines if background color is allowed to change
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.TabItemClassThemeDefinition.BackgroundBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.TabItemClassThemeDefinition.BackgroundAppliedLocal">
            <summary>
            Determines if the color is applied locally as to not interfere with dependency source ordering
            </summary>
            <remarks>See https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/dependency-property-value-precedence#setcurrentvalue </remarks>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.TabItemClassThemeDefinition.BackgroundDependencyProperty">
            <summary>
            The reference to the Background DependencyProperty (if exists) of this class type for setting the value locally
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.TabItemClassThemeDefinition.ForegroundAllowed">
            <summary>
            Determines if Foreground color is allowed to change
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.TabItemClassThemeDefinition.ForegroundBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.TabItemClassThemeDefinition.ForegroundAppliedLocal">
            <summary>
            Determines if the color is applied locally as to not interfere with dependency source ordering
            </summary>
            <remarks>See https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/dependency-property-value-precedence#setcurrentvalue </remarks>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.TabItemClassThemeDefinition.ForegroundDependencyProperty">
            <summary>
            The reference to the Foreground DependencyProperty (if exists) of this class type for setting the value locally
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.TabItemClassThemeDefinition.HighlightAllowed">
            <summary>
            Determines if Highlight color is allowed to change. Highlight can only be changed by WPF data-bind
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.TabItemClassThemeDefinition.HighlightBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.TabItemClassThemeDefinition.SelectAllowed">
            <summary>
            Determines if Select (mouse button down color) color is allowed to change. Select can only be changed by WPF data-bind
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.TabItemClassThemeDefinition.SelectBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.ClassThemeDefinitions.TextBlockClassThemeDefinition">
            <summary>
            The UI class theme definition for Textblock class
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.TextBlockClassThemeDefinition.ClassType">
            <summary>
            The Type object that corresponds to this UI class
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.TextBlockClassThemeDefinition.BackgroundAllowed">
            <summary>
            Determines if background color is allowed to change
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.TextBlockClassThemeDefinition.BackgroundBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.TextBlockClassThemeDefinition.BackgroundAppliedLocal">
            <summary>
            Determines if the color is applied locally as to not interfere with dependency source ordering
            </summary>
            <remarks>See https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/dependency-property-value-precedence#setcurrentvalue </remarks>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.TextBlockClassThemeDefinition.BackgroundDependencyProperty">
            <summary>
            The reference to the Background DependencyProperty (if exists) of this class type for setting the value locally
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.TextBlockClassThemeDefinition.ForegroundAllowed">
            <summary>
            Determines if Foreground color is allowed to change
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.TextBlockClassThemeDefinition.ForegroundBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.TextBlockClassThemeDefinition.ForegroundAppliedLocal">
            <summary>
            Determines if the color is applied locally as to not interfere with dependency source ordering
            </summary>
            <remarks>See https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/dependency-property-value-precedence#setcurrentvalue </remarks>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.TextBlockClassThemeDefinition.ForegroundDependencyProperty">
            <summary>
            The reference to the Foreground DependencyProperty (if exists) of this class type for setting the value locally
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.TextBlockClassThemeDefinition.HighlightAllowed">
            <summary>
            Determines if Highlight color is allowed to change. Highlight can only be changed by WPF data-bind
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.TextBlockClassThemeDefinition.HighlightBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.TextBlockClassThemeDefinition.SelectAllowed">
            <summary>
            Determines if Select (mouse button down color) color is allowed to change. Select can only be changed by WPF data-bind
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ClassThemeDefinitions.TextBlockClassThemeDefinition.SelectBoundName">
            <summary>
            The name of the component for WPF databinding. An empty string indicates the component is not bound.
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.ComponentColorset">
            <summary>
            A ComponentColorset is a custom color object to apply to a particular ID'd UI object in the window
            </summary>
            <remarks>Highlight and Selected colors are always changed (if at all) by WPF databound properties at the ClassColorset level</remarks>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ComponentColorset.ID">
            <summary>
            The ID of the UI object in the window of which the component colors will be applied to
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ComponentColorset.BackgroundBrush">
            <summary>
            The Background brush color
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ComponentColorset.ForegroundBrush">
            <summary>
            The Foreground brush color
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.CustomBrush">
            <summary>
            Wraps a Brush class with a boolean value for if the brush value should be applied
            </summary>
            <remarks>The implementation reasoning for this is that some color definitions can be a null color.
            So, a custom property must be used outside of the Brush object to determine if it should actually be applied.</remarks>
        </member>
        <member name="P:RelhaxModpack.UIComponents.CustomBrush.Brush">
            <summary>
            The custom color definition
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.CustomBrush.IsValid">
            <summary>
            The flag to determine if the Brush is valid
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.CustomPropertyBrush">
            <summary>
            A wrapper class for CustomBrush that adds the string name of the WPF databound property name
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.CustomPropertyBrush.BrushPropertyName">
            <summary>
            The name of the WPF databound property to change the color of
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.CustomBrushConverter">
            <summary>
            Converts from the custom CustomBrush type to a Brush object for WPF databinding
            </summary>
        </member>
        <member name="M:RelhaxModpack.UIComponents.CustomBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a CustomBrush object into a Brush object
            </summary>
            <param name="value">The CustomBrush object to convert</param>
            <param name="targetType">Not implemented</param>
            <param name="parameter">Not implemented</param>
            <param name="culture">Not implemented</param>
            <returns>The Brush property from the CustomBrush object</returns>
        </member>
        <member name="M:RelhaxModpack.UIComponents.CustomBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method is not implemented
            </summary>
            <param name="value">Not implemented</param>
            <param name="targetType">Not implemented</param>
            <param name="parameter">Not implemented</param>
            <param name="culture">Not implemented</param>
            <returns>Null</returns>
        </member>
        <member name="T:RelhaxModpack.UIComponents.RelhaxComboBoxItem">
            <summary>
            Interaction logic for RelhaxComboBoxItem.xaml
            </summary>
            <summary>
            RelhaxComboBoxItem
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.RelhaxComboBoxItem.Package">
            <summary>
            The SelectablePackage object that is being wrapped around
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.RelhaxComboBoxItem.DisplayName">
            <summary>
            The text to display in the Combobox
            </summary>
        </member>
        <member name="M:RelhaxModpack.UIComponents.RelhaxComboBoxItem.#ctor(RelhaxModpack.SelectablePackage,System.String)">
            <summary>
            Creates an instance of the RelhaxComboBoxItem class
            </summary>
            <param name="package">The package to wrap around</param>
            <param name="display">The text to display in the Combobox</param>
        </member>
        <member name="M:RelhaxModpack.UIComponents.RelhaxComboBoxItem.ToString">
            <summary>
            Allows for displaying of custom text in the Combobox
            </summary>
            <returns>The text to display in the Combobox (DisplayName property)</returns>
        </member>
        <member name="M:RelhaxModpack.UIComponents.RelhaxComboBoxItem.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.RelhaxHyperlink">
            <summary>
            Interaction logic for RelhaxHyperlink.xaml
            </summary>
            <summary>
            RelhaxHyperlink
            </summary>
        </member>
        <member name="M:RelhaxModpack.UIComponents.RelhaxHyperlink.#ctor">
            <summary>
            Create an instance of RelhaxHyperlink
            </summary>
        </member>
        <member name="M:RelhaxModpack.UIComponents.RelhaxHyperlink.#ctor(System.String,System.String)">
            <summary>
            Create an instance of RelhaxHyperlink
            </summary>
            <param name="URL">The URL to open when the hyperlink is clicked</param>
            <param name="text">The text of the hyperlink</param>
        </member>
        <member name="P:RelhaxModpack.UIComponents.RelhaxHyperlink.URL">
            <summary>
            Get or set the link URL
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.RelhaxHyperlink.Text">
            <summary>
            Get or set the link text
            </summary>
        </member>
        <member name="M:RelhaxModpack.UIComponents.RelhaxHyperlink.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.Theme">
            <summary>
            The root object for all definitions needed for the UI engine
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.Theme.ThemeName">
            <summary>
            The name of the theme
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.Theme.FileName">
            <summary>
            The xml theme filename
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.Theme.SelectionListSelectedPanelColor">
            <summary>
            The color definition for panel components in the selection view when at least one package is checked
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.Theme.SelectionListNotSelectedPanelColor">
            <summary>
            The color definition for panel components in the selection view when no packages are checked
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.Theme.SelectionListSelectedTextColor">
            <summary>
            The color definition for 'single' and 'multi' package types when it is checked
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.Theme.SelectionListNotSelectedTextColor">
            <summary>
            The color definition for 'single' and 'multi' package types when it is not checked
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.Theme.SelectionListBorderColor">
            <summary>
            The color definition for border components in the selection view, for holding a sub level of packages
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.Theme.SelectionListActiveTabHeaderBackgroundColor">
            <summary>
            The color definition for the background of the tab header
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.Theme.SelectionListActiveTabHeaderTextColor">
            <summary>
            The color definition for the text color of the tab header
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.Theme.SelectionListNotActiveHasSelectionsBackgroundColor">
            <summary>
            The color definition for background of a not active tab header, when no components are selected
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.Theme.SelectionListNotActiveHasSelectionsTextColor">
            <summary>
            The color definition for text of a not active tab header, when no components are selected
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.Theme.SelectionListNotActiveHasNoSelectionsBackgroundColor">
            <summary>
            The color definition for background of a not active tab header, when at least one component is selected
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.Theme.SelectionListNotActiveHasNoSelectionsTextColor">
            <summary>
            The color definition for text of a not active tab header, when at least one component is selected
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.Theme.RadioButtonColorset">
            <summary>
            The set of rules to use for what parts of a RadioButton UI object can be themed
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.Theme.CheckboxColorset">
            <summary>
            The set of rules to use for what parts of a Checkbox UI object can be themed
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.Theme.ButtonColorset">
            <summary>
            The set of rules to use for what parts of a Button UI object can be themed
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.Theme.TabItemColorset">
            <summary>
            The set of rules to use for what parts of a TabItem UI object can be themed
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.Theme.ComboboxColorset">
            <summary>
            The set of rules to use for what parts of a Combobox UI object can be themed
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.Theme.PanelColorset">
            <summary>
            The set of rules to use for what parts of a Panel UI object can be themed
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.Theme.TextblockColorset">
            <summary>
            The set of rules to use for what parts of a Textblock UI object can be themed
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.Theme.BorderColorset">
            <summary>
            The set of rules to use for what parts of a Border UI object can be themed
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.Theme.ControlColorset">
            <summary>
            The set of rules to use for what parts of a Control UI object can be themed
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.Theme.ProgressBarColorset">
            <summary>
            The set of rules to use for what parts of a ProgressBar UI object can be themed
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.Theme.WindowColorsets">
            <summary>
            A list of rules to use for each window definition type
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.Theme.BoundedClassColorsetBrushes">
            <summary>
            Returns a complete list of all bounded brushes for each class component color definition
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.Themes">
            <summary>
            A static list of themes used in the application
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.Themes.Default">
            <summary>
            The default theme used in the application
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.Themes.Dark">
            <summary>
            A pre-built dark theme
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.Themes.Custom">
            <summary>
            The custom theme to be loaded from xml by the user
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.WindowColorset">
            <summary>
            Contains all color definitions to apply for that window, including the list of individual component color definitions
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.WindowColorset.WindowType">
            <summary>
            The type object for the type of window this colorset belongs to
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.WindowColorset.BackgroundBrush">
            <summary>
            The background color of the window
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.WindowColorset.ComponentColorsets">
            <summary>
            A list of custom colors to apply for individual UI components
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.WindowColorset.ColorsetBackedUp">
            <summary>
            Flag for if this window colorset has had it's original (default) theme backed up
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.ZoomBorder">
            <summary>
            Represents a border that allows for panning and zooming of the UIElement object inside
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.ZoomBorder.CancelMouseDown">
            <summary>
            Cancel the mouse down event for panning
            </summary>
        </member>
        <member name="M:RelhaxModpack.UIComponents.ZoomBorder.GetTranslateTransform(System.Windows.UIElement)">
            <summary>
            Returns the TranslateTransform part of the UIElement's RenderTransform
            </summary>
            <param name="element">The element to get the transformation parameter from</param>
            <returns>The TranslateTransformpart of the UIElement's RenderTransform</returns>
        </member>
        <member name="M:RelhaxModpack.UIComponents.ZoomBorder.GetScaleTransform(System.Windows.UIElement)">
            <summary>
            Returns the ScaleTransform part of the UIElement's RenderTransform
            </summary>
            <param name="element">The element to get the transformation parameter from</param>
            <returns>The ScaleTransform of the UIElement's RenderTransform</returns>
        </member>
        <member name="P:RelhaxModpack.UIComponents.ZoomBorder.Child">
            <summary>
            Gets or Sets the child UIElement inside this border
            </summary>
        </member>
        <member name="M:RelhaxModpack.UIComponents.ZoomBorder.Reset">
            <summary>
            Reset the scale and translation (zoom and pan) values
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.EditorComboBoxItem">
            <summary>
            The EditorComboBoxItem class is a wrapper class for displaying DatabaseObjects as combo box items. The ToString() allows for display of the internal PackageName property
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.EditorComboBoxItem.Package">
            <summary>
            The DatabasePackage object that is being wrapped around
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.EditorComboBoxItem.DisplayName">
            <summary>
            A wrapper property around the Package's PackageName object
            </summary>
        </member>
        <member name="M:RelhaxModpack.UIComponents.EditorComboBoxItem.#ctor(RelhaxModpack.DatabasePackage)">
            <summary>
            Creates an instance of the EditorComboBoxItem class
            </summary>
            <param name="package">The package to wrap around</param>
        </member>
        <member name="M:RelhaxModpack.UIComponents.EditorComboBoxItem.ToString">
            <summary>
            Allows for displaying of custom text in the Combobox
            </summary>
            <returns>The text to display in the Combobox (DisplayName property -> PackageName)</returns>
        </member>
        <member name="T:RelhaxModpack.UIComponents.EditorSearchBoxItem">
            <summary>
            The EditorSearchBoxItem class is a wrapper class for displaying DatabaseObjects as combo box items. The ToString() allows for display of any string property
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.EditorSearchBoxItem.Package">
            <summary>
            The DatabasePackage object that is being wrapped around
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.EditorSearchBoxItem.DisplayName">
            <summary>
            The text to display in the Combobox
            </summary>
        </member>
        <member name="M:RelhaxModpack.UIComponents.EditorSearchBoxItem.#ctor(RelhaxModpack.DatabasePackage,System.String)">
            <summary>
            Creates an instance of the EditorSearchBoxItem class
            </summary>
            <param name="package">The package to wrap around</param>
            <param name="display">The text to display in the Combobox</param>
        </member>
        <member name="M:RelhaxModpack.UIComponents.EditorSearchBoxItem.ToString">
            <summary>
            Allows for displaying of custom text in the Combobox
            </summary>
            <returns>The text to display in the Combobox</returns>
        </member>
        <member name="T:RelhaxModpack.UIComponents.LinkButton">
            <summary>
            Wrapper class for the Button class of the System.Windows.Controls namespace. Adds the Link property.
            </summary>
            <remarks>Allows for starting a process from the Link value to a website</remarks>
        </member>
        <member name="P:RelhaxModpack.UIComponents.LinkButton.Link">
            <summary>
            The URL for which to start the process based on
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.TaskReportState">
            <summary>
            States of the Task reporter in display to the UI
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.TaskReportState.Inactive">
            <summary>
            Not used for this installation
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.TaskReportState.Active">
            <summary>
            In use for this installation
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.TaskReportState.Complete">
            <summary>
            In use for this installation and the task completed
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.TaskReportState.Error">
            <summary>
            An error has occurred on that task
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.RelhaxInstallTaskReporter">
            <summary>
            Interaction logic for RelhaxInstallTaskReporter.xaml
            </summary>
            <summary>
            RelhaxInstallTaskReporter
            </summary>
        </member>
        <member name="M:RelhaxModpack.UIComponents.RelhaxInstallTaskReporter.#ctor(System.String)">
            <summary>
            Create an instance of the RelhaxInstallTaskReporter and init the UI side of it
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.RelhaxInstallTaskReporter.LoadedAfterApply">
            <summary>
            Flag for when the object has been fully constructed by the UI Dispatcher.
            </summary>
            <remarks>Due to the multi-threaded nature of the progress reporting, progress may be reported before the reporting UI objects are fully constructed.
            This results in null exceptions. By using a flag to determine if the object is fully created, the reporting progresses won't try to update properties of null objects</remarks>
        </member>
        <member name="P:RelhaxModpack.UIComponents.RelhaxInstallTaskReporter.ReportState">
            <summary>
            Controls the UI state of the thread reporter
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.RelhaxInstallTaskReporter.IsSubProgressActive">
            <summary>
            Toggle if the second progress bar should be visible
            </summary>
            <remarks>Some tasks (like zip file extraction) have "sub-tasks" that take enough time where tracking their progress is warranted.
            For example, a zip file has many files to extract. That's the main task. However, each file has bytes to extract. If the file to extract
            is large, a subtask to track the extraction progress could be useful</remarks>
        </member>
        <member name="P:RelhaxModpack.UIComponents.RelhaxInstallTaskReporter.TaskTitle">
            <summary>
            The name of this task to display
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.RelhaxInstallTaskReporter.TaskText">
            <summary>
            The main reporting description of this task. Supports string formatting
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.RelhaxInstallTaskReporter.TaskMinimum">
            <summary>
            The minimum value for the main task progress bar
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.RelhaxInstallTaskReporter.TaskMaximum">
            <summary>
            The maximum value for the main task progress bar
            </summary>
            <remarks>This value can be changed for, example, the number of patches to run</remarks>
        </member>
        <member name="P:RelhaxModpack.UIComponents.RelhaxInstallTaskReporter.TaskValue">
            <summary>
            The current progress of this task. Value must be between Maximum and Minimum.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.RelhaxInstallTaskReporter.SubTaskMinimum">
            <summary>
            The minimum value for the subtask progress bar
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.RelhaxInstallTaskReporter.SubTaskMaximum">
            <summary>
            The maximum value for the subtask progress bar
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.RelhaxInstallTaskReporter.SubTaskValue">
            <summary>
            The current value of the subtask progress. Must be between the maximum and minimum
            </summary>
        </member>
        <member name="E:RelhaxModpack.UIComponents.RelhaxInstallTaskReporter.PropertyChanged">
            <summary>
            Event to trigger when an internal property is changed. It forces a UI update
            </summary>
        </member>
        <member name="M:RelhaxModpack.UIComponents.RelhaxInstallTaskReporter.OnPropertyChanged(System.String)">
            <summary>
            Method to invoke the PropertyChanged event to update the UI
            </summary>
            <param name="propertyName">The name of the property that changed, to update it's UI binding</param>
        </member>
        <member name="M:RelhaxModpack.UIComponents.RelhaxInstallTaskReporter.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.RelhaxWPFCheckBox">
            <summary>
            Interaction logic for RelhaxWPFCheckBox.xaml
            </summary>
            <summary>
            RelhaxWPFCheckBox
            </summary>
        </member>
        <member name="M:RelhaxModpack.UIComponents.RelhaxWPFCheckBox.#ctor">
            <summary>
            Create an instance of the RelhaxWPFCheckBox class
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.RelhaxWPFCheckBox.Package">
            <summary>
            The package associated with this UI component
            </summary>
        </member>
        <member name="M:RelhaxModpack.UIComponents.RelhaxWPFCheckBox.OnEnabledChanged(System.Boolean)">
            <summary>
            Change any UI parent class properties that depends on the enabled SelectablePackage
            </summary>
            <param name="Enabled">The value from the SelectablePackage</param>
        </member>
        <member name="M:RelhaxModpack.UIComponents.RelhaxWPFCheckBox.OnCheckedChanged(System.Boolean)">
            <summary>
            Change any UI parent class properties that depends on the checked SelectablePackage
            </summary>
            <param name="Checked">The value from the SelectablePackage</param>
        </member>
        <member name="P:RelhaxModpack.UIComponents.RelhaxWPFCheckBox.TextColor">
            <summary>
            Set the color of the Checkbox Foreground property
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.RelhaxWPFCheckBox.PanelColor">
            <summary>
            Set the brush of the Checkbox Panel Background property 
            </summary>
        </member>
        <member name="M:RelhaxModpack.UIComponents.RelhaxWPFCheckBox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.RelhaxWPFComboBox">
            <summary>
            Interaction logic for RelhaxWPFComboBox.xaml
            </summary>
            <summary>
            RelhaxWPFComboBox
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.RelhaxWPFComboBox.AddedToList">
            <summary>
            Flag to determine if the Combobox object has been already added to the ModSelectionList window
            </summary>
            <remarks>Many components of 'single_dropDown' exist in the Combobox, and therefore the UI generation code gets run for each object.
            So, a flag is used to prevent the ComboBox being added multiple times to the window</remarks>
        </member>
        <member name="M:RelhaxModpack.UIComponents.RelhaxWPFComboBox.#ctor">
            <summary>
            Create an instance of the RelhaxWPFComboBox class
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxWPFComboBox.Handler">
            <summary>
            The event to subscribe to when the selection is changed
            </summary>
        </member>
        <member name="M:RelhaxModpack.UIComponents.RelhaxWPFComboBox.OnDropDownSelectionChanged(RelhaxModpack.SelectablePackage,System.Boolean)">
            <summary>
            Called from the database object to update the UI on a combobox selection change
            </summary>
            <param name="spc">The SelectablePakage that caused the update</param>
            <param name="value">The checked value</param>
        </member>
        <member name="M:RelhaxModpack.UIComponents.RelhaxWPFComboBox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.RelhaxWPFRadioButton">
            <summary>
            Interaction logic for RelhaxWPFRadioButton.xaml
            </summary>
            <summary>
            RelhaxWPFRadioButton
            </summary>
        </member>
        <member name="M:RelhaxModpack.UIComponents.RelhaxWPFRadioButton.#ctor">
            <summary>
            Create an instance of the RelhaxWPFRadioButton class
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.RelhaxWPFRadioButton.Package">
            <summary>
            The package associated with this UI component
            </summary>
        </member>
        <member name="M:RelhaxModpack.UIComponents.RelhaxWPFRadioButton.OnEnabledChanged(System.Boolean)">
            <summary>
            Change any UI parent class properties that depends on the enabled SelectablePackage
            </summary>
            <param name="Enabled">The value from the SelectablePackage</param>
        </member>
        <member name="M:RelhaxModpack.UIComponents.RelhaxWPFRadioButton.OnCheckedChanged(System.Boolean)">
            <summary>
            Change any UI parent class properties that depends on the checked SelectablePackage
            </summary>
            <param name="Checked">The value from the SelectablePackage</param>
        </member>
        <member name="P:RelhaxModpack.UIComponents.RelhaxWPFRadioButton.TextColor">
            <summary>
            Set the color of the RadioButton Foreground property
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.RelhaxWPFRadioButton.PanelColor">
            <summary>
            Set the brush of the RadioButton Panel Background property 
            </summary>
        </member>
        <member name="M:RelhaxModpack.UIComponents.RelhaxWPFRadioButton.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.IPackageUIComponent">
            <summary>
            The PackageUIComponent class acts as a handler for when the enabled and checked properties are set from the Package.
            It can simplify the ModSelectionList code, clean it up, allow for uniform logic for all UI,
            and allow for easy implementation of another UI.
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.IPackageUIComponent.Package">
            <summary>
            The package that the UI component belongs to
            </summary>
        </member>
        <member name="M:RelhaxModpack.UIComponents.IPackageUIComponent.OnEnabledChanged(System.Boolean)">
            <summary>
            Method signature for when the enabled property changes
            </summary>
            <param name="Enabled">The value of the enabled property</param>
        </member>
        <member name="M:RelhaxModpack.UIComponents.IPackageUIComponent.OnCheckedChanged(System.Boolean)">
            <summary>
            Method signature for when the checked property changes
            </summary>
            <param name="Checked">The value of the checked property</param>
        </member>
        <member name="P:RelhaxModpack.UIComponents.IPackageUIComponent.TextColor">
            <summary>
            The color of the text of the UI display
            </summary>
        </member>
        <member name="P:RelhaxModpack.UIComponents.IPackageUIComponent.PanelColor">
            <summary>
            The color of the back panel of the UI display
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.RelhaxMediaPlayer">
            <summary>
            Interaction logic for RelhaxMediaPlayer.xaml
            </summary>
            <summary>
            RelhaxMediaPlayer
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxMediaPlayer.MediaURL">
            <summary>
            The direct link to the audio file to preview
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxMediaPlayer.AudioData">
            <summary>
            The raw audio data to parse
            </summary>
        </member>
        <member name="M:RelhaxModpack.UIComponents.RelhaxMediaPlayer.#ctor(System.String,System.Byte[])">
            <summary>
            Creates an instance of the RelhaxMediaPlayer user control
            </summary>
            <param name="_audioData">The audio data to use in the preview</param>
            <param name="_mediaURL">The URL to the audio source. Used for audio type parsing.</param>
        </member>
        <member name="M:RelhaxModpack.UIComponents.RelhaxMediaPlayer.StopPlaybackIfPlaying">
            <summary>
            Stops playback from an outside source, like if changing previews
            </summary>
        </member>
        <member name="M:RelhaxModpack.UIComponents.RelhaxMediaPlayer.Dispose(System.Boolean)">
            <summary>
            Dispose of the RelhaxMediaPlayer references
            </summary>
            <param name="disposing">True to dispose of managed objects</param>
        </member>
        <member name="M:RelhaxModpack.UIComponents.RelhaxMediaPlayer.Dispose">
            <summary>
            Dispose of the RelhaxMediaPlayer references
            </summary>
        </member>
        <member name="M:RelhaxModpack.UIComponents.RelhaxMediaPlayer.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.RelhaxProgress">
            <summary>
            The base class for reporting async progress to any UI receiver task.
            There are up to 3 levels of tasks that can be reported: child, parent, and total. At least total will be implemented an any given usage case.
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxProgress.ChildCurrent">
            <summary>
            The current completed and total child level tasks. (Tasks are arbitrary and defined by the task itself)
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxProgress.ChildTotal">
            <summary>
            The current completed and total child level tasks. (Tasks are arbitrary and defined by the task itself)
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxProgress.ChildCurrentProgress">
            <summary>
            A custom formatted string to use if the async task supports/implements it
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxProgress.ParrentCurrent">
            <summary>
            The current completed and total parent level tasks. (Tasks are arbitrary and defined by the task itself)
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxProgress.ParrentTotal">
            <summary>
            The current completed and total parent level tasks. (Tasks are arbitrary and defined by the task itself)
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxProgress.ParrentCurrentProgress">
            <summary>
            A custom formatted string to use if the async task supports/implements it
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxProgress.TotalCurrent">
            <summary>
            The current completed and total level tasks. (Tasks are arbitrary and defined by the task itself)
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxProgress.TotalTotal">
            <summary>
            The current completed and total level tasks. (Tasks are arbitrary and defined by the task itself)
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxProgress.TotalCurrentProgress">
            <summary>
            A custom formatted string to use if the async task supports/implements it
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxProgress.ReportMessage">
            <summary>
            A custom formatted string to use if the async task supports/implements it
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.RelhaxInstallerProgress">
            <summary>
            The RelhaxInstallerProgress class adds additional properties for zip file extraction
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxInstallerProgress.BytesProcessed">
            <summary>
            During zip file extraction, the number of processed bytes extracted, and the total bytes to extract.
            During copy operations, the number of processed copied bytes, and the total bytes to copy.
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxInstallerProgress.BytesTotal">
            <summary>
            During zip file extraction, the number of processed bytes extracted, and the total bytes to extract.
            During copy operations, the number of processed copied bytes, and the total bytes to copy.
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxInstallerProgress.WaitingOnDownload">
            <summary>
            Flag to mark if the install engine is waiting on a package to download
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxInstallerProgress.WaitingOnDownloadOfAThread">
            <summary>
            Flag to mark if the install engine is waiting on a package to download in a thread
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxInstallerProgress.BytesProcessedOfAThread">
            <summary>
            The number of bytes currently processed in an entry in a thread
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxInstallerProgress.BytesTotalOfAThread">
            <summary>
            The number of bytes to total process in an entry in a thread
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxInstallerProgress.Filename">
            <summary>
            The name of the file currently being processed
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxInstallerProgress.FilenameOfAThread">
            <summary>
            The name of the file currently being processed in a thread
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxInstallerProgress.EntryFilename">
            <summary>
            During zip file extraction, the entry inside the zip file being processed
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxInstallerProgress.EntriesProcessed">
            <summary>
            The number of entries currently processed in this zip file
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxInstallerProgress.EntriesTotal">
            <summary>
            The total number of entries in this zip file
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxInstallerProgress.EntriesProcessedOfAThread">
            <summary>
            The number of processed entries of a zip file of a thread
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxInstallerProgress.EntriesTotalOfAThread">
            <summary>
            The number of total entries of a zip file of a thread
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxInstallerProgress.EntryFilenameOfAThread">
            <summary>
            The entry name of a zip file of a thread
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxInstallerProgress.ThreadID">
            <summary>
            The ID number of the thread that this zip file belongs to
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxInstallerProgress.TotalThreads">
            <summary>
            The total number of extraction threads
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxInstallerProgress.CompletedThreads">
            <summary>
            The number of completed extraction threads
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxInstallerProgress.InstallGroup">
            <summary>
            The extraction installation group
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxInstallerProgress.TotalInstallGroups">
            <summary>
            The total number of install groups
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxInstallerProgress.CompletedPackagesOfAThread">
            <summary>
            The number of completed extracted packages that thread [index] has
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxInstallerProgress.TotalPackagesofAThread">
            <summary>
            The number of packages that thread [index] has
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxInstallerProgress.InstallStatus">
            <summary>
            The current status of the installer. Represents the current state of the installer. When it exists, it is also used as an exit code.
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIComponents.RelhaxInstallerProgress.UninstallStatus">
            <summary>
            The current status of the uninstaller. Also used as exit code.
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIComponents.StretchingTreeView">
            <summary>
            A tree view that allows for stretch horizontal alignment of the header item
            </summary>
        </member>
        <member name="M:RelhaxModpack.UIComponents.StretchingTreeView.GetContainerForItemOverride">
            <summary>
            Overrides the parent GetContainerForItemOverride() method
            </summary>
            <returns>A new StretchingTreeViewItem object</returns>
        </member>
        <member name="M:RelhaxModpack.UIComponents.StretchingTreeView.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Overrides the parent IsItemItsOwnContainerOverride() method
            </summary>
            <param name="item">The item to test</param>
            <returns>True if the item is of StretchingTreeViewItem class, false otherwise</returns>
        </member>
        <member name="T:RelhaxModpack.UIComponents.StretchingTreeViewItem">
            <summary>
            Allows for the header control to stretch all the way across a filling container
            </summary>
            <remarks>see https://stackoverflow.com/questions/35556975/horizontalalignment-stretch-not-working-in-treeviewitem </remarks>
        </member>
        <member name="M:RelhaxModpack.UIComponents.StretchingTreeViewItem.#ctor">
            <summary>
            Create an instance of the StretchingTreeViewItem UI component
            </summary>
        </member>
        <member name="M:RelhaxModpack.UIComponents.StretchingTreeViewItem.GetContainerForItemOverride">
            <summary>
            Overrides the parent GetContainerForItemOverride() method
            </summary>
            <returns>A new StretchingTreeViewItem object</returns>
        </member>
        <member name="M:RelhaxModpack.UIComponents.StretchingTreeViewItem.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Overrides the parent IsItemItsOwnContainerOverride() method
            </summary>
            <param name="item">The item to test</param>
            <returns>True if the item is of StretchingTreeViewItem class, false otherwise</returns>
        </member>
        <member name="T:RelhaxModpack.Atlas">
            <summary>
            A class that serves as a description of an atlas file with processing instructions
            </summary>
        </member>
        <member name="P:RelhaxModpack.Atlas.Pkg">
            <summary>
            Path and name to the package file
            </summary>
        </member>
        <member name="P:RelhaxModpack.Atlas.AtlasFile">
            <summary>
            FileName of the atlas image file to extract
            </summary>
        </member>
        <member name="P:RelhaxModpack.Atlas.MapFile">
            <summary>
            FileName of the atlas map file to extract
            </summary>
        </member>
        <member name="P:RelhaxModpack.Atlas.DirectoryInArchive">
            <summary>
            Path inside the pkg file to the filename to process
            </summary>
        </member>
        <member name="P:RelhaxModpack.Atlas.AtlasSaveDirectory">
            <summary>
            Path to place the generated atlas file
            </summary>
        </member>
        <member name="P:RelhaxModpack.Atlas.AtlasWidth">
            <summary>
            Width of the new atlases file. 0 = get from original atlas file
            </summary>
        </member>
        <member name="P:RelhaxModpack.Atlas.AtlasHeight">
            <summary>
            Height of the new atlases file. 0 = get from original atlas file
            </summary>
        </member>
        <member name="P:RelhaxModpack.Atlas.Padding">
            <summary>
            Padding of the new atlases file (amount of pixels as a border between each image)
            </summary>
        </member>
        <member name="P:RelhaxModpack.Atlas.PowOf2">
            <summary>
            Creating an atlas file only with log base 2 numbers (16, 32, 64, etc.)
            </summary>
        </member>
        <member name="P:RelhaxModpack.Atlas.Square">
            <summary>
            Creating an atlas file only in a square (same width and height of atlas)
            </summary>
        </member>
        <member name="P:RelhaxModpack.Atlas.FastImagePacker">
            <summary>
            allow to accept first successful image optimization layout
            </summary>
        </member>
        <member name="P:RelhaxModpack.Atlas.ImageFolderList">
            <summary>
            List of folders that could contain images to replace original images
            </summary>
        </member>
        <member name="P:RelhaxModpack.Atlas.TextureList">
            <summary>
            The list of textures in each atlas
            </summary>
        </member>
        <member name="M:RelhaxModpack.Atlas.ToString">
            <summary>
            Returns a string representation of the object
            </summary>
            <returns>The atlas file name</returns>
        </member>
        <member name="T:RelhaxModpack.InstallerComponents.InstallerExitCodes">
            <summary>
            Possible points at which the installer can fail
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallerExitCodes.Success">
            <summary>
            No fail
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallerExitCodes.DownloadModsError">
            <summary>
            Error with downloading mods
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallerExitCodes.BackupModsError">
            <summary>
            Error with backup of mods to the RelhaxBackup folder
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallerExitCodes.BackupDataError">
            <summary>
            Error with backing up of user cache data to temporary folder
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallerExitCodes.ClearCacheError">
            <summary>
            Error with clearing WoT app data cache
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallerExitCodes.ClearLogsError">
            <summary>
            Error with clearing game and mod logs
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallerExitCodes.CleanModsError">
            <summary>
            Error with cleaning mods and res_mods folders
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallerExitCodes.ExtractionError">
            <summary>
            Error with mods extraction/installation
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallerExitCodes.UserExtractionError">
            <summary>
            Error with user mods extraction
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallerExitCodes.RestoreUserdataError">
            <summary>
            Error with restoring user cache data from temporary folder
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallerExitCodes.XmlUnpackError">
            <summary>
            Error with copying/extracting and unpacking binary xml files
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallerExitCodes.PatchError">
            <summary>
            Error with patching configuration files
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallerExitCodes.ShortcutsError">
            <summary>
            Error with creating shortcuts
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallerExitCodes.ContourIconAtlasError">
            <summary>
            Error with creating the contour icon atlas files
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallerExitCodes.FontInstallError">
            <summary>
            Error with installing fonts (starting the fontReg process)
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallerExitCodes.TrimDownloadCacheError">
            <summary>
            Error with deleting old download files from the RelhaxDownloads folder
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallerExitCodes.CleanupError">
            <summary>
            Error with cleanup of temporary and leftover files
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallerExitCodes.UnknownError">
            <summary>
            An unknown error has occurred
            </summary>
        </member>
        <member name="T:RelhaxModpack.InstallerComponents.UninstallerExitCodes">
            <summary>
            Possible points at which the uninstaller can fail
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.UninstallerExitCodes.GettingFilelistError">
            <summary>
            Error with getting the file lists (from folder scan and/or from log file)
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.UninstallerExitCodes.UninstallError">
            <summary>
            Error with deleting of files
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.UninstallerExitCodes.ProcessingEmptyFolders">
            <summary>
            Error with deleting of empty folders
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.UninstallerExitCodes.PerformFinalClearup">
            <summary>
            Error with cleanup of temporary and leftover files
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.UninstallerExitCodes.Success">
            <summary>
            No error occurred
            </summary>
        </member>
        <member name="T:RelhaxModpack.InstallerComponents.RelhaxInstallFinishedEventArgs">
            <summary>
            Event arguments for when the installer finishes or is ended prematurely
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.RelhaxInstallFinishedEventArgs.ExitCode">
            <summary>
            The exit code from the installer thread
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.RelhaxInstallFinishedEventArgs.ErrorMessage">
            <summary>
            The error message description
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.RelhaxInstallFinishedEventArgs.ParsedCategoryList">
            <summary>
            Reference to list of parsed categories
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.RelhaxInstallFinishedEventArgs.Dependencies">
            <summary>
            Reference to list of parsed dependencies
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.RelhaxInstallFinishedEventArgs.GlobalDependencies">
            <summary>
            Reference to list of dependencies
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.RelhaxInstallFinishedEventArgs.InstallFailedSteps">
            <summary>
            A list of all the steps that the installer failed at when returning back to the MainWindow
            </summary>
            <remarks>The installer creates many threads to complete different parts of the installation.
            One of more of these may fail and should be logged when the installer cleanly exists and returns to the MainWindow</remarks>
        </member>
        <member name="T:RelhaxModpack.InstallerComponents.RelhaxZipFile">
            <summary>
            A wrapper class around the Ionic.Zip.Zipfile with the purpose of saving the thread ID that the zip file belongs to
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.RelhaxZipFile.ThreadID">
            <summary>
            The ID number of the thread that the zip file belongs to
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.RelhaxZipFile.IsUserMod">
            <summary>
            Flag for if this zip file is a user mod
            </summary>
            <remarks>User mods are treated slightly differently then regular mods. They have no valid threadID, and should not be deleted if the extraction fails.</remarks>
        </member>
        <member name="M:RelhaxModpack.InstallerComponents.RelhaxZipFile.#ctor(System.String)">
            <summary>
            Constructor for making a RelhaxZipFile
            </summary>
            <param name="fileName">The name of the file to send to the base constructor. File must already exist.</param>
        </member>
        <member name="T:RelhaxModpack.InstallerComponents.InstallEngine">
            <summary>
            The install engine is the root component to the entire installation process. It manages install tasks, threading, and resource usage from start to finish.
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallEngine.OrderedPackagesToInstall">
            <summary>
            List of packages that have zip files to install and are enabled (and checked if selectable) and ordered into installGroups
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallEngine.PackagesToInstall">
            <summary>
            List of packages that have zip files to install and are enabled (and checked if selectable)
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallEngine.FlatListSelectablePackages">
            <summary>
            Flat list of all selectable packages
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallEngine.UserPackagesToInstall">
            <summary>
            List of user packages placed in the RelhaxUserMods folder and selected for installation
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallEngine.ParsedCategoryList">
            <summary>
            A reference for the list of parsed categories
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallEngine.Dependencies">
            <summary>
            A reference for the list of parsed dependencies
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallEngine.GlobalDependencies">
            <summary>
            A reference for the list of parsed globally installed dependencies
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallEngine.TriggerContouricons">
            <summary>
            The event name for starting the contour icon atlas building
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallEngine.TriggerInstallFonts">
            <summary>
            The event name for starting the installation of fonts
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallEngine.TriggerCreateShortcuts">
            <summary>
            The event name for starting the creation of shortcuts
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallEngine.CompleteTriggerList">
            <summary>
            A list of all current trigger event names
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallEngine.Triggers">
            <summary>
            A list of all current trigger event objects. For more information, see the trigger class
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallEngine.CancellationToken">
            <summary>
            The token used for handling and checking for cancellation requests
            </summary>
        </member>
        <member name="F:RelhaxModpack.InstallerComponents.InstallEngine.DisableTriggersForInstall">
            <summary>
            Flag for if the install engine should honor the user setting or if installing user packages, disable triggers anyways
            </summary>
        </member>
        <member name="M:RelhaxModpack.InstallerComponents.InstallEngine.#ctor">
            <summary>
            Creates an instance of the installation engine. Properties should be assigned at this step
            </summary>
        </member>
        <member name="M:RelhaxModpack.InstallerComponents.InstallEngine.RunInstallationAsync(System.IProgress{RelhaxModpack.UIComponents.RelhaxInstallerProgress})">
            <summary>
            Run an asynchronous installation
            </summary>
            <param name="progress">The progress reporter object</param>
            <returns>A RelhaxInstallFinishedEventArgs object contain installation data for if the installation succeed or ended prematurely</returns>
        </member>
        <member name="M:RelhaxModpack.InstallerComponents.InstallEngine.RunUninstallationAsync(System.IProgress{RelhaxModpack.UIComponents.RelhaxInstallerProgress})">
            <summary>
            Run an asynchronous uninstallation
            </summary>
            <param name="progress">The progress reporter object</param>
            <returns>A RelhaxInstallFinishedEventArgs object contain uninstallation data for if the uninstallation succeed or ended prematurely</returns>
        </member>
        <member name="M:RelhaxModpack.InstallerComponents.InstallEngine.UninstallMods(RelhaxModpack.UninstallModes,System.Boolean)">
            <summary>
            Deletes mod files from the current game client
            </summary>
            <param name="UninstallMode">Selects which uninstall method</param>
            <param name="logToUninstaller">if to </param>
            <returns>true if the uninstall processes completed, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.InstallerComponents.InstallEngine.Dispose(System.Boolean)">
            <summary>
            Dispose of the Installation engine
            </summary>
            <param name="disposing">Flag to indicate if the engine should additionally dispose of managed resources</param>
        </member>
        <member name="M:RelhaxModpack.InstallerComponents.InstallEngine.Dispose">
            <summary>
            This code added to correctly implement the disposable pattern.
            </summary>
        </member>
        <member name="T:RelhaxModpack.Patch">
            <summary>
            A patch is an instruction object of how to modify a text file. Can be a json, xml, or plain text file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Patch.NativeProcessingFile">
            <summary>
            A single string with the filename of the processingNativeFile (needed for tracing work instructions after installation)
            </summary>
        </member>
        <member name="F:RelhaxModpack.Patch.ActualPatchName">
            <summary>
            the actual name of the original patch before processed
            </summary>
        </member>
        <member name="F:RelhaxModpack.Patch.Type">
            <summary>
            The type of patch, xml or regex (direct text replacement)
            </summary>
        </member>
        <member name="F:RelhaxModpack.Patch.Mode">
            <summary>
            If not regex, the mode that the xml patcher should use.<para/>Examples: add xml node, remove xml node, edit xml node
            </summary>
        </member>
        <member name="F:RelhaxModpack.Patch.PatchPath">
            <summary>
            The starting path to the file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Patch.File">
            <summary>
            The path to the file, relative to patchPath
            </summary>
        </member>
        <member name="F:RelhaxModpack.Patch.CompletePath">
            <summary>
            The complete path to the file, saved at parse time
            </summary>
        </member>
        <member name="F:RelhaxModpack.Patch.FollowPathEditorCompletePath">
            <summary>
            Saves the complete path for if in editor mode, otherwise not used
            </summary>
        </member>
        <member name="F:RelhaxModpack.Patch.Version">
            <summary>
            The version of the patch for parsing. Allows for multiple variations. Default to 1
            </summary>
        </member>
        <member name="F:RelhaxModpack.Patch.Path">
            <summary>
            If xml or json, the xml xpath or json jsonpath to the node
            </summary>
        </member>
        <member name="F:RelhaxModpack.Patch.Lines">
            <summary>
            If regex, the optional specific lines in the text file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Patch.Search">
            <summary>
            The node inner text (xml) or regex criteria to search for
            </summary>
        </member>
        <member name="F:RelhaxModpack.Patch.Replace">
            <summary>
            The text to replace the found search text with
            </summary>
        </member>
        <member name="F:RelhaxModpack.Patch.FollowPath">
            <summary>
            For json patches, if it should use the new method of separating the path for getting the xvm references
            </summary>
        </member>
        <member name="F:RelhaxModpack.Patch.FromEditor">
            <summary>
            If from editor/patch designer, enable verbose logging for the duration of that patch
            </summary>
        </member>
        <member name="P:RelhaxModpack.Patch.DumpPatchInfoForLog">
            <summary>
            Collects all patch information for logging
            </summary>
        </member>
        <member name="M:RelhaxModpack.Patch.ToString">
            <summary>
            The string representation of the object
            </summary>
            <returns>The type, mode and lines/path if in editor mode. Else, the base ToString()</returns>
        </member>
        <member name="T:RelhaxModpack.Shortcut">
            <summary>
            Represents instructions on how to create a shortcut
            </summary>
        </member>
        <member name="F:RelhaxModpack.Shortcut.Path">
            <summary>
            The target of the shortcut
            </summary>
        </member>
        <member name="F:RelhaxModpack.Shortcut.Name">
            <summary>
            The name for the shortcut
            </summary>
        </member>
        <member name="F:RelhaxModpack.Shortcut.Enabled">
            <summary>
            Flag for in the installer to actually create the shortcut
            </summary>
        </member>
        <member name="M:RelhaxModpack.Shortcut.ToString">
            <summary>
            String representation of the object
            </summary>
            <returns>The name and target of the shortcut</returns>
        </member>
        <member name="T:RelhaxModpack.Texture">
            <summary>
            A Texture is a piece of an atlas file. Contains image data such as the position, size, and bitmap itself.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Texture.Name">
            <summary>
            The file name of where this texture came from
            </summary>
        </member>
        <member name="P:RelhaxModpack.Texture.X">
            <summary>
            The x position of the texture in the atlas image
            </summary>
        </member>
        <member name="P:RelhaxModpack.Texture.Y">
            <summary>
            The y position of the texture in the atlas image
            </summary>
        </member>
        <member name="P:RelhaxModpack.Texture.Width">
            <summary>
            The width of the texture in the atlas image
            </summary>
        </member>
        <member name="P:RelhaxModpack.Texture.Height">
            <summary>
            The height of the texture in the atlas image
            </summary>
        </member>
        <member name="P:RelhaxModpack.Texture.AtlasImage">
            <summary>
            The actual bitmap in memory of the image
            </summary>
        </member>
        <member name="T:RelhaxModpack.XmlUnpack">
            <summary>
            Represents a set of xml instructions for extracting and copying xml files into another location. Includes xml binary decompression
            </summary>
        </member>
        <member name="P:RelhaxModpack.XmlUnpack.NativeProcessingFile">
            <summary>
            A single string with the filename of the processingNativeFile (needed for tracing work instructions after installation)
            </summary>
        </member>
        <member name="P:RelhaxModpack.XmlUnpack.ActualPatchName">
            <summary>
            The actual name of the original file before processed
            </summary>
        </member>
        <member name="P:RelhaxModpack.XmlUnpack.Pkg">
            <summary>
            Path and name to the package file
            </summary>
        </member>
        <member name="P:RelhaxModpack.XmlUnpack.FileName">
            <summary>
            Name of the file to extract
            </summary>
        </member>
        <member name="P:RelhaxModpack.XmlUnpack.DirectoryInArchive">
            <summary>
            Path inside the pkg file to the filename to process
            </summary>
        </member>
        <member name="P:RelhaxModpack.XmlUnpack.ExtractDirectory">
            <summary>
            Path to place the extracted or copied file
            </summary>
        </member>
        <member name="P:RelhaxModpack.XmlUnpack.NewFileName">
            <summary>
            Filename with replaced macros for destination writing
            </summary>
        </member>
        <member name="P:RelhaxModpack.XmlUnpack.DumpInfoToLog">
            <summary>
            Collect all properties of the extraction instructions to dump into the log file
            </summary>
        </member>
        <member name="M:RelhaxModpack.XmlUnpack.ToString">
            <summary>
            A string representation of the object
            </summary>
            <returns>The native name of the unpack instruction file and file target</returns>
        </member>
        <member name="T:RelhaxModpack.Logfile">
            <summary>
            Represents an instance of a log file used for writing important logging information to a log
            </summary>
        </member>
        <member name="P:RelhaxModpack.Logfile.Filepath">
            <summary>
            The path to the file the log is writing to
            </summary>
        </member>
        <member name="P:RelhaxModpack.Logfile.Filename">
            <summary>
            The name of the file that the log is writing to
            </summary>
        </member>
        <member name="P:RelhaxModpack.Logfile.Timestamp">
            <summary>
            The date and time format for writing each line in the log file
            </summary>
        </member>
        <member name="P:RelhaxModpack.Logfile.CanWrite">
            <summary>
            Returns true if the fileStream is not null and can be written to, false otherwise
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logfile.fileStream">
            <summary>
            The fileStream object to write/create the log file. Requires disposal support
            </summary>
        </member>
        <member name="M:RelhaxModpack.Logfile.#ctor(System.String,System.String)">
            <summary>
            Create an instance of the log file
            </summary>
            <param name="filePath">The path to the file to create/open</param>
            <param name="timestamp">the date and time format to write for each log line</param>
        </member>
        <member name="M:RelhaxModpack.Logfile.Init">
            <summary>
            Initializes the log file
            </summary>
            <returns>True if successful initialization, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Logfile.Write(System.String,RelhaxModpack.LogLevel)">
            <summary>
            Writes a line of text to the log file with the date and timestamp, and severity level of the message
            </summary>
            <param name="message">The line to write</param>
            <param name="logLevel">The level of severity of the log message</param>
            <returns>The formatted string that was written</returns>
        </member>
        <member name="M:RelhaxModpack.Logfile.Write(System.String)">
            <summary>
            Writes a line of text to the log file with the date and timestamp, and severity level of the message
            </summary>
            <param name="message">The message to write to the file</param>
        </member>
        <member name="M:RelhaxModpack.Logfile.Dispose(System.Boolean)">
            <summary>
            Dispose Managed and Unmanaged resources used for the log files
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:RelhaxModpack.Logfile.Dispose">
            <summary>
            Dispose Managed and Unmanaged resources used for the log files
            </summary>
        </member>
        <member name="T:RelhaxModpack.Logfiles">
            <summary>
            The different log files currently used in the modpack
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logfiles.Application">
            <summary>
            The default modpack log file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logfiles.Installer">
            <summary>
            The log file for when installing mods
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logfiles.Uninstaller">
            <summary>
            The log file for when uninstalling mods
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logfiles.Editor">
            <summary>
            The log file for the editor
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logfiles.PatchDesigner">
            <summary>
            The log file for the patcher
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logfiles.Updater">
            <summary>
            The log file for the database update tool
            </summary>
        </member>
        <member name="T:RelhaxModpack.LogLevel">
            <summary>
            The level of severity of the log message
            </summary>
        </member>
        <member name="F:RelhaxModpack.LogLevel.Debug">
            <summary>
            Debug message
            </summary>
        </member>
        <member name="F:RelhaxModpack.LogLevel.Info">
            <summary>
            Informational message
            </summary>
        </member>
        <member name="F:RelhaxModpack.LogLevel.Warning">
            <summary>
            A problem, but can be worked around
            </summary>
        </member>
        <member name="F:RelhaxModpack.LogLevel.Error">
            <summary>
            Something is wrong, something may not work
            </summary>
        </member>
        <member name="F:RelhaxModpack.LogLevel.Exception">
            <summary>
            Something is wrong, something will not work
            </summary>
        </member>
        <member name="F:RelhaxModpack.LogLevel.ApplicationHalt">
            <summary>
            The application is closing now
            </summary>
        </member>
        <member name="T:RelhaxModpack.LoggingUIThreadReport">
            <summary>
            Delegate for allowing method callback with the written formatted message as the return value
            </summary>
            <param name="message">The formatted message that was written to the logfile</param>
        </member>
        <member name="T:RelhaxModpack.Logging">
            <summary>
            A static constant reference to common logging variables and common log references
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logging.ApplicationLogFilename">
            <summary>
            The filename of the application log file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logging.ApplicationUpdaterLogFilename">
            <summary>
            The filename of the updater log file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logging.ApplicationEditorLogFilename">
            <summary>
            The filename of the editor log file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logging.ApplicationPatchDesignerLogFilename">
            <summary>
            The filename of the patch designer
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logging.OldApplicationLogFilename">
            <summary>
            The filename of the old application log file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logging.InstallLogFilename">
            <summary>
            The name of the install log file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logging.InstallLogFilenameBackup">
            <summary>
            The name of the backup install log file. During an install process, it backups the current one to provide a history of 1.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logging.UninstallLogFilename">
            <summary>
            the name of the uninstall log file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logging.UninstallLogFilenameBackup">
            <summary>
            The name of the backup uninstall log file. During an uninstall process, it backups the current one to provide a history of 1.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logging.ApplicationLogfileTimestamp">
            <summary>
            The string time format for log entries
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logging.ApplicationlogStartStop">
            <summary>
            The header and end that shows the start and stop of the application log file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logging.ApplicationLogfile">
            <summary>
            Provides a constant reference to the log file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logging.InstallLogfile">
            <summary>
            Provides a reference to an instance of an install log file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Logging.UninstallLogfile">
            <summary>
            Provides a reference to an instance of an uninstall log file
            </summary>
        </member>
        <member name="E:RelhaxModpack.Logging.OnLoggingUIThreadReport">
            <summary>
            Event for subscribing as a callback event for when the logfile writes
            </summary>
        </member>
        <member name="M:RelhaxModpack.Logging.Init(RelhaxModpack.Logfiles,System.String)">
            <summary>
            Initialize the logging system for the application
            </summary>
            <param name="logfile">The log file to initialize</param>
            <param name="logfilePath">The custom path of where to initialize the file</param>
            <returns>True if successful initialization, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Logging.IsLogDisposed(RelhaxModpack.Logfiles)">
            <summary>
            Checks if the logfile is disposed
            </summary>
            <param name="file">The logfile to check</param>
            <returns>True if the logfile object is null</returns>
        </member>
        <member name="M:RelhaxModpack.Logging.IsLogOpen(RelhaxModpack.Logfiles)">
            <summary>
            Checks if the logfile is instanced and can be written to using the CanWrite property
            </summary>
            <param name="file">The logfile to check</param>
            <returns>True if the logfile is open and available to be written to</returns>
        </member>
        <member name="M:RelhaxModpack.Logging.DisposeLogging(RelhaxModpack.Logfiles)">
            <summary>
            Dispose of the application logging subsystem
            </summary>
            <param name="logfile">The logfile to dispose</param>
        </member>
        <member name="M:RelhaxModpack.Logging.WriteHeader(RelhaxModpack.Logfiles)">
            <summary>
            Writes the ApplicationlogStartStop constant to the logfile
            </summary>
            <param name="logfile">The logfile to write the header on</param>
        </member>
        <member name="M:RelhaxModpack.Logging.WriteToLog(System.String,RelhaxModpack.Logfiles,RelhaxModpack.LogLevel)">
            <summary>
            Writes a message to a logfile instance, if it exists
            </summary>
            <param name="message">The message to write</param>
            <param name="logfiles">The logfile to write to</param>
            <param name="logLevel">The level of severity of the message. If not Application log, this parameter is ignored</param>
        </member>
        <member name="M:RelhaxModpack.Logging.WriteToLog(System.String,RelhaxModpack.Logfiles,RelhaxModpack.LogLevel,System.Object[])">
            <summary>
            Writes a message to a logfile instance, if it exists
            </summary>
            <param name="messageFormat">The formatted string to be passed into the string.Format() method</param>
            <param name="logfile">The logfile to write to</param>
            <param name="level">The severity level of the message. Will be written as part of the format</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Debug(System.String)">
            <summary>
            Writes a debug level message to the application log
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Debug(System.String,System.Object[])">
            <summary>
            Writes a debug level message to the application log
            </summary>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Info(System.String)">
            <summary>
            Writes a information (info) level message to the application log
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Info(System.String,System.Object[])">
            <summary>
            Writes an information (info) level message to the application log
            </summary>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Warning(System.String)">
            <summary>
            Writes a warning level message to the application log
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Warning(System.String,System.Object[])">
            <summary>
            Writes a warning level message to the application log
            </summary>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Error(System.String)">
            <summary>
            Writes an error level message to the application log
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Error(System.String,System.Object[])">
            <summary>
            Writes a error level message to the application log
            </summary>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Exception(System.String)">
            <summary>
            Writes an exception level message to the application log
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Exception(System.String,System.Object[])">
            <summary>
            Writes an exception level message to the application log
            </summary>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Installer(System.String)">
            <summary>
            Writes a message to the Installer log
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Installer(System.String,System.Object[])">
            <summary>
            Writes a message to the Installer log
            </summary>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Uninstaller(System.String)">
            <summary>
            Writes a message to the Uninstaller log
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Uninstaller(System.String,System.Object[])">
            <summary>
            Writes a message to the Uninstaller log
            </summary>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Editor(System.String,RelhaxModpack.LogLevel)">
            <summary>
            Writes a message to the Editor logfile
            </summary>
            <param name="message">The message</param>
            <param name="level">The level of severity included into the string format</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Editor(System.String,RelhaxModpack.LogLevel,System.Object[])">
            <summary>
            Writes a message to the Editor logfile
            </summary>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
            <param name="level">The level of severity included into the string format</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Updater(System.String,RelhaxModpack.LogLevel)">
            <summary>
            Writes a message to the Updater logfile
            </summary>
            <param name="message">The message</param>
            <param name="level">The level of severity included into the string format</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Updater(System.String,RelhaxModpack.LogLevel,System.Object[])">
            <summary>
            Writes a message to the Updater logfile
            </summary>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
            <param name="level">The level of severity included into the string format</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Patcher(System.String,RelhaxModpack.LogLevel)">
            <summary>
            Writes a message to the Patcher logfile
            </summary>
            <param name="message">The message</param>
            <param name="level">The level of severity included into the string format</param>
        </member>
        <member name="M:RelhaxModpack.Logging.Patcher(System.String,RelhaxModpack.LogLevel,System.Object[])">
            <summary>
            Writes a message to the Patcher logfile
            </summary>
            <param name="message">The formatted string to be passed into the string.Format() method</param>
            <param name="level">The level of severity included into the string format</param>
            <param name="args">The arguments to be passed into the string.Format() method</param>
        </member>
        <member name="T:RelhaxModpack.PatchSettings">
            <summary>
            Defines the settings used for the patch class
            </summary>
            <remarks>There is no constructor for this class. It is not needed as the act of not having one assigns a default
            of an empty constructor with to parameters. See https://stackoverflow.com/a/23458819/3128017 </remarks>
        </member>
        <member name="F:RelhaxModpack.PatchSettings.SaveSelectionBeforeLeave">
            <summary>
            If the selected patch should be saved (hitting apply) before the selection changes
            </summary>
        </member>
        <member name="F:RelhaxModpack.PatchSettings.SwitchToLogWhenTestingPatch">
            <summary>
            If true, when testing a patch, the log tab will become the active tab
            </summary>
        </member>
        <member name="F:RelhaxModpack.PatchSettings.AppMacro">
            <summary>
            The path to use for replacing the {app} macro in patch files
            </summary>
            <remarks>This is for the relative patch mode</remarks>
        </member>
        <member name="F:RelhaxModpack.PatchSettings.VersiondirMacro">
            <summary>
            The version of the game to use for replacing the {versiondir} macro in patch files
            </summary>
            <remarks>This is for the relative patch mode</remarks>
        </member>
        <member name="F:RelhaxModpack.PatchSettings.ApplyBehavior">
            <summary>
            Controls how the save patch and apply button interact with each other. See ApplyBehavior enumeration for interaction definitions.
            </summary>
        </member>
        <member name="T:RelhaxModpack.ApplyBehavior">
            <summary>
            The different ways that the apply and save database buttons can interact
            </summary>
        </member>
        <member name="F:RelhaxModpack.ApplyBehavior.Default">
            <summary>
            Default behavior. The buttons do not interact.
            </summary>
        </member>
        <member name="F:RelhaxModpack.ApplyBehavior.ApplyTriggersSave">
            <summary>
            When you click the apply button, it also saves the database after, to the default save location.
            </summary>
        </member>
        <member name="F:RelhaxModpack.ApplyBehavior.SaveTriggersApply">
            <summary>
            When you click the save button, it also clicks the apply button before saving.
            </summary>
        </member>
        <member name="T:RelhaxModpack.EditorSettings">
            <summary>
            The settings used in the editor window
            </summary>
        </member>
        <member name="F:RelhaxModpack.EditorSettings.BigmodsUsername">
            <summary>
            The user's FTP account username to the bigmods FTP server
            </summary>
        </member>
        <member name="F:RelhaxModpack.EditorSettings.BigmodsPassword">
            <summary>
            The user's FTP account password to the bigmods FTP server
            </summary>
        </member>
        <member name="F:RelhaxModpack.EditorSettings.SaveSelectionBeforeLeave">
            <summary>
            Before you click on a new selection to display, it will apply any changes made. Can be used with ApplyBehavior.
            </summary>
        </member>
        <member name="F:RelhaxModpack.EditorSettings.SortDatabaseList">
            <summary>
            Sort the database list per level. Not currently implemented
            </summary>
        </member>
        <member name="F:RelhaxModpack.EditorSettings.ApplyBehavior">
            <summary>
            The behavior the editor should use for the save and apply buttons
            </summary>
        </member>
        <member name="F:RelhaxModpack.EditorSettings.ShowConfirmationOnPackageApply">
            <summary>
            Show a confirmation window when clicking apply
            </summary>
        </member>
        <member name="F:RelhaxModpack.EditorSettings.ShowConfirmationOnPackageAddRemoveMove">
            <summary>
            Show a confirmation window when clicking to add or move a package
            </summary>
        </member>
        <member name="F:RelhaxModpack.EditorSettings.DefaultEditorSaveLocation">
            <summary>
            The location to save the database file
            </summary>
        </member>
        <member name="F:RelhaxModpack.EditorSettings.FTPUploadDownloadWindowTimeout">
            <summary>
            The timeout, in seconds, until the FTP upload or download window will close. Set to 0 to disable timeout.
            </summary>
        </member>
        <member name="F:RelhaxModpack.EditorSettings.SaveAsDatabaseVersion">
            <summary>
            The form to save the database in when "save as" is pressed
            </summary>
        </member>
        <member name="F:RelhaxModpack.EditorSettings.AutoUpdaterWorkDirectory">
            <summary>
            The directory where the auto updater will download, modify, and upload files to/from
            </summary>
        </member>
        <member name="M:RelhaxModpack.EditorSettings.#ctor">
            <summary>
            Create an instance of the EditorSettings class. Settings should be set via property initialization style.
            </summary>
        </member>
        <member name="T:RelhaxModpack.SelectionView">
            <summary>
            The type of selection view for how to display the selection tree
            </summary>
        </member>
        <member name="F:RelhaxModpack.SelectionView.Legacy">
            <summary>
            OMC style
            </summary>
        </member>
        <member name="F:RelhaxModpack.SelectionView.DefaultV2">
            <summary>
            Default WPF V2 style
            </summary>
        </member>
        <member name="T:RelhaxModpack.UninstallModes">
            <summary>
            The types on uninstall mods the application supports
            </summary>
        </member>
        <member name="F:RelhaxModpack.UninstallModes.Default">
            <summary>
            Default uninstall method to uninstall all modifications done by the application
            </summary>
        </member>
        <member name="F:RelhaxModpack.UninstallModes.Quick">
            <summary>
            Quick uninstall method to remove 
            </summary>
        </member>
        <member name="T:RelhaxModpack.DatabaseVersions">
            <summary>
            Database distribution levels
            </summary>
        </member>
        <member name="F:RelhaxModpack.DatabaseVersions.Stable">
            <summary>
            The stable public database
            </summary>
        </member>
        <member name="F:RelhaxModpack.DatabaseVersions.Beta">
            <summary>
            The unstable public beta database
            </summary>
        </member>
        <member name="F:RelhaxModpack.DatabaseVersions.Test">
            <summary>
            The unstable private testing database.
            </summary>
        </member>
        <member name="T:RelhaxModpack.UIThemes">
            <summary>
            The list of different types of themes in the application
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIThemes.Default">
            <summary>
            The default application theme
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIThemes.Dark">
            <summary>
            The dark application theme
            </summary>
        </member>
        <member name="F:RelhaxModpack.UIThemes.Custom">
            <summary>
            A custom application theme from the UISettings.xml
            </summary>
        </member>
        <member name="T:RelhaxModpack.ModpackSettings">
            <summary>
            Provides access to all settings used in the modpack.
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.PropertiesToExclude">
            <summary>
            Contains a list of properties that may be defined in the ModpackSettings class, but to exclude from the properties serialization (loading/saving)
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.CustomModInfoPath">
            <summary>
            The custom path to the ModInfo.xml file if loading in test mode
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.BetaDatabaseSelectedBranch">
            <summary>
            The name of the git branch to use when downloading the database. Uses the RelhaxModpackDatabase repository
            </summary>
            <remarks>URL for the repository: https://github.com/Willster419/RelhaxModpackDatabase </remarks>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.AtlasLibrariesCanBeLoaded">
            <summary>
            Flag to track when/if the user has MSVCP2013 installed to load the atlas image processing libraries
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.NotifyIfSameDatabase">
            <summary>
            Toggle if the program should notify the user if the database version is the same as the last installed version
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.BackupModFolder">
            <summary>
            Toggle if the program will backup the current mod installation
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.CleanInstallation">
            <summary>
            Toggle if the program will clean the mods and res_mods folders before installation
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.ForceManuel">
            <summary>
            Toggle if the program should force the user to manually point to the WoT location
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.SaveLastSelection">
            <summary>
            Toggle if the application should automatically save the last selected config to also be automatically loaded upon selection load
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.SaveUserData">
            <summary>
            Toggle if the application should save user cache save data like session stats, or auto equip configs
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.SaveDisabledMods">
            <summary>
            Toggle if the application should save disabled mods in the user's selection file. If selected, when a mod is enabled again, it will be automatically selected
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.DisplayUserModsWarning">
            <summary>
            A one time run bool to display a message about how to use user mods
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.VerboseLogging">
            <summary>
            Toggle if the application should use debug level logging or just info
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.AllowStatisticDataGather">
            <summary>
            Toggle if the application can gather statistic data about it's usage
            </summary>
            <remarks>The data that the modpack gathers is only the list of packages you selected for installation. This helps us determine which mods are popular, and for how best to
            prioritize which mods to work on first in the event the support team is overloaded</remarks>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.EnableBordersLegacyView">
            <summary>
            Toggle for each view if the borders around the child selection options should show
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.EnableBordersDefaultV2View">
            <summary>
            Toggle for each view if the borders around the child selection options should show
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.EnableColorChangeLegacyView">
            <summary>
            Toggle for each view if the color change should occur when a child selection happens
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.EnableColorChangeDefaultV2View">
            <summary>
            Toggle for each view if the color change should occur when a child selection happens
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.ShowInstallCompleteWindow">
            <summary>
            Toggle if the installation complete window will be shown
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.ClearCache">
            <summary>
            Toggle if the program will delete the WoT appdata cache
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.DeleteLogs">
            <summary>
            Toggle if the program will delete xvm, pmod, WoT logs
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.CreateShortcuts">
            <summary>
            Toggle if the program will create desktop shortcuts
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.InstallWhileDownloading">
            <summary>
            Toggle the ability for the modpack to extract a package as soon as it is downloaded
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.MulticoreExtraction">
            <summary>
            Toggle the ability to have multiple extractions happening at the same time
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.ExportMode">
            <summary>
            Toggle export mode
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.ForceEnabled">
            <summary>
            Force all packages to be enabled in the selection list
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.ForceVisible">
            <summary>
            Force all packages to be visible in the selection list
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.DisableTriggers">
            <summary>
            When selected, the installation engine will disable event triggers.
            </summary>
            <remarks>The triggers, when enabled, enable the application to start some install tasks when all required packages are downloaded</remarks>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.OneClickInstall">
            <summary>
            Toggle one click install mode
            </summary>
            <remarks>Allows the user to install a selection when clicking the install button</remarks>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.AutoInstall">
            <summary>
            Toggle auto install mode
            </summary>
            <remarks>Allows the user to have the application automatically check for and install a selection file when the database updates</remarks>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.AdvancedInstalProgress">
            <summary>
            Toggle the advanced installation progress window
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.DeleteCacheFiles">
            <summary>
            True - After an installation the application will ask to delete old download cache files
            False - After an installation the application will always delete old download cache files
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.PreviewFullscreen">
            <summary>
            Toggle for if the Preview window should be shown in fullscreen mode
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.ModSelectionFullscreen">
            <summary>
            Toggle for if the ModSelectionView window should be shown in fullscreen mode
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.MinimizeToSystemTray">
            <summary>
            Toggle for minimizing the application to the system tray (After the application is done installing mods I presume?)
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.ShowOptionsCollapsedLegacy">
            <summary>
            Toggle for if the selection list options in Legacy view should be collapsed by default on start
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.AutoOneclickShowWarningOnSelectionsFail">
            <summary>
            Toggle if during auto or one click load if the application should inform if any selection errors during selection file load
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.AutoInstallFrequencyInterval">
            <summary>
            The time, in a specified unit, to check for anew data base version
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.AutoInstallFrequencyTimeUnit">
            <summary>
            The time unit to use for the interval (mins, hours, etc)
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.ModSelectionHeight">
            <summary>
            The height, in pixels, of the ModSelectionView window
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.ModSelectionWidth">
            <summary>
            The width, in pixels, of the ModSelectionView window
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.PreviewX">
            <summary>
            The x-coordinate location, in pixels, of the Preview window
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.PreviewY">
            <summary>
            The y-coordinate location, in pixels, of the Preview window
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.PreviewHeight">
            <summary>
            The height, in pixels, of the Preview window
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.PreviewWidth">
            <summary>
            The width, in pixels, of the Preview window
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.DisplayScale">
            <summary>
            The factor to scale the window size and components by. From 1 to 3 in increments of 0.25
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.AutoOneclickSelectionFilePath">
            <summary>
            The path to the auto or one click selection file
            </summary>
            <remarks>Used for both auto and one click installation modes</remarks>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.UninstallMode">
            <summary>
            The Uninstall mode to use when uninstalling or installing with the clean install option
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.ModSelectionView">
            <summary>
            The selection view to use
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.Language">
            <summary>
            The selected language
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.DatabaseDistroVersion">
            <summary>
            The distribution version of the database to use when selecting mods
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.ApplicationDistroVersion">
            <summary>
            The application distribution version to use. When selected, it won't take affect until application restart
            </summary>
        </member>
        <member name="F:RelhaxModpack.ModpackSettings.ApplicationTheme">
            <summary>
            The theme to apply to the application
            </summary>
        </member>
        <member name="M:RelhaxModpack.ModpackSettings.ApplyOldSettings(System.Xml.XmlNodeList)">
            <summary>
            Check for old poorly named settings that don't directly match setting property names
            </summary>
            <param name="settings">The node that holds all the settings nodes</param>
        </member>
        <member name="T:RelhaxModpack.ApplicationMode">
            <summary>
            The primary functional modes the application can run in
            </summary>
        </member>
        <member name="F:RelhaxModpack.ApplicationMode.Default">
            <summary>
            The default mode of modpack installer. This is the primary focus of the application
            </summary>
        </member>
        <member name="F:RelhaxModpack.ApplicationMode.Editor">
            <summary>
            The database editor mode
            </summary>
        </member>
        <member name="F:RelhaxModpack.ApplicationMode.Updater">
            <summary>
            The updater mode. Used for updating the database, application, and other various functions
            </summary>
        </member>
        <member name="F:RelhaxModpack.ApplicationMode.PatchDesigner">
            <summary>
            The patch designer mode. Allow the user to create and test patches
            </summary>
        </member>
        <member name="F:RelhaxModpack.ApplicationMode.Patcher">
            <summary>
            The patch runner mode. Can be used in command line mode, used for patching files given patch file instructions
            </summary>
        </member>
        <member name="T:RelhaxModpack.CommandLineSettings">
            <summary>
            Handles all parsing and usage of command line arguments
            </summary>
        </member>
        <member name="F:RelhaxModpack.CommandLineSettings.TestMode">
            <summary>
            Using the application is database test mode. Allows you to test a local database
            </summary>
            <remarks>Activated with "/test"</remarks>
        </member>
        <member name="F:RelhaxModpack.CommandLineSettings.SkipUpdate">
            <summary>
            Skip the application update check
            </summary>
            <remarks>Activated with "/skip-update"</remarks>
        </member>
        <member name="F:RelhaxModpack.CommandLineSettings.SilentStart">
            <summary>
            Allows the application (in installer mode) to be launched in a minimized state
            </summary>
            <remarks>Activated with "/silent-start"</remarks>
        </member>
        <member name="F:RelhaxModpack.CommandLineSettings.AutoInstallFileName">
            <summary>
            The name of the auto install selection file
            </summary>
            <remarks>The application uses the filename as check for if in auto install mode i.e. if the string is not empty.
            The file must be in the "RelhaxUserSelections" folder</remarks>
        </member>
        <member name="F:RelhaxModpack.CommandLineSettings.UpdateKeyFileName">
            <summary>
            The name of the file that contains the key for unlocking the updater
            </summary>
            <remarks>use key filename as check for update key mode</remarks>
        </member>
        <member name="F:RelhaxModpack.CommandLineSettings.EditorAutoLoadFileName">
            <summary>
            The path to load the database from when the application starts
            </summary>
        </member>
        <member name="F:RelhaxModpack.CommandLineSettings.PatchFilenames">
            <summary>
            The parsed list of patch instruction files for patch mode
            </summary>
            <remarks>The application will run the patches in order loaded from the command line i.e. left to right</remarks>
        </member>
        <member name="F:RelhaxModpack.CommandLineSettings.ApplicationMode">
            <summary>
            The mode that the application is currently running in
            </summary>
        </member>
        <member name="M:RelhaxModpack.CommandLineSettings.ParseCommandLineConflicts">
            <summary>
            Parse any conflicting command line arguments
            </summary>
        </member>
        <member name="M:RelhaxModpack.CommandLineSettings.ParseCommandLine(System.String[])">
            <summary>
            Parse the command line arguments
            </summary>
            <param name="args">A string array of command line arguments</param>
        </member>
        <member name="T:RelhaxModpack.Settings">
            <summary>
            Handles all generic constants and statics used throughout the application
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ApplicationStartupPath">
            <summary>
            The Startup root path of the application. Does not include the application name
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ModpackSettingsFileName">
            <summary>
            The name of the application settings file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.UISettingsColorFile">
            <summary>
            The name of the settings color file
            </summary>
            <remarks>Stores all settings</remarks>
        </member>
        <member name="F:RelhaxModpack.Settings.OldModpackSettingsFilename">
            <summary>
            The name of the legacy application settings file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.UISettingsFileName">
            <summary>
            The name of the application color settings file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.EditorSettingsFilename">
            <summary>
            The name of the modpack editor tool settings file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.PatcherSettingsFilename">
            <summary>
            The name of the modpack patch designer tool settings file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.LastSavedConfigFilename">
            <summary>
            The name of the selection file when used in the setting "save last installed selection"
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.EditorLaunchFromMainWindowFilename">
            <summary>
            The file in the application root directory used to unlock the "launch editor" button
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.DefaultEndAddress">
            <summary>
            The default end address of the location of mod packages (start + zip + end)
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.BetaDatabaseV2RootFilename">
            <summary>
            The filename of the V2 root database document. All category names and filenames, and version info is in this document
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ApplicationUpdateFileName">
            <summary>
            The filename to download the latest stable or beta application zip file as
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.RelicBatchUpdateScript">
            <summary>
            The filename to save the self updater script as
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.RelicBatchUpdateScriptServer">
            <summary>
            The filename of the self updater script inside the manager zip file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.RelicBatchUpdateScriptOld">
            <summary>
            The old V1 filename to save the self updater script as
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.SelectionsXml">
            <summary>
            The root filename of the list of selection files
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.RelhaxDownloadsFolderPath">
            <summary>
            The absolute path of the application zip file and zip database file folder
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.RelhaxDownloadsFolderPathOld">
            <summary>
            The old absolute path of the application zip file and zip database file folder
            </summary>
            [Obsolete]
        </member>
        <member name="F:RelhaxModpack.Settings.RelhaxModBackupFolderPath">
            <summary>
            The absolute path of the application mod backup folder
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.RelhaxModBackupFolderPathOld">
            <summary>
            The old absolute path of the application mod backup folder
            </summary>
            [Obsolete]
        </member>
        <member name="F:RelhaxModpack.Settings.RelhaxUserSelectionsFolderPath">
            <summary>
            The absolute path of the application user selections folder. Default location 
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.RelhaxUserSelectionsFolderPathOld">
            <summary>
            The old absolute path of the application user selections folder. Old Default location
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.RelhaxUserModsFolderPath">
            <summary>
            The absolute path of the application folder where users can place custom mod zip files
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.RelhaxUserModsFolderPathOld">
            <summary>
            The old absolute path of the application folder where users can place custom mod zip files
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.RelhaxTempFolderPath">
            <summary>
            The absolute path of the application temporary folder
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.RelhaxTempFolderPathOld">
            <summary>
            The old absolute path of the application temporary folder
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.RelhaxLibrariesFolderPath">
            <summary>
            The absolute path of the application 3rd party dll references folder. Currently used to hold atlas file libraries
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.RelhaxLibrariesFolderPathOld">
            <summary>
            The old absolute path of the application 3rd party dll references folder. Currently used to hold atlas file libraries
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.WoT64bitFolder">
            <summary>
            The name of the 64bit folder in the 'World_of_Tanks' directory
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.WoT32bitFolder">
            <summary>
            The name of the 32bit folder in the 'World_of_Tanks' directory
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.WoT64bitFolderWithSlash">
            <summary>
            The WoT 64bit folder name with the folder separator before it
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.WoT32bitFolderWithSlash">
            <summary>
            The WoT 32bit folder name with the folder separator before it
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.WoTVersionXml">
            <summary>
            The name of the version xml used for getting the current client version information
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.PatchFolderName">
            <summary>
            The name of the installer folder to hold all patch xml files in
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ShortcutFolderName">
            <summary>
            The name of the installer folder to hold all shortcut xml files in
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.XmlUnpackFolderName">
            <summary>
            The name of the installer folder to hold all xml unpack entries in
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.AtlasCreationFoldername">
            <summary>
            The name of the installer folder to hold all xml atlas creation instructions in
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.FontsToInstallFoldername">
            <summary>
            The name of the installer folder to hold all fonts to install (or check if needs to install)
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ReadmeFromZipfileFolderName">
            <summary>
            The name of the temporary install folder to hold database manager readme files. The end user does not need this folder
            and will be deleted at the end of the installation
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.AutoUpdateZipFolderName">
            <summary>
            The name of the temporary install folder that holds the auto update information of the database editor.
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.FoldersToCleanup">
            <summary>
            The list of installer folders in the root {WoT} directory to cleanup after an installation
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.MD5HashDatabaseXmlFile">
            <summary>
            The absolute path to the md5 hash zip file download database file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.DefaultCheckedSelectionfile">
            <summary>
            The filename of the selection file used to select mods on default loading of the mod selection list
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.SupportedClients">
            <summary>
            The filename of the xml document inside the manager info zip file containing the list of supported WoT clients
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ManagerVersion">
            <summary>
            The filename of the xml document inside the manager info zip file containing manager version information
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ManagerInfoDatFile">
            <summary>
            The location of the manager info zip file. Contains several xml files with database and client definitions
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.LastInstalledConfigFilepath">
            <summary>
            The absolute path of the selection file used for saving last selection
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.RelhaxSettingsFilepath">
            <summary>
            The absolute path of the V2 settings file used for saving ModpackSettings
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.RelhaxLogFilepath">
            <summary>
            The absolute path of the Relhax log file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.FoldersToCheck">
            <summary>
            Array of all Modpack created folders in the application directory
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.DefaultStartAddress">
            <summary>
            The default starting address of the location of mod packages (start + zip + end)
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.BetaDatabaseV2FolderURLEscaped">
            <summary>
            The URL of the V2 beta database root folder. (NOTE: database V2 is multiple files)
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.BetaDatabaseBranchesURL">
            <summary>
            The API URL to return a json format document of the current branches in the repository
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ManagerInfoURLBigmods">
            <summary>
            The URL of the V2 manager info zip file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ApplicationUpdateURL">
            <summary>
            The URL to the location of the latest stable version of the application as a zip file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ApplicationBetaUpdateURL">
            <summary>
            The URL to the location of the latest beta version of the application as a zip file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.SelectionsRoot">
            <summary>
            The root URL of the V2 selection files location
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ApplicationNotesStableUrl">
            <summary>
            The URL path of the latest application stable release notes
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ApplicationNotesBetaUrl">
            <summary>
            The URL path of the latest application beta release notes
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.DatabaseNotesUrl">
            <summary>
            The URL path of the latest V2 database release notes
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.DatabaseOnlineFolderXpath">
            <summary>
            The xpath string to get the onlineFolder attribute from the document root
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.DatabaseOnlineVersionXpath">
            <summary>
            The xpath string to get the database version info attribute from the document root
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ConfigFileVersion">
            <summary>
            the latest config file version for saving the user's selection preferences
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.WoTProcessName">
            <summary>
            The name of the WoT process used for detecting if it is running
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.WoTVersionXmlXpath">
            <summary>
            The xpath to the version information used by the modpack to determine the WoT client version
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ApplicationVersion">
            <summary>
            The current distribution version of the application.
            Alpha should NEVER be built for public distribution unless direct testing!
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.TrueAlpha">
            <summary>
            Flag to determine if the user running is intentionally using the alpha version (or if an Alpha version was accidentally distributed)
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.NumLogicalProcesors">
            <summary>
            The number of logical processors (threads) detected on the system. Used to make n installation threads for faster extraction
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.LogSpacingLineup">
            <summary>
            The amount so space characters to line up a continued log entry without the date/time
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.AppDataFolder">
            <summary>
            The location of the WoT app data folder parsed at installation time
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.WoTDirectory">
            <summary>
            The location of the WoT installation directory parsed at installation time
            </summary>
            <remarks>The path is absolute, ending at "World_of_Tanks"</remarks>
        </member>
        <member name="F:RelhaxModpack.Settings.WoTClientVersion">
            <summary>
            The version information of WoT parsed at install time
            </summary>
            <remarks>This info is gathered from the "version.xml" file from the game's root directory</remarks>
        </member>
        <member name="F:RelhaxModpack.Settings.WoTModpackOnlineFolderVersion">
            <summary>
            The version of the online folder name containing the zip files for this game
            </summary>
            <remarks>The online folders are done by major versions only i.e. 1.4.1, 1.5.0, etc. All zip files on 1.5.0.x are stored in this folder</remarks>
        </member>
        <member name="F:RelhaxModpack.Settings.DatabaseVersion">
            <summary>
            The version of the database parsed upon application load
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.FirstLoad">
            <summary>
            Determines if this is the first time the application is loading
            </summary>
            <remarks>Done by checking if the settings file exists. If it is set to true in the application, it will be set to false again when it closes.</remarks>
        </member>
        <member name="F:RelhaxModpack.Settings.FirstLoadToV2">
            <summary>
            Determines if while being the first time loading, if this is an upgrade operation to Relhax V2
            </summary>
            <remarks>Done by if FirstLoad is true and the Relhax V1 settings file exists</remarks>
        </member>
        <member name="F:RelhaxModpack.Settings.MaximumDisplayScale">
            <summary>
            The maximum amount that the application will be allowed to scale. 300%
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.MinimumDisplayScale">
            <summary>
            The default amount that the application will be scaled to. 100%
            </summary>
        </member>
        <member name="F:RelhaxModpack.Settings.ManagerInfoZipfile">
            <summary>
            The manager info zip in a program reference. Allows for multiple instances of the application to be active at the same time. Also saves milliseconds by not having to write to disk.
            </summary>
        </member>
        <member name="M:RelhaxModpack.Settings.LoadSettings(System.String,System.Type,System.String[],System.Object)">
            <summary>
            Loads/serializes an xml file into a settings class based on class type
            </summary>
            <param name="xmlfile">The path to the file</param>
            <param name="SettingsClass">The type of the settings class to load into</param>
            <param name="propertiesToExclude">A string list of properties (in the class) to not look for</param>
            <param name="classInstance">The actual object to append the xml settings to</param>
            <returns></returns>
        </member>
        <member name="M:RelhaxModpack.Settings.SaveSettings(System.String,System.Type,System.String[],System.Object)">
            <summary>
            Saves/serializes a settings class file to xml
            </summary>
            <param name="xmlFile">The file to write to. If exists, it will be overwritten</param>
            <param name="SettingsClass">The type of the class to save values from</param>
            <param name="propertiesToExclude">A string list of properties (in the class) to not look for</param>
            <param name="classInstance">The actual instance of the class to save from</param>
            <returns></returns>
        </member>
        <member name="T:RelhaxModpack.UISettings">
            <summary>
            Handles all custom UI settings
            </summary>
        </member>
        <member name="F:RelhaxModpack.UISettings.CustomColorSettingsPathV1">
            <summary>
            The name of the Xml element to hold all custom color settings
            </summary>
            <remarks>See CustomSettings array for list of custom colors</remarks>
        </member>
        <member name="F:RelhaxModpack.UISettings.NotSelectedTabColor">
            <summary>
            The color to use in the selection list for a tab which is not selected
            </summary>
            <remarks>It starts as null because the color is unknown (and can be different types based on the user's theme).
            It is set on user selection on a component in the selection list.</remarks>
        </member>
        <member name="F:RelhaxModpack.UISettings.NullAllowedGlobalBrushes">
            <summary>
            A list of brush names that are allowed to have 'null' as the value for global brushes (global = at root of Theme object)
            </summary>
        </member>
        <member name="P:RelhaxModpack.UISettings.CurrentTheme">
            <summary>
            The currently applied theme in the UI engine
            </summary>
        </member>
        <member name="M:RelhaxModpack.UISettings.ApplyCustomStyles(System.Windows.Window)">
            <summary>
            Applies the custom style templates for a UI component class type when an ID is defined.
            This allows for custom color definitions to be loaded.
            </summary>
            <param name="window">The Window to apply the styles to</param>
        </member>
        <member name="M:RelhaxModpack.UISettings.ApplyUIColorSettings(System.Windows.Window)">
            <summary>
            Applies custom color settings to a window
            </summary>
            <param name="window">The Window object to apply color settings to</param>
        </member>
        <member name="M:RelhaxModpack.UISettings.ApplyThemeToRootComponent(System.Windows.FrameworkElement,System.Boolean,RelhaxModpack.UIComponents.WindowColorset,System.Boolean)">
            <summary>
            Applies theme properties to UI components based on colorDefinition rule sets for that UI component class type
            </summary>
            <param name="rootElement">The element to start at for applying theme properties</param>
            <param name="customWindowDefinition">To determine if to apply custom theme properties based on a list of custom theme properties for that window</param>
            <param name="wcolorset">The property object of colorDefinition rules</param>
            <param name="includeSelf">Determine if applying the rootElement</param>
        </member>
        <member name="M:RelhaxModpack.UISettings.LoadSettingsFile">
            <summary>
            Load the custom color definitions from XML
            </summary>
        </member>
        <member name="M:RelhaxModpack.UISettings.ParseColorFromString(System.String,System.Windows.Media.Color@)">
            <summary>
            Tries to parse a hex code color to a color object
            </summary>
            <param name="color">The string hex code for the color to use</param>
            <param name="outColor">The corresponding color object</param>
            <returns>True if color parsing was successful, a default color otherwise</returns>
            <remarks>Uses the 32bit color codes for generation (Alpha, Red, Green, Blue) Alpha is transparency</remarks>
        </member>
        <member name="M:RelhaxModpack.UISettings.VerifyPoints(System.Windows.Point)">
            <summary>
            Verifies that the points for applying color gradient directions are within 0-1
            </summary>
            <param name="p">The color gradient direction to verify</param>
        </member>
        <member name="M:RelhaxModpack.UISettings.DumpAllWindowColorSettingsToFile(System.String,RelhaxModpack.MainWindow)">
            <summary>
            Saves all currently enabled color settings to an xml file
            </summary>
            <param name="savePath">The path to save the xml file to</param>
            <param name="mainWindow">If method is called from MainWindow, use itself for getting its color properties</param>
        </member>
        <member name="T:RelhaxModpack.PatchRegressionTypes">
            <summary>
            The types of patch regression tests that can be performed
            </summary>
        </member>
        <member name="F:RelhaxModpack.PatchRegressionTypes.json">
            <summary>
            Json regression (standard, non-XVM)
            </summary>
        </member>
        <member name="F:RelhaxModpack.PatchRegressionTypes.xml">
            <summary>
            Xml regression
            </summary>
        </member>
        <member name="F:RelhaxModpack.PatchRegressionTypes.regex">
            <summary>
            Regex regression
            </summary>
        </member>
        <member name="F:RelhaxModpack.PatchRegressionTypes.followPath">
            <summary>
            Json regression (XVM style)
            </summary>
        </member>
        <member name="T:RelhaxModpack.UnitTest">
            <summary>
            Represents a patch operation with a description and desired assertion condition
            </summary>
        </member>
        <member name="F:RelhaxModpack.UnitTest.Patch">
            <summary>
            The patch operation object
            </summary>
        </member>
        <member name="F:RelhaxModpack.UnitTest.Description">
            <summary>
            A description of what the patch should do
            </summary>
        </member>
        <member name="F:RelhaxModpack.UnitTest.ShouldPass">
            <summary>
            Determines if the patch should pass or fail the test
            </summary>
        </member>
        <member name="T:RelhaxModpack.Regression">
            <summary>
            A regression object is an entire regression test suite. Manages the unit tests and runs the test assertions
            </summary>
            <remarks>A regression test is designed to only test one type of patch i.e. a series of XML patches.
            The patching system works by having a starting file and making changes at each unit test. It then loads the files and compares
            the results. Results are logged to a new logfile each time a regression run is started</remarks>
        </member>
        <member name="M:RelhaxModpack.Regression.#ctor(RelhaxModpack.PatchRegressionTypes,System.Collections.Generic.List{RelhaxModpack.UnitTest})">
            <summary>
            Make a regression object
            </summary>
            <param name="regressionType">The type of regressions to run</param>
            <param name="unitTestsToRun">The list of unit tests to run</param>
        </member>
        <member name="M:RelhaxModpack.Regression.RunRegressions">
            <summary>
            Run a complete regression test based on the list of unit tests
            </summary>
            <returns>Returns false if a setup error occurred, true otherwise</returns>
            <remarks>The return value of the method does NOT related to the success of the Unit Tests</remarks>
        </member>
        <member name="M:RelhaxModpack.Regression.Dispose(System.Boolean)">
            <summary>
            Dispose of managed resources
            </summary>
            <param name="disposing">For redundant calls</param>
        </member>
        <member name="M:RelhaxModpack.Regression.Dispose">
            <summary>
            Dispose of managed resources
            </summary>
        </member>
        <member name="T:RelhaxModpack.RelhaxFreeImageLibrary">
            <summary>
            A wrapper class around the TexImpNet FreeImage library class
            </summary>
            <remarks>The class handles: 32 and 64 bit library loading determination, Extraction, and Loading into memory</remarks>
        </member>
        <member name="P:RelhaxModpack.RelhaxFreeImageLibrary.EmbeddedFilename">
            <summary>
            Gets the name of the embedded zip file containing the dll, 32 or 64 bit version
            </summary>
        </member>
        <member name="P:RelhaxModpack.RelhaxFreeImageLibrary.ExtractedFilename">
            <summary>
            Gets the name of the dll file inside the embedded zip file, 32 or 64bit version
            </summary>
        </member>
        <member name="P:RelhaxModpack.RelhaxFreeImageLibrary.Filepath">
            <summary>
            Gets the absolute path to the dll file
            </summary>
        </member>
        <member name="P:RelhaxModpack.RelhaxFreeImageLibrary.IsExtracted">
            <summary>
            Determines if the file is extracted to the Filepath property location
            </summary>
        </member>
        <member name="P:RelhaxModpack.RelhaxFreeImageLibrary.IsLoaded">
            <summary>
            Determines if the library is loaded into memory
            </summary>
        </member>
        <member name="M:RelhaxModpack.RelhaxFreeImageLibrary.Load">
            <summary>
            Attempts to load the library using the Filepath property
            </summary>
            <returns>True if the library load was successful</returns>
        </member>
        <member name="M:RelhaxModpack.RelhaxFreeImageLibrary.Unload">
            <summary>
            Attempts to unload the library
            </summary>
            <returns>True if the library was unloaded, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.RelhaxFreeImageLibrary.Extract">
            <summary>
            Extracts the embedded compressed library to the location in the Filepath property
            </summary>
        </member>
        <member name="T:RelhaxModpack.RelhaxNvTexLibrary">
            <summary>
            A wrapper class around the TexImpNet NvidiaTT library class
            </summary>
            <remarks>The class handles: 32 and 64 bit library loading determination, Extraction, and Loading into memory</remarks>
        </member>
        <member name="P:RelhaxModpack.RelhaxNvTexLibrary.EmbeddedFilename">
            <summary>
            Gets the name of the embedded zip file containing the dll, 32 or 64 bit version
            </summary>
        </member>
        <member name="P:RelhaxModpack.RelhaxNvTexLibrary.ExtractedFilename">
            <summary>
            Gets the name of the dll file inside the embedded zip file, 32 or 64bit version
            </summary>
        </member>
        <member name="P:RelhaxModpack.RelhaxNvTexLibrary.Filepath">
            <summary>
            Gets the absolute path to the dll file
            </summary>
        </member>
        <member name="P:RelhaxModpack.RelhaxNvTexLibrary.IsExtracted">
            <summary>
            Determines if the file is extracted to the Filepath property location
            </summary>
        </member>
        <member name="P:RelhaxModpack.RelhaxNvTexLibrary.IsLoaded">
            <summary>
            Determines if the library is loaded into memory
            </summary>
        </member>
        <member name="M:RelhaxModpack.RelhaxNvTexLibrary.Load">
            <summary>
            Attempts to load the library using the Filepath property
            </summary>
            <returns>True if the library load was successful</returns>
        </member>
        <member name="M:RelhaxModpack.RelhaxNvTexLibrary.Unload">
            <summary>
            Attempts to unload the library
            </summary>
            <returns>True if the library was unloaded, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.RelhaxNvTexLibrary.Extract">
            <summary>
            Extracts the embedded compressed library to the location in the Filepath property
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.AskCloseWoT">
            <summary>
            Interaction logic for AskCloseWoT.xaml
            </summary>
            <summary>
            AskCloseWoT
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.AskCloseWoT.#ctor">
            <summary>
            Create an instance of the AskCloseWoT window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.AskCloseWoT.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.AutoUpdatePackageWindow">
            <summary>
            Interaction logic for AutoUpdatePackageWindow.xaml
            </summary>
            <summary>
            AutoUpdatePackageWindow
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.AutoUpdatePackageWindow.Packages">
            <summary>
            Get or set the list of packages to display in the package update window
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.AutoUpdatePackageWindow.WorkingDirectory">
            <summary>
            Gets or sets the current directory where the window will download and upload files to/from
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AutoUpdatePackageWindow.AutoUpdateDownloadInstructionsXml">
            <summary>
            The absolute path inside the zip file to the download instructions xml
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AutoUpdatePackageWindow.AutoUpdateFileInstructionsXml">
            <summary>
            The absolute path inside the zip file to the file list instructions xml
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AutoUpdatePackageWindow.Credential">
            <summary>
            The FTP credentials
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.AutoUpdatePackageWindow.#ctor">
            <summary>
            Create an instance of the AutoUpdatePackageWindow window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.AutoUpdatePackageWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.CreateFTPFolderName">
            <summary>
            Interaction logic for CreateFTPFolderName.xaml
            </summary>
            <summary>
            CreateFTPFolderName
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.CreateFTPFolderName.FTPPath">
            <summary>
            The absolute FTP path to the current folder
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.CreateFTPFolderName.Credential">
            <summary>
            The FTP credentials to use
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.CreateFTPFolderName.FTPReturnPath">
            <summary>
            The absolute FTP path to the newly created folder
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.CreateFTPFolderName.FTPReturnFolderName">
            <summary>
            The newly created folder name
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.CreateFTPFolderName.#ctor">
            <summary>
            Create an instance of the CreateFTPFolderName window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.CreateFTPFolderName.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.Credits">
            <summary>
            Interaction logic for Credits.xaml
            </summary>
            <summary>
            Credits
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.Credits.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.DevleoperSelectionsClosedEWventArgs">
            <summary>
            Event argument passed back to the caller for when the developer selection window is closed
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DevleoperSelectionsClosedEWventArgs.LoadSelection">
            <summary>
            Determines if a selection should be loaded (for example, if the user closed the window instead of selecting one)
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DevleoperSelectionsClosedEWventArgs.FileToLoad">
            <summary>
            the name of the file to load from the online list of selection files
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.DeveloperSelectionsClosedDelagate">
            <summary>
            The delegate callback for when the developer selections window is closed
            </summary>
            <param name="sender">The sender (this)</param>
            <param name="e">The arguments</param>
        </member>
        <member name="T:RelhaxModpack.Windows.DeveloperSelectionsViewer">
            <summary>
            Interaction logic for DeveloperSelectionsViewer.xaml
            </summary>
            <summary>
            DeveloperSelectionsViewer
            </summary>
        </member>
        <member name="E:RelhaxModpack.Windows.DeveloperSelectionsViewer.OnDeveloperSelectionsClosed">
            <summary>
            Fires when the developer selection window is closed
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.DeveloperSelectionsViewer.#ctor">
            <summary>
            Create an instance of the DeveloperSelectionsViewer window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.DeveloperSelectionsViewer.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.Diagnostics">
            <summary>
            Interaction logic for Diagnostics.xaml
            </summary>
            <summary>
            Diagnostics
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.Diagnostics.#ctor">
            <summary>
            Create an instance of the Diagnostics window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.Diagnostics.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.EditorAddRemove">
            <summary>
            Interaction logic for EditorAddRemove.xaml
            </summary>
            <summary>
            EditorAddRemove
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.EditorAddRemove.GlobalDependencies">
            <summary>
            The list of parsed global dependencies
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.EditorAddRemove.Dependencies">
            <summary>
            The list of parsed dependencies
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.EditorAddRemove.ParsedCategoryList">
            <summary>
            The list of parsed categories
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.EditorAddRemove.SelectedPackage">
            <summary>
            The referenced package when selecting to add, the package selected when removing
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.EditorAddRemove.EditOrAdd">
            <summary>
            True is moving package, false is adding package
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.EditorAddRemove.AddSameLevel">
            <summary>
            Toggles if the user requests to add the package at a new level or in the same level as the referenced package
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.EditorAddRemove.#ctor">
            <summary>
            Create an instance of the EditorAddRemove window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.EditorAddRemove.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.EditorSelectMediaUploadLocation">
            <summary>
            Interaction logic for EditorSelectMediaUploadLocation.xaml
            </summary>
            <summary>
            EditorSelectMediaUploadLocation
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.EditorSelectMediaUploadLocation.Credential">
            <summary>
            The FTP network credential
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.EditorSelectMediaUploadLocation.UploadPath">
            <summary>
            The FTP upload path to upload the media to
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.EditorSelectMediaUploadLocation.#ctor">
            <summary>
            Create an instance of the EditorSelectMediaUploadLocation window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.EditorSelectMediaUploadLocation.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.ExceptionCaptureDisplay">
            <summary>
            Interaction logic for ExceptionCaptureDisplay.xaml
            </summary>
            <summary>
            ExceptionCaptureDisplay
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.ExceptionCaptureDisplay.#ctor">
            <summary>
            Create an instance of the ExceptionCaptureDisplay window
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.ExceptionCaptureDisplay.ExceptionText">
            <summary>
            Gets or sets the Exception text to display
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.ExceptionCaptureDisplay.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.ExportModeSelect">
            <summary>
            Interaction logic for ExportModeSelect.xaml
            </summary>
            <summary>
            ExportModeSelect
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.ExportModeSelect.SelectedVersionInfo">
            <summary>
            The selection version info struct that was selected from the user selection
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.ExportModeSelect.#ctor">
            <summary>
            Create an instance of the ExportModeSelect class
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.ExportModeSelect.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.FirstLoadSelectLanguage">
            <summary>
            Interaction logic for FirstLaunchSelectLanguage.xaml
            </summary>
            <summary>
            FirstLoadSelectLanguage
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.FirstLoadSelectLanguage.Continue">
            <summary>
            Flag to determine if the user selected a language
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.FirstLoadSelectLanguage.#ctor">
            <summary>
            Create and instance of the FirstLoadSelectLanguage Window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.FirstLoadSelectLanguage.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.FirstLoadAcknowledgments">
            <summary>
            Interaction logic for FirstLoadAcknowledgments.xaml
            </summary>
            <summary>
            FirstLoadAcknowledgments
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.FirstLoadAcknowledgments.#ctor">
            <summary>
            Create an instance of the FirstLoadAcknowledgments window
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.FirstLoadAcknowledgments.UserAgreed">
            <summary>
            Gets and sets is the user has agreed to the Acknowledgments before allowing him/her to use the application
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.FirstLoadAcknowledgments.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.GameCenterProperty">
            <summary>
            The object used in getting the value for the php update request
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.GameCenterProperty.FileName">
            <summary>
            The name of the xml file to get the value from
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.GameCenterProperty.Xpath">
            <summary>
            The xml xpath to get the value from inside the xml document
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.GameCenterProperty.ValueBlock">
            <summary>
            The TextBlock that holds the php value text
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.GameCenterProperty.KeyBlock">
            <summary>
            The Textblock that holds the php key text
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.GameCenterProperty.Value">
            <summary>
            The value from the xml document to use for the php GET request
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.GameCenterProperty.GetRequestParamater">
            <summary>
            The name of the php GET request parameter
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.GameCenterProperty.GaveError">
            <summary>
            Stores if getting the value from xml document was successful
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.GameCenterProperty.IsRequired">
            <summary>
            Flag for if this parameter is required (hd parameter is not required, for example)
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.PatchFileProperty">
            <summary>
            A class definition for the xml objects returned from the php update request
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.PatchFileProperty.Filename">
            <summary>
            The name of the update file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.PatchFileProperty.FolderName">
            <summary>
            The name of the folder inside 'updates' folder to place the update
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.PatchFileProperty.BaseURL">
            <summary>
            The base URL of where to download the file from
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.PatchFileProperty.Size">
            <summary>
            The size of the file
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.GameCenterUpdateDownloader">
            <summary>
            Interaction logic for GameCenterUpdateDownloader.xaml
            </summary>
            <summary>
            GameCenterUpdateDownloader
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.GameCenterUpdateDownloader.SelectedClient">
            <summary>
            The path to the root client folder (World_of_Tanks), for example
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.GameCenterUpdateDownloader.GameInfoXml">
            <summary>
            The name of the game info xml to get some of the php properties from
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.GameCenterUpdateDownloader.MetaDataXml">
            <summary>
            The name of the metadata xml to get some of the php properties from
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.GameCenterUpdateDownloader.GameMetadataFolder">
            <summary>
            The name of the folder where the metadata xml file is stored
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.GameCenterUpdateDownloader.WgcNotificationsXml">
            <summary>
            The Wargaming game center xml file containing the app_id
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.GameCenterUpdateDownloader.WgcVersionXml">
            <summary>
            The wargaming game center xml file containing the application version
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.GameCenterUpdateDownloader.WgcProcessName">
            <summary>
            The name of the Game center process shown in windows
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.GameCenterUpdateDownloader.#ctor">
            <summary>
            Create an instance of the GameCenterUpdateDownloaded window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.GameCenterUpdateDownloader.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.NewsViewer">
            <summary>
            Interaction logic for NewsViewer.xaml
            </summary>
            <summary>
            NewsViewer
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.NewsViewer.#ctor">
            <summary>
            Create an instance of the NewsViewer window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.NewsViewer.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.PopOutReplacePatchDesigner">
            <summary>
            Interaction logic for PopOutReplacePatchDesigner.xaml
            </summary>
            <summary>
            PopOutReplacePatchDesigner
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.PopOutReplacePatchDesigner.#ctor">
            <summary>
            Create an instance of the PopOutReplacePatchDesigner Window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.PopOutReplacePatchDesigner.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.RelhaxColorPicker">
            <summary>
            Interaction logic for RelhaxColorPicker.xaml
            </summary>
            <summary>
            RelhaxColorPicker
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.RelhaxColorPicker.#ctor">
            <summary>
            Create an instance of the RelhaxColorPicker window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.RelhaxColorPicker.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.AdvancedProgress">
            I exist as a branch
             <summary>
             Interaction logic for Window1.xaml
             </summary>
            <summary>
            AdvancedProgress
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.AdvancedProgress.#ctor">
            <summary>
            Create and initialize the AdvancedProgress window
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AdvancedProgress.ShouldUserInstallBeCalled">
            <summary>
            Flag for if the user installation reporter should have been called
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AdvancedProgress.BackupModsReporter">
            <summary>
            The UI Reporting object for the step of backing up mods
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AdvancedProgress.BackupDataClearCacheClearLogsReporter">
            <summary>
            The UI Reporting object for the steps of backing up data, clearing cache, and clearing logs
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AdvancedProgress.CleanModsReporter">
            <summary>
            The UI Reporting object for the step of cleaning mods
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AdvancedProgress.ExtractionModsReporters">
            <summary>
            The UI Reporting object for the step of extracting mods
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AdvancedProgress.ExtractionUserModsReporter">
            <summary>
            The UI Reporting object for the step of extracting user mods
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AdvancedProgress.RestoreDataXmlUnpackReporter">
            <summary>
            The UI Reporting object for the step of unpacking xml files
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AdvancedProgress.PatchReporter">
            <summary>
            The UI Reporting object for the step of patching files
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AdvancedProgress.ShortcutsReporter">
            <summary>
            The UI Reporting object for the step of creating shortcuts
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AdvancedProgress.AtlasReporter">
            <summary>
            The UI Reporting object for the step of Creating atlas files
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AdvancedProgress.FontInstallTrimDownloadCacheCleanupReporter">
            <summary>
            The UI Reporting object for the step of font install, trimming download cache, and cleanup
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.AdvancedProgress.OnReportAdvancedProgress(RelhaxModpack.UIComponents.RelhaxInstallerProgress)">
            <summary>
            Update the advanced progress UI objects
            </summary>
            <param name="progress">The progress report object</param>
        </member>
        <member name="M:RelhaxModpack.Windows.AdvancedProgress.ToggleComplete(RelhaxModpack.UIComponents.RelhaxInstallTaskReporter)">
            <summary>
            Toggle a reporting task to the complete state
            </summary>
            <param name="reporter">The task to toggle</param>
        </member>
        <member name="M:RelhaxModpack.Windows.AdvancedProgress.ToggleError(RelhaxModpack.UIComponents.RelhaxInstallTaskReporter)">
            <summary>
            Toggle a reporting task to the error state
            </summary>
            <param name="reporter">The task to toggle</param>
        </member>
        <member name="M:RelhaxModpack.Windows.AdvancedProgress.ToggleComplete(RelhaxModpack.InstallerComponents.InstallerExitCodes)">
            <summary>
            Toggle a reporting task to the complete state
            </summary>
            <param name="exitCode">The reporter of this corresponding install step</param>
            <remarks>If the task reporter is null, it won't throw a NullRefrenceException</remarks>
        </member>
        <member name="M:RelhaxModpack.Windows.AdvancedProgress.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.AddPicturesZip">
            <summary>
            Interaction logic for AddPicturesZip.xaml
            </summary>
            <summary>
            AddPicturesZip
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.AddPicturesZip.#ctor">
            <summary>
            Create and initialize the AddPicturesZip window
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AddPicturesZip.FilesToAddalways">
            <summary>
            A list of files to add for any diagnostic bug report
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.AddPicturesZip.FilesToAddList">
            <summary>
            FilesToAddList Name Field
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.AddPicturesZip.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.DatabaseEditor">
            <summary>
            Interaction logic for DatabaseEditor.xaml
            </summary>
            <summary>
            DatabaseEditor
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DatabaseEditor.LaunchedFromMainWindow">
            <summary>
            Indicates if this editor instance was launched from the MainWindow or from command line
            </summary>
            <remarks>This changes the behavior of the logging for the editor</remarks>
        </member>
        <member name="M:RelhaxModpack.Windows.DatabaseEditor.#ctor">
            <summary>
            Create an instance of the DatabaseEditor
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.DatabaseEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.EditorUploadDownloadEventArgs">
            <summary>
            Event args returned to the editor for when an FTP upload or download is complete
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.EditorUploadDownloadEventArgs.Package">
            <summary>
            The package that was just uploaded
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.EditorUploadDownloadEventArgs.UploadedFilename">
            <summary>
            The path to the file that was uploaded or downloaded
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.EditorUploadDownloadEventArgs.UploadedFilepathOnline">
            <summary>
            The FTP path to the field that was uploaded or downloaded
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.EditorUploadDownloadClosed">
            <summary>
            The delegate for invocation of when the FTP upload or download finishes
            </summary>
            <param name="sender">The sending object</param>
            <param name="e">The Upload or download event arguments</param>
        </member>
        <member name="T:RelhaxModpack.Windows.DatabaseEditorDownload">
            <summary>
            Interaction logic for DatabaseEditorDownload.xaml
            </summary>
            <summary>
            DatabaseEditorDownload
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DatabaseEditorDownload.ZipFilePathDisk">
            <summary>
            The path to the zip file on the disk
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DatabaseEditorDownload.ZipFilePathOnline">
            <summary>
            The FTP path to the zip file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DatabaseEditorDownload.ZipFileName">
            <summary>
            The complete name of the Zip file
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DatabaseEditorDownload.Credential">
            <summary>
            The FTP credentials
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DatabaseEditorDownload.Upload">
            <summary>
            Flag to indicate upload or download. True is upload, false is download
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DatabaseEditorDownload.PackageToUpdate">
            <summary>
            The package being updated. A null package with Upload=true indicates the item being uploaded is a media
            </summary>
        </member>
        <member name="E:RelhaxModpack.Windows.DatabaseEditorDownload.OnEditorUploadDownloadClosed">
            <summary>
            The event callback used for the editor when an upload or download is finished
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DatabaseEditorDownload.Countdown">
            <summary>
            The timeout, in seconds, until the window will automatically close
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.DatabaseEditorDownload.#ctor">
            <summary>
            Create an instance of the DatabaseEditorDownlaod class
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.DatabaseEditorDownload.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.DatabaseUpdater">
            <summary>
            Interaction logic for DatabaseUpdater.xaml
            </summary>
            <summary>
            DatabaseUpdater
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.DatabaseUpdater.HardCodeRepoPath">
            <summary>
            The current path for Willster419's database repository
            </summary>
            <remarks>
            This was done because the database repository is different then the application repository.
            During debug, this can be set to have the updater (in the repository path) assume that it's in the database repository.
            </remarks>
        </member>
        <member name="F:RelhaxModpack.Windows.DatabaseUpdater.UseHardCodePath">
            <summary>
            Flag to use the 
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.DatabaseUpdater.#ctor">
            <summary>
            Create an instance of the DatabaseUpdater window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.DatabaseUpdater.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.InstallFinished">
            <summary>
            Interaction logic for InstallFinished.xaml
            </summary>
            <summary>
            InstallFinished
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.InstallFinished.#ctor">
            <summary>
            Create an instance of the InstallFinished window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.InstallFinished.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.SelectionListEventArgs">
            <summary>
            Event arguments for when the selection list is closed
            </summary>
            <remarks>See https://stackoverflow.com/questions/623451/how-can-i-make-my-own-event-in-c </remarks>
        </member>
        <member name="F:RelhaxModpack.Windows.SelectionListEventArgs.ContinueInstallation">
            <summary>
            If the installation should be continued or if the user canceled
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.SelectionListEventArgs.ParsedCategoryList">
            <summary>
            The list of categories
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.SelectionListEventArgs.Dependencies">
            <summary>
            The list of dependencies
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.SelectionListEventArgs.GlobalDependencies">
            <summary>
            The list of global dependencies
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.SelectionListEventArgs.UserMods">
            <summary>
            The list of use mods
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.SelectionListClosedDelegate">
            <summary>
            The delegate to invoke when calling back to the sender for the SelectionClosed event
            </summary>
            <param name="sender">The sender (this)</param>
            <param name="e">The event arguments to send to the installer (MainWindow)</param>
        </member>
        <member name="T:RelhaxModpack.Windows.SelectionPropagationDirection">
            <summary>
            The UI checked propagation directions
            </summary>
            <remarks>When a UI package element is checked, it needs to propagate the checked behavior up or down to prevent an invalid selection</remarks>
        </member>
        <member name="F:RelhaxModpack.Windows.SelectionPropagationDirection.PropagateUp">
            <summary>
            Up the higher parent levels
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.SelectionPropagationDirection.PropagateDown">
            <summary>
            Down to lower child levels
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.ModSelectionList">
            <summary>
            Interaction logic for ModSelectionList.xaml
            </summary>
            <summary>
            ModSelectionList
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.ModSelectionList.ParsedCategoryList">
            <summary>
            The list of categories
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.ModSelectionList.GlobalDependencies">
            <summary>
            The list of global dependencies
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.ModSelectionList.Dependencies">
            <summary>
            The list of dependencies
            </summary>
        </member>
        <member name="E:RelhaxModpack.Windows.ModSelectionList.OnSelectionListReturn">
            <summary>
            The event that a caller can subscribe to wait for when the selection window actually closes, with arguments for the installation
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.ModSelectionList.#ctor">
            <summary>
            Create an instance of the ModSelectionList window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.ModSelectionList.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.PatchDesigner">
            <summary>
            Interaction logic for PatchDesigner.xaml
            </summary>
            <summary>
            PatchDesigner
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.PatchDesigner.LaunchedFromMainWindow">
            <summary>
            Indicates if this editor instance was launched from the MainWindow or from command line
            </summary>
            <remarks>This changes the behavior of the logging for the editor</remarks>
        </member>
        <member name="M:RelhaxModpack.Windows.PatchDesigner.#ctor">
            <summary>
            Create an instance of the PatchDesigner window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.PatchDesigner.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.Preview">
            <summary>
            Interaction logic for Preview.xaml
            </summary>
            <summary>
            Preview
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.Preview.Package">
            <summary>
            The package with media elements to preview
            </summary>
        </member>
        <member name="F:RelhaxModpack.Windows.Preview.EditorMode">
            <summary>
            Sets if the preview was launched from the editor or from the selection list
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.Preview.#ctor">
            <summary>
            Create an instance of the Preview window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.Preview.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.ProgressIndicator">
            <summary>
            Interaction logic for ProgressIndicator.xaml
            </summary>
            <summary>
            ProgressIndicator
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.ProgressIndicator.ProgressMinimum">
            <summary>
            Gets or sets the minimum value of progress to display
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.ProgressIndicator.ProgressMaximum">
            <summary>
            Gets or sets the maximum value of progress to display
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.ProgressIndicator.Message">
            <summary>
            Gets or sets the progress message to display
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.ProgressIndicator.ProgressValue">
            <summary>
            Gets or sets the progress value to display
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.ProgressIndicator.#ctor">
            <summary>
            Creates an instance of the ProgressIndicator class
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.ProgressIndicator.UpdateProgress(System.Double)">
            <summary>
            Update the progress bar value
            </summary>
            <param name="percent">The progress report from minimum to maximum</param>
        </member>
        <member name="M:RelhaxModpack.Windows.ProgressIndicator.UpdateProgress(System.Double,System.String)">
            <summary>
            Update the progress bar and message values
            </summary>
            <param name="percent">The progress report from minimum to maximum</param>
            <param name="updatedmessage">The message to display</param>
        </member>
        <member name="M:RelhaxModpack.Windows.ProgressIndicator.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.RelhaxWindow">
            <summary>
            Defines a window with translation and custom UI color
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.RelhaxWindow.LocalizeWindow">
            <summary>
            Controls if the window should have translation applied
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.RelhaxWindow.ApplyToolTips">
            <summary>
            Controls if the window should have tool tips applied
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.RelhaxWindow.ApplyColorSettings">
            <summary>
            Controls if the window should have color settings applied
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.RelhaxWindow.ApplyScaling">
            <summary>
            Controls if the window should apply scaling values set from the main window
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.RelhaxWindow.OriginalWidth">
            <summary>
            The original Width and Height of the window before scaling
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.RelhaxWindow.OriginalHeight">
            <summary>
            The original Width and Height of the window before scaling
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.RelhaxWindow.#ctor">
            <summary>
            Creates an instance of the RelhaxWindow class
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.ScalingConfirmation">
            <summary>
            Interaction logic for ScalingConfirmation.xaml
            </summary>
            <summary>
            ScalingConfirmation
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.ScalingConfirmation.#ctor">
            <summary>
            Create an instance of the ScalingConfirmation window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.ScalingConfirmation.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.TemplateWindow">
            <summary>
            Interaction logic for TemplateWindow.xaml
            </summary>
            <summary>
            TemplateWindow
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.TemplateWindow.#ctor">
            <summary>
            Create an instance of TemplateWindow
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.TemplateWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.VersionInfo">
            <summary>
            Interaction logic for VersionInfo.xaml
            </summary>
            <summary>
            VersionInfo
            </summary>
        </member>
        <member name="P:RelhaxModpack.Windows.VersionInfo.ConfirmUpdate">
            <summary>
            Gets if the user selected to accept the update
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.VersionInfo.#ctor">
            <summary>
            Create an instance of the VersionInfo class
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.VersionInfo.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Windows.AutoUpdateFilesInspector">
            <summary>
            Interaction logic for Window1.xaml
            </summary>
            <summary>
            AutoUpdateFilesInspector
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.AutoUpdateFilesInspector.#ctor">
            <summary>
            Create and instance of the AutoUpdateFilesInspector Window
            </summary>
        </member>
        <member name="M:RelhaxModpack.Windows.AutoUpdateFilesInspector.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.CiInfo">
            <summary>Info about the continuous integration server build that produced this binary.</summary> 
        </member>
        <member name="F:RelhaxModpack.CiInfo.BuildTag">
            <summary>String of the build number and build date/time, and other useful info.</summary> 
        </member>
        <member name="T:RelhaxModpack.PatchExitCode">
            <summary>
            Exit codes during a patch operation
            </summary>
        </member>
        <member name="F:RelhaxModpack.PatchExitCode.Success">
            <summary>
            The patch operation succeeded
            </summary>
        </member>
        <member name="F:RelhaxModpack.PatchExitCode.Warning">
            <summary>
            The patch operation succeeded, but with warnings
            </summary>
        </member>
        <member name="F:RelhaxModpack.PatchExitCode.Error">
            <summary>
            The patch operation did not succeeded
            </summary>
        </member>
        <member name="T:RelhaxModpack.PatchUtils">
            <summary>
            A class for handling patch operations
            </summary>
        </member>
        <member name="M:RelhaxModpack.PatchUtils.RunPatch(RelhaxModpack.Patch)">
            <summary>
            Run a patch operation
            </summary>
            <param name="p">The patch instructions object</param>
            <returns>The operation exit code</returns>
        </member>
        <member name="M:RelhaxModpack.PatchUtils.XMLPatch(RelhaxModpack.Patch)">
            <summary>
            Run an XML patch operation
            </summary>
            <param name="p">The patch instructions object</param>
            <returns>The operation exit code</returns>
        </member>
        <member name="M:RelhaxModpack.PatchUtils.RegxPatch(RelhaxModpack.Patch,System.Int32[])">
            <summary>
            Run a regex patch operation
            </summary>
            <param name="p">The patch instructions object</param>
            <param name="lines">The lines to patch on the file.</param>
            <returns>The operation exit code</returns>
            <remarks>Can be used to "batch patch" an xml or json file. See Database examples.
            Use -1 to indicate the whole file is being patched. Use 0 to check every line.</remarks>
        </member>
        <member name="M:RelhaxModpack.PatchUtils.JsonPatch(RelhaxModpack.Patch)">
            <summary>
            Run a Json patch operation
            </summary>
            <param name="p">The patch instructions object</param>
            <returns>The operation exit code</returns>
        </member>
        <member name="M:RelhaxModpack.PatchUtils.GetXvmFolderName">
            <summary>
            Gets the absolute path to the Xvm configuration folder
            </summary>
            <returns>The absolute path of the Xvm configuration folder if it exists, otherwise returns "default"</returns>
        </member>
        <member name="T:RelhaxModpack.PatientWebClient">
            <summary>
            A WebClient that allows the use to set a custom timeout value
            </summary>
        </member>
        <member name="P:RelhaxModpack.PatientWebClient.Timeout">
            <summary>
            Get or set the length of time, in milliseconds, until the operation will timeout
            </summary>
        </member>
        <member name="M:RelhaxModpack.PatientWebClient.GetWebRequest(System.Uri)">
            <summary>
            Set the URL to get the request data from
            </summary>
            <param name="uri">The website URL</param>
            <returns>The WebRequest object</returns>
            <remarks>Overrides the GetWebRequest() method to expose the WebRequest object. In doing so, you can set a custom timeout.</remarks>
        </member>
        <member name="T:RelhaxModpack.Languages">
            <summary>
            List of all supported Languages in the modpack
            </summary>
        </member>
        <member name="F:RelhaxModpack.Languages.English">
            <summary>
            The English language
            </summary>
        </member>
        <member name="F:RelhaxModpack.Languages.German">
            <summary>
            The German language
            </summary>
        </member>
        <member name="F:RelhaxModpack.Languages.Polish">
            <summary>
            The Polish language
            </summary>
        </member>
        <member name="F:RelhaxModpack.Languages.French">
            <summary>
            The French language
            </summary>
        </member>
        <member name="F:RelhaxModpack.Languages.Spanish">
            <summary>
            The Spanish language
            </summary>
        </member>
        <member name="F:RelhaxModpack.Languages.Russian">
            <summary>
            The Russian language
            </summary>
        </member>
        <member name="T:RelhaxModpack.Translations">
            <summary>
            Handles all localization for the application User Interface
            </summary>
        </member>
        <member name="P:RelhaxModpack.Translations.TranslationsLoaded">
            <summary>
            Get if the translation dictionaries have been loaded yet
            </summary>
        </member>
        <member name="F:RelhaxModpack.Translations.LanguageEnglish">
            <summary>
            English language string identifier in national language
            </summary>
        </member>
        <member name="F:RelhaxModpack.Translations.LanguagePolish">
            <summary>
            Polish language string identifier in national language
            </summary>
        </member>
        <member name="F:RelhaxModpack.Translations.LanguageGerman">
            <summary>
            German language string identifier in national language
            </summary>
        </member>
        <member name="F:RelhaxModpack.Translations.LanguageFrench">
            <summary>
            French language string identifier in national language
            </summary>
        </member>
        <member name="F:RelhaxModpack.Translations.LanguageSpanish">
            <summary>
            Spanish language string identifier in national language
            </summary>
        </member>
        <member name="F:RelhaxModpack.Translations.LanguageRussian">
            <summary>
            Russian language string identifier in national language
            </summary>
        </member>
        <member name="M:RelhaxModpack.Translations.SetLanguage(RelhaxModpack.Languages)">
            <summary>
            Sets the language dictionary to use when returning a localized string
            </summary>
            <param name="language">The language to switch to</param>
        </member>
        <member name="M:RelhaxModpack.Translations.GetLanguageNativeName(RelhaxModpack.Languages)">
            <summary>
            Get the native language name of the english enumerated name of the language
            </summary>
            <param name="language">The english-named enumeration of the language</param>
            <returns>The name of the requested language in it's native language</returns>
        </member>
        <member name="M:RelhaxModpack.Translations.GetTranslatedString(System.String)">
            <summary>
            Get a localized string in the currently selected language
            </summary>
            <param name="componentName">The key value of the string phrase</param>
            <returns></returns>
        </member>
        <member name="M:RelhaxModpack.Translations.Exists(System.String,System.Boolean)">
            <summary>
            Determines if a key exists in the currently selected language, or in english if no language is selected
            </summary>
            <param name="componentName">The key of the component to look up</param>
            <param name="logError">Flag to log an error in the logfile if it does not exist</param>
            <returns>True if it exists in the currently selected language, or false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Translations.Exists(System.String,RelhaxModpack.Languages,System.Boolean)">
            <summary>
            Checks is a component (key value) exists in the given language (dictionary)
            </summary>
            <param name="componentName">The keyword phrase to check</param>
            <param name="languageToCheck">The language dictionary to check in</param>
            <param name="logError">Flag for if to log if the component was not found</param>
        </member>
        <member name="M:RelhaxModpack.Translations.LocalizeWindow(System.Windows.Window,System.Boolean)">
            <summary>
            Applies localized text translations for the passed in window
            See the comments in the method for more information
            </summary>
            <param name="window">The window to apply translations to</param>
            <param name="applyToolTips">Set to true to seach and apply tooltips to the components</param>
        </member>
        <member name="M:RelhaxModpack.Translations.LoadTranslations">
            <summary>
            Loads all translation dictionaries. Should only be done once (at application start)
            </summary>
        </member>
        <member name="T:RelhaxModpack.ReplacementTypes">
            <summary>
            The types of text macro replacements
            </summary>
        </member>
        <member name="F:RelhaxModpack.ReplacementTypes.FilePath">
            <summary>
            Replacing macros with file paths
            </summary>
        </member>
        <member name="F:RelhaxModpack.ReplacementTypes.PatchArguementsReplace">
            <summary>
            Replacing patch arguments of the patch object
            </summary>
        </member>
        <member name="F:RelhaxModpack.ReplacementTypes.PatchFiles">
            <summary>
            Replacing modpack created macros (like [quote]) with the corresponding characters
            </summary>
        </member>
        <member name="F:RelhaxModpack.ReplacementTypes.TextEscape">
            <summary>
            Replacing literal interpretations of special characters like newline and tab with escaped versions
            </summary>
        </member>
        <member name="F:RelhaxModpack.ReplacementTypes.TextUnescape">
            <summary>
            Replacing escaped versions of special characters like newline and tab with the literal interpretations
            </summary>
        </member>
        <member name="F:RelhaxModpack.ReplacementTypes.ZipFilePath">
            <summary>
            Replacing zip path macros with absolute extraction paths
            </summary>
        </member>
        <member name="T:RelhaxModpack.DatabaseBeforeAfter">
            <summary>
            Allows the old and new versions of a SelectablePackage to be saved temporarily for comparing differences between two database structures
            </summary>
        </member>
        <member name="F:RelhaxModpack.DatabaseBeforeAfter.Before">
            <summary>
            The package reference for the database before changes
            </summary>
        </member>
        <member name="F:RelhaxModpack.DatabaseBeforeAfter.After">
            <summary>
            The package reference for the database after changes
            </summary>
        </member>
        <member name="T:RelhaxModpack.VersionInfos">
            <summary>
            A structure object to contain the WoT client version and online folder version. Allows for LINQ searching
            </summary>
        </member>
        <member name="F:RelhaxModpack.VersionInfos.WoTClientVersion">
            <summary>
            The WoT client version e.g. 1.5.1.3
            </summary>
        </member>
        <member name="F:RelhaxModpack.VersionInfos.WoTOnlineFolderVersion">
            <summary>
            The online folder number (major game version) that contains the game zip files
            </summary>
        </member>
        <member name="M:RelhaxModpack.VersionInfos.ToString">
            <summary>
            Overrides the ToString() function to display the two properties
            </summary>
            <returns>Displays the WoTClientVersion and WoTOnlineFolderVersion</returns>
        </member>
        <member name="T:RelhaxModpack.RegistrySearch">
            <summary>
            A structure to help with searching for inside the registry by providing a base area to start, and a string search path
            </summary>
        </member>
        <member name="F:RelhaxModpack.RegistrySearch.Root">
            <summary>
            Where to base the search in the registry (current_user, local_machiene, etc.)
            </summary>
        </member>
        <member name="F:RelhaxModpack.RegistrySearch.Searchpath">
            <summary>
            The absolute folder path to the desired registry entries
            </summary>
        </member>
        <member name="T:RelhaxModpack.Utils">
            <summary>
            A utility class for static functions used in various places in the modpack
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utils.TO_SECONDS">
            <summary>
            Multiply by this value to convert milliseconds to seconds
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utils.TO_MINUETS">
            <summary>
            Multiply by this value to convert seconds to minuets
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utils.SizeSuffixes">
            <summary>
            A list of file size constructs from bytes to Yotabytes
            </summary>
            <remarks>{ "bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB" }</remarks>
        </member>
        <member name="F:RelhaxModpack.Utils.BYTES_TO_MBYTES">
            <summary>
            Multiply by this to convert bytes to megabytes
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utils.MSVCPLink">
            <summary>
            The link to the Microsoft Visual C++ dll package required by the atlas processing libraries
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utils.FilePathDict">
            <summary>
            The dictionary to store filepath macros
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utils.PatchArguementsReplaceDict">
            <summary>
            The dictionary to store patch argument (replace) macros
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utils.PatchFilesDict">
            <summary>
            The dictionary to store patch file replacement macros
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utils.TextUnscapeDict">
            <summary>
            The dictionary to store escaped text characters with the literal versions
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utils.TextEscapeDict">
            <summary>
            The dictionary to store literal versions of characters with their escaped versions
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utils.PatchJsonNullEscape">
            <summary>
            Provides the ability to insert a 'null' value into json configurations
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utils.FreeImageLibrary">
            <summary>
            The manager instance of the FreeImage Library
            </summary>
        </member>
        <member name="F:RelhaxModpack.Utils.NvTexLibrary">
            <summary>
            The manager instance of the Nvidia Texture Tools Library
            </summary>
        </member>
        <member name="M:RelhaxModpack.Utils.TestLibrary(RelhaxModpack.AtlasesCreator.IRelhaxUnmanagedLibrary,System.String,System.Boolean)">
            <summary>
            Test the ability to load an unmanaged library
            </summary>
            <returns>True if library loaded, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.TestLoadAtlasLibraries(System.Boolean)">
            <summary>
            Test the ability to load and unload all the atlas image processing libraries
            </summary>
            <returns>True if both libraries loaded, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.GetAssemblyName(System.String)">
            <summary>
            Get a complete assembly name based on a matching keyword
            </summary>
            <param name="keyword">The keyword to match</param>
            <returns>The first matching assembly name, or null if no matches</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.GetApplicationVersion">
            <summary>
            Return the entire assembly version
            </summary>
            <returns>The entire assembly version string (major, minor, build, revision)</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.GetCompileTime">
            <summary>
            Return the date and time in EN-US form, the time that the application was built
            </summary>
            <returns>the application build date and time in EN-US form</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.GetManagerInfoDocumentAsync(System.Boolean)">
            <summary>
            Get the XmlDocument object of the managerInfo zip file
            </summary>
            <param name="overwrite">If the managerInfo zip file should be force refreshed</param>
            <returns>An xmlDocument object of manager_version.xml</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.GetManagerInfoZipfileAsync(System.Boolean)">
            <summary>
            Download and store the latest managerInfo zip file
            </summary>
            <param name="overwrite">Set to true to force a download of the latest version</param>
            <returns>The mangerInfo zip file in the Ionic.Zipfile object</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.IsManagerUptoDate(System.String)">
            <summary>
            Compares if the current application version is the same as the version checked from online
            </summary>
            <param name="currentVersion">The string representation of the latest modpack application version</param>
            <returns>True if the manager string versions are the same, false otherwise</returns>
            <remarks>IsManagerUptoDate will return false if it fails to get the latest managerInfo zip file</remarks>
        </member>
        <member name="M:RelhaxModpack.Utils.GetAllWindowComponentsVisual(System.Windows.Window,System.Boolean)">
            <summary>
            Get a list of all visual components in the window
            </summary>
            <param name="window">The window to get the list of</param>
            <param name="includeWindow">if the list should include the window itself</param>
            <returns>A list of type FrameowrkElement of all components</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.GetAllWindowComponentsLogical(System.Windows.Window,System.Boolean)">
            <summary>
            Get a list of all logical components in the window
            </summary>
            <param name="window">The window to get the list of</param>
            <param name="includeWindow">if the list should include the window itself</param>
            <returns>A list of type FrameowrkElement of all components</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.GetAllWindowComponentsLogical(System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Get a list of all logical components in the window
            </summary>
            <param name="rootElement">The element to get the list of logical items from</param>
            <param name="addRoot">If this rootElement should be added to the list</param>
            <returns></returns>
        </member>
        <member name="M:RelhaxModpack.Utils.PointWithinScreen(System.Int32,System.Int32)">
            <summary>Checks if a point is inside the possible monitor space</summary>
            <param name="x">The x coordinate of the point</param>
            <param name="y">The y coordinate of the point</param>
        </member>
        <member name="M:RelhaxModpack.Utils.PointWithinScreen(System.Drawing.Point)">
            <summary>Checks if a point is inside the possible monitor space</summary>
            <param name="p">The point to check</param>
        </member>
        <member name="M:RelhaxModpack.Utils.AllowUIToUpdate">
            <summary>
            Injects a Dispatcher frame followed by an idle backgrouned operation to allow for the UI to update during an intensive operation on the UI thread
            </summary>
            <remarks>See https://stackoverflow.com/questions/37787388/how-to-force-a-ui-update-during-a-lengthy-task-on-the-ui-thread 
            <para>and https://stackoverflow.com/questions/2329978/the-calling-thread-must-be-sta-because-many-ui-components-require-this</para></remarks>
        </member>
        <member name="M:RelhaxModpack.Utils.ApplyApplicationScale(System.Windows.Window,System.Double)">
            <summary>
            Applies vector based application scaling to the specified window
            </summary>
            <param name="window">The window to apply scaling to</param>
            <param name="scaleValue">The amount of scaling, in a multiplication factor, to apply to the window from</param>
        </member>
        <member name="M:RelhaxModpack.Utils.CreateMD5Hash(System.String)">
            <summary>
            Creates an MD5 hash calculation of the input file
            </summary>
            <param name="inputFile">The path to the file to calculate</param>
            <returns></returns>
        </member>
        <member name="M:RelhaxModpack.Utils.CreateMD5HashAsync(System.String)">
            <summary>
            Creates an MD5 hash calculation of the input file
            </summary>
            <param name="inputFile">The path to the file to calculate</param>
            <returns></returns>
        </member>
        <member name="M:RelhaxModpack.Utils.GetStringFromZip(System.String,System.String,System.String)">
            <summary>
            Gets a zip file entry in the form of a string
            </summary>
            <param name="zipFilename">The path to the file in the zip</param>
            <param name="archivedFilename">the path to the zip file</param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:RelhaxModpack.Utils.GetStringFromZip(Ionic.Zip.ZipFile,System.String,System.String)">
            <summary>
            Gets the string contents of a text based file inside a zip file
            </summary>
            <param name="zip">The zipfile to extract the entry from</param>
            <param name="archivedFilename">The archive path to the entry</param>
            <param name="password">The password to use when extracting the entry. Leave blank for no password</param>
            <returns></returns>
        </member>
        <member name="M:RelhaxModpack.Utils.ProcessEmptyDirectories(System.String,System.Boolean,System.UInt32,System.UInt32)">
            <summary>
            Deletes any empty directories from a given path
            </summary>
            <param name="startLocation">The location to start from. Includes deleting empty directories from this point</param>
            <param name="recursive">Toggle to check inside the starting location for empty folders</param>
            <param name="numRetrys">The number of times the method should retry after receiving an exception</param>
            <param name="timeout">The time to wait between retries</param>
            <returns>True if the operation completed successfully, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.SizeSuffix(System.UInt64,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Calculates and returns the size magnitude of the file (kilo, mega, giga...)
            </summary>
            <param name="value">The file size in bytes</param>
            <param name="decimalPlaces">The number of decimal places to maintain in the result</param>
            <param name="sizeSuffix">If it should return the byte symbol with the size amount (KB, MB, etc.)</param>
            <param name="ignoreSizeWarningIf0">If set to true, the application log will not show values about the passed in value for size calculation being 0. 
            File of 0 size, for example.</param>
            <returns>The string representation to decimalPlaces of the file size optionally with the bytes parameter</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.GetFilesize(System.String)">
            <summary>
            Gets the size of the file in bytes
            </summary>
            <param name="filepath">The string path to the file</param>
            <returns>The size of the file in bytes</returns>
            <remarks>This is a wrapper for the FileInfo.Length property</remarks>
        </member>
        <member name="M:RelhaxModpack.Utils.GetValidFilename(System.String)">
            <summary>
            Checks if a filename has invalid characters and replaces them with underscores
            </summary>
            <param name="fileName">The filename to replace characters from</param>
            <returns>The filename with valid characters</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.FileDelete(System.String,System.UInt32,System.UInt32)">
            <summary>
            Tries to delete a file from the given path
            </summary>
            <param name="file">The file to delete</param>
            <param name="numRetrys">The number of retires if an exception is encountered</param>
            <param name="timeout">The number of milliseconds between retries</param>
            <returns>True is the file operation was successful, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.DirectoryDelete(System.String,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.String)">
            <summary>
            Deletes files in a directory
            </summary>
            <param name="folderPath">The directory to delete files in</param>
            <param name="deleteSubfolders">Toggle if the method should recursively look inside directory</param>
            <param name="deleteRoot">Toggle if the method should delete the folderPath directory</param>
            <param name="numRetrys">The number of retires to delete a file entry before failing</param>
            <param name="timeout">The time in milliseconds between retries</param>
            <param name="pattern">The pattern of files to search for in a directory</param>
            <returns>True if the complete operation was a success, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.DirectoryDeleteAsync(System.String,System.Boolean,System.Boolean,System.UInt32,System.UInt32,System.String)">
            <summary>
            Async wrapper around DirectoryDelete() method. Deletes files in a directory
            </summary>
            <param name="folderPath">The directory to delete files in</param>
            <param name="deleteSubfolders">Toggle if the method should recursively look inside directory</param>
            <param name="deleteRoot">Toggle if the method should delete the folderPath directory</param>
            <param name="numRetrys">The number of retires to delete a file entry before failing</param>
            <param name="timeout">The time in milliseconds between retries</param>
            <param name="pattern">The pattern of files to search for in a directory</param>
            <returns>True if the complete operation was a success, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.DirectoryMove(System.String,System.String,System.Boolean,System.UInt32,System.UInt32,System.String)">
            <summary>
            Move a directory and its files to a new location. Works across drive letters.
            </summary>
            <param name="source">The source path of the directory to move from</param>
            <param name="destination">The destination path of the directory to move to</param>
            <param name="recursive">Toggle if the sub-folders and files should be moved as well</param>
            <param name="numRetrys">The number of retires to delete a file entry before failing</param>
            <param name="timeout">The time in milliseconds between retries</param>
            <param name="pattern">The pattern of files to search for in a directory</param>
            <remarks>The DirectoryMove method works across drive letters and other physical separate drives because it deletes and re-creates folders rather then trying to move them</remarks>
        </member>
        <member name="M:RelhaxModpack.Utils.DirectoryCopy(System.String,System.String,System.Boolean,System.UInt32,System.UInt32,System.String)">
            <summary>
            Copy a directory and its files to a new location
            </summary>
            <param name="source">The source path of the directory to move from</param>
            <param name="destination">The destination path of the directory to move to</param>
            <param name="recursive">Toggle if the sub-folders and files should be moved as well</param>
            <param name="numRetrys">The number of retires to delete a file entry before failing</param>
            <param name="timeout">The time in milliseconds between retries</param>
            <param name="pattern">The pattern of files to search for in a directory</param>
        </member>
        <member name="M:RelhaxModpack.Utils.DirectorySearch(System.String,System.IO.SearchOption,System.Boolean,System.String,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Return a list of files from a directory
            </summary>
            <param name="directoryPath">The directory to search for files</param>
            <param name="option">Specifies to search this top directory or subdirectories to the Directory.GetFiles() method</param>
            <param name="includeDirectoryRoot">Toggle if the directoryPath should be included in the list of files</param>
            <param name="searchPattern">The search pattern for finding files in a directory</param>
            <param name="numRetrys">The number of retires to delete a file entry before failing</param>
            <param name="timeout">The time in milliseconds between retries</param>
            <param name="applyFolderProperties">Toggle if the "Normal" file property as assigned to these files at the same time</param>
            <returns>The list of files if the search operation was successful, otherwise null</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.ApplyNormalFileProperties(System.String)">
            <summary>
            Applies the "Normal" file attribute to a file
            </summary>
            <param name="file">The file to apply normal attributes to</param>
        </member>
        <member name="M:RelhaxModpack.Utils.ParseBool(System.String,System.Boolean)">
            <summary>
            Try to parse a boolean value based on string input
            </summary>
            <param name="input">The string to try to parse</param>
            <param name="defaultValue">The default value to use if parsing fails</param>
            <returns>The bool value of the input string, or the default value if parsing fails</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.ParseBool(System.String,System.Boolean@,System.Boolean)">
            <summary>
            Try to parse a boolean value based on string input
            </summary>
            <param name="input">The string to try to parse</param>
            <param name="result">The result value</param>
            <param name="defaultValue">The default value for result, if parse fails</param>
            <returns>Returns if the TryParse() worked</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.ParseInt(System.String,System.Int32)">
            <summary>
            Try to parse an integer value based on string input
            </summary>
            <param name="input">The string to try to parse</param>
            <param name="defaultValue">The default value to use if parsing fails</param>
            <returns>The int value of the input string, or the default value if parsing fails</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.ParseInt(System.String,System.Int32@,System.Int32)">
            <summary>
            Try to parse an integer value based on string input
            </summary>
            <param name="input">The string to try to parse</param>
            <param name="result">The result value</param>
            <param name="defaultValue">The default value for result, if parse fails</param>
            <returns>Returns if the TryParse() worked</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.ParseFloat(System.String,System.Single)">
            <summary>
            Try to parse a float value based on string input
            </summary>
            <param name="input">The string to try to parse</param>
            <param name="defaultValue">The default value to use if parsing fails</param>
            <returns>The float value of the input string, or the default value if parsing fails</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.ParseFloat(System.String,System.Single@,System.Single)">
            <summary>
            Try to parse a float value based on string input
            </summary>
            <param name="input">The string to try to parse</param>
            <param name="result">The result value</param>
            <param name="defaultValue">The default value for result, if parse fails</param>
            <returns>Returns if the TryParse() worked</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.ParseLong(System.String,System.Int64)">
            <summary>
            Try to parse a long value based on string input
            </summary>
            <param name="input">The string to try to parse</param>
            <param name="defaultValue">The default value to use if parsing fails</param>
            <returns>The float value of the input string, or the default value if parsing fails</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.ParseLong(System.String,System.Int64@,System.Int64)">
            <summary>
            Try to parse a long value based on string input
            </summary>
            <param name="input">The string to try to parse</param>
            <param name="result">The result value</param>
            <param name="defaultValue">The default value for result, if parse fails</param>
            <returns>Returns if the TryParse() worked</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.ParseuLong(System.String,System.UInt64)">
            <summary>
            Try to parse an unsigned long value based on string input
            </summary>
            <param name="input">The string to try to parse</param>
            <param name="defaultValue">The default value to use if parsing fails</param>
            <returns>The float value of the input string, or the default value if parsing fails</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.ParseuLong(System.String,System.UInt64@,System.UInt64)">
            <summary>
            Try to parse an unsigned long value based on string input
            </summary>
            <param name="input">The string to try to parse</param>
            <param name="result">The result value</param>
            <param name="defaultValue">The default value for result, if parse fails</param>
            <returns>Returns if the TryParse() worked</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.ParseEnum``1(System.String,``0)">
            <summary>
            Tries to parse an enumeration of a given type
            </summary>
            <typeparam name="TEnum">The type of enumeration to parse as</typeparam>
            <param name="input">The input string to parse</param>
            <param name="defaultValue">The default value if the enumeration parse fails</param>
            <returns>The parsed or default enumeration value</returns>
            <remarks>see https://stackoverflow.com/questions/10685794/how-to-use-generic-tryparse-with-enum </remarks>
        </member>
        <member name="M:RelhaxModpack.Utils.CheckForDuplicates(System.Collections.Generic.List{RelhaxModpack.DatabasePackage},System.Collections.Generic.List{RelhaxModpack.Dependency},System.Collections.Generic.List{RelhaxModpack.Category},System.Collections.Generic.List{RelhaxModpack.Dependency})">
            <summary>
            Checks for any duplicate PackageName entries inside the provided lists
            </summary>
            <param name="globalDependencies">The list of global dependencies</param>
            <param name="dependencies">The list of dependencies</param>
            <param name="parsedCategoryList">The list of categories</param>
            <param name="logicalDependencies">The list of logical dependencies</param>
            <returns>A list of duplicate packages, or an empty list if no duplicates</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.IsDuplicateName(System.Collections.Generic.List{RelhaxModpack.DatabasePackage},System.String)">
            <summary>
            Checks if a packageName exists within a list of packages
            </summary>
            <param name="packagesToCheckWith">The list of packages to check inside</param>
            <param name="nameToCheck">The PackageName parameter to check</param>
            <returns>True if the nameToCheck exists in the list, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.SortDatabase(System.Collections.Generic.List{RelhaxModpack.Category})">
            <summary>
            Sorts the packages inside each Category object
            </summary>
            <param name="parsedCategoryList">The list of categories to sort</param>
        </member>
        <member name="M:RelhaxModpack.Utils.SortDatabase(System.Collections.Generic.List{RelhaxModpack.SelectablePackage},System.Boolean)">
            <summary>
            Sorts a list of packages
            </summary>
            <param name="packages">The list of packages to sort</param>
            <param name="recursive">If the list should recursively sort</param>
        </member>
        <member name="M:RelhaxModpack.Utils.BuildLinksRefrence(System.Collections.Generic.List{RelhaxModpack.Category},System.Boolean)">
            <summary>
            Links all the references (like parent, etc) for each class object making it possible to traverse the list tree in memory
            </summary>
            <param name="ParsedCategoryList">The List of categories</param>
            <param name="buildFakeParents">If the header parent SelectablePackage objects should be built as well</param>
        </member>
        <member name="M:RelhaxModpack.Utils.BuildLinksRefrence(RelhaxModpack.SelectablePackage,RelhaxModpack.Category,RelhaxModpack.SelectablePackage)">
            <summary>
            Links all the references (like parent, etc) for each class object making it possible to traverse the list tree in memory
            </summary>
            <param name="sp">The package to perform linking on</param>
            <param name="cat">The category that the SelectablePackagesp belongs to</param>
            <param name="parent">The tree parent of sp</param>
        </member>
        <member name="M:RelhaxModpack.Utils.BuildLevelPerPackage(System.Collections.Generic.List{RelhaxModpack.Category},System.Int32)">
            <summary>
            Assigns the level parameter to the packages based on how recursively deep they are in the package sub lists
            </summary>
            <param name="ParsedCategoryList">The list of assign package values to</param>
            <param name="startingLevel">The starting level to assign the level parameter</param>
        </member>
        <member name="M:RelhaxModpack.Utils.BuildLevelPerPackage(System.Collections.Generic.List{RelhaxModpack.SelectablePackage},System.Int32)">
            <summary>
            Assigns the level parameter to the packages based on how recursively deep they are in the package sub lists
            </summary>
            <param name="packages">The list of package values to</param>
            <param name="level">The level to assign the level parameter</param>
        </member>
        <member name="M:RelhaxModpack.Utils.CalculateDependencies(System.Collections.Generic.List{RelhaxModpack.Dependency},System.Collections.Generic.List{RelhaxModpack.SelectablePackage},System.Collections.Generic.List{RelhaxModpack.Category})">
            <summary>
            Calculates which packages and dependencies are dependent on other dependencies and if each dependency that is selected for install is enabled for installation
            </summary>
            <param name="dependencies">The list of dependencies</param>
            <param name="packages">The list of Selectable Packages</param>
            <param name="parsedCategoryList">The list of Categories</param>
            <returns>A list of calculated dependencies to install</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.CreateOrderedInstallList(System.Collections.Generic.List{RelhaxModpack.DatabasePackage})">
            <summary>
            Creates an array of DatabasePackage lists sorted by Installation groups i.e. list in array index 0 is packages of install group 0
            </summary>
            <param name="packagesToInstall"></param>
            <returns>The array of DatabasePackage lists</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.PropagateInstallGroupsPerLevel(System.Collections.Generic.List{RelhaxModpack.DatabasePackage})">
            <summary>
            Offsets the InstallGroup for a package by adding the group with the level parameter
            </summary>
            <param name="packagesToInstall">The list of package to perform the offset on</param>
        </member>
        <member name="M:RelhaxModpack.Utils.ClearSelections(System.Collections.Generic.List{RelhaxModpack.Category})">
            <summary>
            Clears all selections in the given lists by setting the checked properties to false
            </summary>
            <param name="ParsedCategoryList">The list of Categories</param>
        </member>
        <member name="M:RelhaxModpack.Utils.GetMaxInstallGroupNumber(System.Collections.Generic.List{RelhaxModpack.DatabasePackage})">
            <summary>
            Gets the maximum InstallGroup number from a list of Packages
            </summary>
            <param name="listToCheck">The list of DatabasePackages</param>
            <returns>The maximum InstallGroup number</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.GetMaxPatchGroupNumber(System.Collections.Generic.List{RelhaxModpack.DatabasePackage})">
            <summary>
            Gets the maximum PatchGroup number from a list of Packages
            </summary>
            <param name="listToCheck">The list of DatabasePackages</param>
            <returns>The maximum PatchGroup number</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.BitmapToImageSource(System.Drawing.Bitmap)">
            <summary>
            Converts a Bitmap object to a BitmapImage object
            </summary>
            <param name="bitmap">The Bitmap object to convert</param>
            <returns>The BitmapImage object</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.RandomString(System.Int32)">
            <summary>
            Creates a string of random characters
            </summary>
            <param name="length">The number of characters to create the random string</param>
            <returns>The random string</returns>
            <remarks>See https://stackoverflow.com/questions/1344221/how-can-i-generate-random-alphanumeric-strings-in-c </remarks>
        </member>
        <member name="M:RelhaxModpack.Utils.CompareVersions(System.String,System.String)">
            <summary>
            Compare versions of form "1,2,3,4" or "1.2.3.4". Throws FormatException
            in case of invalid version. See function comments for more informations and samples.
            </summary>
            <param name="strA">the first version</param>
            <param name="strB">the second version</param>
            <returns>less than zero if strA is less than strB, equal to zero if
            strA equals strB, and greater than zero if strA is greater than strB</returns>
            <remarks>
            See https://stackoverflow.com/questions/30494/compare-version-identifiers
            Samples:
            strA        | strB
            1.0.0.0     | 1.0.0.1 = -1
            1.0.0.1     | 1.0.0.0 =  1
            1.0.0.0     | 1.0.0.0 =  0
            1, 0.0.0    | 1.0.0.0 =  0
            9, 5, 1, 44 | 3.4.5.6 =  1
            1, 5, 1, 44 | 3.4.5.6 = -1
            6,5,4,3     | 6.5.4.3 =  0
            </remarks>
        </member>
        <member name="M:RelhaxModpack.Utils.GetCurrentUniversalFiletimeTimestamp">
            <summary>
            Gets the current time in the form of universal time
            </summary>
            <returns>the universal time of now</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.ConvertFiletimeTimestampToDate(System.Int64)">
            <summary>
            Converts a timestamp value to a string representation
            </summary>
            <param name="timestamp">The timestamp to convert</param>
            <returns>The string representation of the timestamp</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.Base64Encode(System.String)">
            <summary>
            Encode a plain text string into base64 UTF8 encoding
            </summary>
            <param name="plainText">The plain text string</param>
            <returns>The UTF8 base64 encoded version</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.Base64Decode(System.String)">
            <summary>
            Decode a base64 UTF8 encoded string into plain text
            </summary>
            <param name="base64EncodedData">The base64 stirng</param>
            <returns>The plain text version</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.GetProcess(System.String,System.String)">
            <summary>
            Checks if a process is running on the system
            </summary>
            <param name="processName">The name of the process</param>
            <param name="pathToMatch">(Optional) The directory that the process is running from</param>
            <returns>The Process object that matches, or null if no matches</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.IsProcessRunning(System.String,System.String)">
            <summary>
            Wrapper for IsProcessRunning() to return boolean type
            </summary>
            <param name="processName">The name of the process</param>
            <param name="pathToMatch">(Optional) The directory that the process is running from</param>
            <returns>True if match, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.GetFlatList(System.Collections.Generic.List{RelhaxModpack.DatabasePackage},System.Collections.Generic.List{RelhaxModpack.Dependency},System.Collections.Generic.List{RelhaxModpack.Dependency},System.Collections.Generic.List{RelhaxModpack.Category})">
            <summary>
            Returns a flat list of the given recursive lists, in the order that the parameters are stated
            </summary>
            <param name="globalDependnecies">The list of global dependences</param>
            <param name="dependencies">The list of dependencies</param>
            <param name="logicalDependencies">The list of logical dependencies</param>
            <param name="parsedCategoryList">The list of Categories</param>
            <returns>The flat list</returns>
            <remarks>In the case of Categories, the flat list has the sub-level packages added at the level of the parent</remarks>
        </member>
        <member name="M:RelhaxModpack.Utils.GetFlatSelectablePackageList(System.Collections.Generic.List{RelhaxModpack.Category})">
            <summary>
            Returns a flat list of the given recursive lists, in the order that the parameters are stated
            </summary>
            <param name="parsedCategoryList">The list of Categories</param>
            <returns>The flat list</returns>
            <remarks>In the case of Categories, the flat list has the sub-level packages added at the level of the parent</remarks>
        </member>
        <member name="M:RelhaxModpack.Utils.StartProcess(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Start a process
            </summary>
            <param name="startInfo">The ProcessStartInfo parameters object</param>
            <returns>True if process start was successful, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.StartProcess(System.String)">
            <summary>
            Start a process
            </summary>
            <param name="command">The entire command as a string style commandline</param>
            <returns>True if process start was successful, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.OpenInGoogleTranslate(System.String)">
            <summary>
            Opens the selected text in Google translate web page
            </summary>
            <param name="message">The text to translate</param>
            <returns></returns>
        </member>
        <member name="M:RelhaxModpack.Utils.BuildFilepathMacroList">
            <summary>
            Builds the Filepath macro dictionary with settings that should be parsed from the Settings class
            </summary>
        </member>
        <member name="M:RelhaxModpack.Utils.MacroReplace(System.String,RelhaxModpack.ReplacementTypes)">
            <summary>
            Performs a replacement of macros using the specified macro replace operation
            </summary>
            <param name="inputString">The string to replace the macros of</param>
            <param name="type">The type of macro replace operation</param>
            <returns>The replaced string</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.AutoFindWoTDirectory">
            <summary>
            Checks the registry to get the latest location of where WoT is installed
            </summary>
            <returns>True if operation success</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.GetRegistryKeys(RelhaxModpack.RegistrySearch)">
            <summary>
            Gets all registry keys that exist in the given search base and path
            </summary>
            <param name="search">The RegistrySearch structure to specify where to search and where to base the search</param>
            <returns>The RegistryKey object of the folder in registry, or null if the search failed</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.AutoFindWgcDirectory">
            <summary>
            Finds the location of the Wargaming Game center installation directory from the registry
            </summary>
            <returns>The location of wgc.exe if found, else null</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.CreateShortcut(RelhaxModpack.Shortcut,System.Text.StringBuilder)">
            <summary>
            Creates a shortcut on the user's desktop
            </summary>
            <param name="shortcut">The shortcut parameters</param>
            <param name="sb">The StringBuilder to log the path to the created file</param>
        </member>
        <member name="M:RelhaxModpack.Utils.Unpack(System.String,System.String,System.String)">
            <summary>
            Copies a file from one path or in an archive to a destination
            </summary>
            <param name="package">The zip archive to extract the file from</param>
            <param name="sourceCompletePath">The complete path to the file. Could be a path on disk, or a path in a zip archive</param>
            <param name="destinationCompletePath">The complete path to copy the destination file to</param>
        </member>
        <member name="M:RelhaxModpack.Utils.FTPMakeFolder(System.String,System.Net.ICredentials)">
            <summary>
            Create an FTP folder
            </summary>
            <param name="addressWithDirectory">The complete path to the folder to create</param>
            <param name="credentials">The FTP server credentials</param>
        </member>
        <member name="M:RelhaxModpack.Utils.FTPMakeFolderAsync(System.String,System.Net.ICredentials)">
            <summary>
            Create an FTP folder
            </summary>
            <param name="addressWithDirectory">The complete path to the folder to create</param>
            <param name="credentials">The FTP server credentials</param>
        </member>
        <member name="M:RelhaxModpack.Utils.FTPListFilesFolders(System.String,System.Net.ICredentials)">
            <summary>
            Get a list of files currently in an FTP folder
            </summary>
            <param name="address">The complete path to the FTP folder</param>
            <param name="credentials">The FTP server credentials</param>
            <returns>The list of files on the server, as well as the current directory "." and parent directory ".." characters</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.FTPListFilesFoldersAsync(System.String,System.Net.ICredentials)">
            <summary>
            Get a list of files currently in an FTP folder
            </summary>
            <param name="address">The complete path to the FTP folder</param>
            <param name="credentials">The FTP server credentials</param>
            <returns>The list of files on the server, as well as the current directory "." and parent directory ".." characters</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.FTPDeleteFile(System.String,System.Net.ICredentials)">
            <summary>
            Delete a file on an FTP server
            </summary>
            <param name="address">The complete path to the FTP file to delete</param>
            <param name="credentials">The FTP server credentials</param>
        </member>
        <member name="M:RelhaxModpack.Utils.FTPDeleteFileAsync(System.String,System.Net.ICredentials)">
            <summary>
            Delete a file on an FTP server
            </summary>
            <param name="address">The complete path to the FTP file to delete</param>
            <param name="credentials">The FTP server credentials</param>
        </member>
        <member name="M:RelhaxModpack.Utils.FTPGetFilesize(System.String,System.Net.ICredentials)">
            <summary>
            Get a file size of an FTP file
            </summary>
            <param name="address">The complete path to the FTP file</param>
            <param name="credentials">The FTP server credentials</param>
            <returns>The size of the file in bytes</returns>
        </member>
        <member name="M:RelhaxModpack.Utils.FTPGetFilesizeAsync(System.String,System.Net.ICredentials)">
            <summary>
            Get a file size of an FTP file
            </summary>
            <param name="address">The complete path to the FTP file</param>
            <param name="credentials">The FTP server credentials</param>
            <returns>The size of the file in bytes</returns>
        </member>
        <member name="T:RelhaxModpack.XmlLoadType">
            <summary>
            Xml document load type enumeration
            </summary>
        </member>
        <member name="F:RelhaxModpack.XmlLoadType.FromFile">
            <summary>
            loading Xml from a file on disk
            </summary>
        </member>
        <member name="F:RelhaxModpack.XmlLoadType.FromString">
            <summary>
            loading Xml from a text string
            </summary>
        </member>
        <member name="T:RelhaxModpack.DatabaseXmlVersion">
            <summary>
            The enumeration representations of the Xml database saving format
            </summary>
        </member>
        <member name="F:RelhaxModpack.DatabaseXmlVersion.Legacy">
            <summary>
            The Legacy format. All in one document
            </summary>
        </member>
        <member name="F:RelhaxModpack.DatabaseXmlVersion.OnePointOne">
            <summary>
            The 1.1 format. A root file, a file for the global and standard dependencies, and a file for each categories
            </summary>
        </member>
        <member name="T:RelhaxModpack.XmlUtils">
            <summary>
            Utility class for dealing with Xml features and functions
            </summary>
        </member>
        <member name="M:RelhaxModpack.XmlUtils.IsValidXml(System.String)">
            <summary>
            Check to make sure an Xml file is valid
            </summary>
            <param name="filePath">The path to the Xml file</param>
            <returns>True if valid Xml, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.XmlUtils.IsValidXml(System.String,System.String)">
            <summary>
            Check to make sure an Xml file is valid
            </summary>
            <param name="xmlString">The Xml text string</param>
            <param name="fileName">the name of the file, used for debugging purposes</param>
            <returns>True if valid Xml, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.XmlUtils.GetXmlStringFromXPath(System.String,System.String)">
            <summary>
            Get an Xml element attribute given an Xml path
            </summary>
            <param name="file">The path to the Xml file</param>
            <param name="xpath">The xpath search string</param>
            <returns>The value from the xpath search, otherwise null</returns>
        </member>
        <member name="M:RelhaxModpack.XmlUtils.GetXmlStringFromXPath(System.String,System.String,System.String)">
            <summary>
            Get an Xml element attribute given an Xml path
            </summary>
            <param name="xmlString">The Xml text string</param>
            <param name="xpath">The xpath search string</param>
            <param name="filename"></param>
            <returns>The value from the xpath search, otherwise null</returns>
        </member>
        <member name="M:RelhaxModpack.XmlUtils.GetXmlStringFromXPath(System.Xml.XmlDocument,System.String)">
            <summary>
            Get an Xml element attribute given an Xml path
            </summary>
            <param name="doc">The Xml document object to check</param>
            <param name="xpath">The xpath search string</param>
            <returns>The value from the xpath search, otherwise null</returns>
            <remarks>
            The following are Xml attribute examples
            element example: "//root/element"
            attribute example: "//root/element/@attribute"
            for the onlineFolder version: //modInfoAlpha.xml/@onlineFolder
            for the folder version: //modInfoAlpha.xml/@version
            </remarks>
        </member>
        <member name="M:RelhaxModpack.XmlUtils.GetXmlNodeFromXPath(System.String,System.String)">
            <summary>
            Get an Xml node value given an Xml path
            </summary>
            <param name="file">The path to the Xml file</param>
            <param name="xpath">The xpath search string</param>
            <returns>The Xml node object of the search result, or null</returns>
        </member>
        <member name="M:RelhaxModpack.XmlUtils.GetXmlNodeFromXPath(System.String,System.String,System.String)">
            <summary>
            Get an Xml node value given an Xml path
            </summary>
            <param name="xmlString">The Xml string to parse</param>
            <param name="xpath">The xpath search string</param>
            <param name="filename">The name of the file, used for logging purposes</param>
            <returns>The Xml node object of the search result, or null</returns>
        </member>
        <member name="M:RelhaxModpack.XmlUtils.GetXmlNodeFromXPath(System.Xml.XmlDocument,System.String)">
            <summary>
            Get an Xml node value given an Xml path
            </summary>
            <param name="doc">The XmlDocument object to search</param>
            <param name="xpath">The xpath string</param>
            <returns>The Xml node object of the search result, or null</returns>
        </member>
        <member name="M:RelhaxModpack.XmlUtils.GetXmlNodesFromXPath(System.String,System.String)">
            <summary>
            Get a List of Xml nodes that match given an Xml path
            </summary>
            <param name="file">The path to the Xml file</param>
            <param name="xpath">The xpath string</param>
            <returns>The node list of matching results, or null</returns>
        </member>
        <member name="M:RelhaxModpack.XmlUtils.GetXmlNodesFromXPath(System.String,System.String,System.String)">
            <summary>
            Get a List of Xml nodes that match given an Xml path
            </summary>
            <param name="xmlString">The xml document in a string</param>
            <param name="filename">The name of the document for logging purposes</param>
            <param name="xpath">The xpath string</param>
            <returns>The node list of matching results, or null</returns>
        </member>
        <member name="M:RelhaxModpack.XmlUtils.GetXmlNodesFromXPath(System.Xml.XmlDocument,System.String)">
            <summary>
            Get a List of Xml nodes that match given an Xml path
            </summary>
            <param name="doc">The XmlDocument to search</param>
            <param name="xpath">The xml path string</param>
            <returns>The node list of matching results, or null</returns>
            <remarks>XmlElement and XmlAttribute inherit from XmlNode</remarks> 
        </member>
        <member name="M:RelhaxModpack.XmlUtils.ParseDatabase(System.Xml.XmlDocument,System.Collections.Generic.List{RelhaxModpack.DatabasePackage},System.Collections.Generic.List{RelhaxModpack.Dependency},System.Collections.Generic.List{RelhaxModpack.Category},System.String)">
            <summary>
            Parse the Xml database of any type into lists in memory
            </summary>
            <param name="modInfoDocument">The root document. Can either be the entire document (Legacy) or the file with database header information only (OnePointOne)</param>
            <param name="globalDependencies">The global dependencies list</param>
            <param name="dependencies">The dependencies list</param>
            <param name="parsedCategoryList">The category list</param>
            <param name="location">The folder path to the OnePointOne+ additional xml files as part of the database</param>
            <returns>True if database parsing was a success, false otherwise</returns>
        </member>
        <member name="M:RelhaxModpack.XmlUtils.ParseDatabase1V1FromFiles(System.String,System.Xml.XmlDocument,System.Collections.Generic.List{RelhaxModpack.DatabasePackage},System.Collections.Generic.List{RelhaxModpack.Dependency},System.Collections.Generic.List{RelhaxModpack.Category})">
            <summary>
            Parse a database into the version 1.1 format from files on the disk
            </summary>
            <param name="rootPath">The path to the folder that contains all the xml database files</param>
            <param name="rootDocument">The root document object</param>
            <param name="globalDependencies">The list of global dependencies</param>
            <param name="dependencies">The list of dependencies</param>
            <param name="parsedCategoryList">The list of categories</param>
            <returns></returns>
        </member>
        <member name="M:RelhaxModpack.XmlUtils.ParseDatabase1V1FromStrings(System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{RelhaxModpack.DatabasePackage},System.Collections.Generic.List{RelhaxModpack.Dependency},System.Collections.Generic.List{RelhaxModpack.Category})">
            <summary>
            Parse a database into version 1.1 from string representations of the Xml files
            </summary>
            <param name="globalDependenciesXml">The Xml string of the global dependencies document</param>
            <param name="dependneciesXml">The Xml string of the dependencies document</param>
            <param name="categoriesXml">The list of Xml strings of the categories document</param>
            <param name="globalDependencies">The list of global dependencies</param>
            <param name="dependencies">The list of dependencies</param>
            <param name="parsedCategoryList">The list of categories</param>
            <returns></returns>
        </member>
        <member name="M:RelhaxModpack.XmlUtils.ParseDatabase1V1(System.Xml.Linq.XDocument,System.Collections.Generic.List{RelhaxModpack.DatabasePackage},System.Xml.Linq.XDocument,System.Collections.Generic.List{RelhaxModpack.Dependency},System.Collections.Generic.List{System.Xml.Linq.XDocument},System.Collections.Generic.List{RelhaxModpack.Category})">
            <summary>
            Parse a database into version 1.1 from XDocument objects
            </summary>
            <param name="globalDependenciesDoc">The Xml document of global dependencies</param>
            <param name="globalDependenciesList">The list of global dependencies</param>
            <param name="dependenciesDoc">The Xml document of dependencies</param>
            <param name="dependenciesList">The list of dependencies</param>
            <param name="categoryDocuments">The list of xml documents of the category Xml documents</param>
            <param name="parsedCategoryList">The list of categories</param>
            <returns></returns>
        </member>
        <member name="M:RelhaxModpack.XmlUtils.DocumentToXDocument(System.Xml.XmlDocument)">
            <summary>
            Convert an XmlDocument to an XDocument
            </summary>
            <param name="doc">The XmlDocument to convert</param>
            <returns>The converted XDocument</returns>
            <remarks>See https://blogs.msdn.microsoft.com/xmlteam/2009/03/31/converting-from-xmldocument-to-xdocument/ </remarks>
        </member>
        <member name="M:RelhaxModpack.XmlUtils.LoadXDocument(System.String,RelhaxModpack.XmlLoadType)">
            <summary>
            Load an Xml document to an XDocument object
            </summary>
            <param name="fileOrXml">The filepath or string representation of the Xml document</param>
            <param name="type">The type to define if fileOrXml is a file path or the Xml string</param>
            <returns>A parsed XDocument of the Xml document</returns>
        </member>
        <member name="M:RelhaxModpack.XmlUtils.LoadXmlDocument(System.String,RelhaxModpack.XmlLoadType)">
            <summary>
            Load an Xml document to an XmlDocument object
            </summary>
            <param name="fileOrXml">The filepath or string representation of the Xml document</param>
            <param name="type">The type to define if fileOrXml is a file path or the Xml string</param>
            <returns>A parsed XmlDocument of the Xml document</returns>
        </member>
        <member name="M:RelhaxModpack.XmlUtils.UnpackXmlFile(RelhaxModpack.XmlUnpack,System.Text.StringBuilder)">
            <summary>
            Copies an xml file from an archive or directory path and unpacks it from binary Xml to human-readable Xml
            </summary>
            <param name="xmlUnpack">The Xml unpack instructions object</param>
            <param name="unpackBuilder">The stringBuilder to log the generated files location for the install log</param>
        </member>
        <member name="M:RelhaxModpack.XmlUtils.ParseDatabaseLegacy(System.Xml.Linq.XDocument,System.Collections.Generic.List{RelhaxModpack.DatabasePackage},System.Collections.Generic.List{RelhaxModpack.Dependency},System.Collections.Generic.List{RelhaxModpack.Dependency},System.Collections.Generic.List{RelhaxModpack.Category},System.Boolean)">
            <summary>
            Parses the database Xml document from the legacy format into memory
            </summary>
            <param name="doc">The document to parse from</param>
            <param name="globalDependencies">The list of global dependencies</param>
            <param name="dependencies">The list of dependencies</param>
            <param name="logicalDependencies">The list of logical dependencies</param>
            <param name="parsedCatagoryList">The list of categories</param>
            <param name="buildRefrences">Flag for if the list references (like level, parent, topParent) should be built as well</param>
        </member>
        <member name="M:RelhaxModpack.XmlUtils.SaveDatabaseLegacy(System.String,System.Xml.XmlDocument,System.Collections.Generic.List{RelhaxModpack.DatabasePackage},System.Collections.Generic.List{RelhaxModpack.Dependency},System.Collections.Generic.List{RelhaxModpack.Category})">
            <summary>
            Saves the current mod database into the legacy document format
            </summary>
            <param name="saveLocation">The file save location</param>
            <param name="doc">The XmlDocument to save into</param>
            <param name="globalDependencies">The list of global dependencies</param>
            <param name="dependencies">The list of dependencies</param>
            <param name="parsedCatagoryList">The list of categories</param>
        </member>
        <member name="M:RelhaxModpack.XmlUtils.SaveDatabase(System.String,System.String,System.String,System.Collections.Generic.List{RelhaxModpack.DatabasePackage},System.Collections.Generic.List{RelhaxModpack.Dependency},System.Collections.Generic.List{RelhaxModpack.Category},RelhaxModpack.DatabaseXmlVersion)">
            <summary>
            Save the database to an Xml version
            </summary>
            <param name="saveLocation">The folder path to save the files into</param>
            <param name="gameVersion">The version of the game that this database supports</param>
            <param name="onlineFolderVersion">The online folder for the zip file location of this database</param>
            <param name="globalDependencies">The list of global dependencies</param>
            <param name="dependencies">The list of dependencies</param>
            <param name="parsedCatagoryList">The list of categories</param>
            <param name="versionToSaveAs">The Xml version of the database to save as</param>
        </member>
        <member name="M:RelhaxModpack.XmlUtils.SaveDatabase1V1(System.String,System.Xml.XmlDocument,System.Collections.Generic.List{RelhaxModpack.DatabasePackage},System.Collections.Generic.List{RelhaxModpack.Dependency},System.Collections.Generic.List{RelhaxModpack.Category})">
            <summary>
            Save the database to the Xml version 1.1 standard
            </summary>
            <param name="savePath">The path to save all the xml files to</param>
            <param name="doc">The root XmlDocument to save the header information to</param>
            <param name="globalDependencies">The list of global dependencies</param>
            <param name="dependencies">The list of dependencies</param>
            <param name="parsedCatagoryList">The list of categories</param>
        </member>
        <member name="M:RelhaxModpack.XmlUtils.SaveDatabaseList1V1(System.Collections.IList,System.Xml.XmlElement,System.Xml.XmlDocument,System.String)">
            <summary>
            Saves a list of packages to a document
            </summary>
            <param name="packagesToSave">The generic list of packages to save</param>
            <param name="documentRootElement">The element that will be holding this list</param>
            <param name="docToMakeElementsFrom">The document needed to create xml elements and attributes</param>
            <param name="nameToSaveElementsBy">The string name to save the xml element name by</param>
        </member>
        <member name="M:RelhaxModpack.XmlUtils.AddPatchesFromFile(System.Collections.Generic.List{RelhaxModpack.Patch},System.String,System.String)">
            <summary>
            Parse a list of patch instructions from an Xml file into patch objects
            </summary>
            <param name="patches">The list of patches to parse into</param>
            <param name="filename">The name of the file to parse from</param>
            <param name="originalNameFromZip">The original name when extracted from the zip file during install time</param>
        </member>
        <member name="M:RelhaxModpack.XmlUtils.AddShortcutsFromFile(System.Collections.Generic.List{RelhaxModpack.Shortcut},System.String)">
            <summary>
            Parse a list of shortcut instructions from an Xml file into shortcut objects
            </summary>
            <param name="shortcuts">The list of shortcuts to parse into</param>
            <param name="filename">The name of the file to parse from</param>
        </member>
        <member name="M:RelhaxModpack.XmlUtils.AddXmlUnpackFromFile(System.Collections.Generic.List{RelhaxModpack.XmlUnpack},System.String)">
            <summary>
            Parse a list of Xml unpack instructions from an Xml file into XmlUnpack objects
            </summary>
            <param name="xmlUnpacks">The list of XmlUnpacks to parse into</param>
            <param name="filename">The name of the file to parse from</param>
        </member>
        <member name="M:RelhaxModpack.XmlUtils.AddAtlasFromFile(System.Collections.Generic.List{RelhaxModpack.Atlas},System.String)">
            <summary>
            Parse a list of Xml atlas creation instructions from an Xml file into Atlas objects
            </summary>
            <param name="atlases">The list of Atlases to parse into</param>
            <param name="filename">The name of the file to parse from</param>
        </member>
        <member name="T:RelhaxModpack.ReturnCodes">
            <summary>
            Application return error codes
            </summary>
        </member>
        <member name="F:RelhaxModpack.ReturnCodes.Sucess">
            <summary>
            No error occurred
            </summary>
        </member>
        <member name="F:RelhaxModpack.ReturnCodes.LogfileError">
            <summary>
            Error with logfile creation
            </summary>
        </member>
        <member name="T:RelhaxModpack.ApplicationVersions">
            <summary>
            The build distribution version of the application
            </summary>
        </member>
        <member name="F:RelhaxModpack.ApplicationVersions.Stable">
            <summary>
            The stable distribution for all users
            </summary>
        </member>
        <member name="F:RelhaxModpack.ApplicationVersions.Beta">
            <summary>
            The beta distribution, for advanced users, may have new features or improvements, and bugs
            </summary>
        </member>
        <member name="F:RelhaxModpack.ApplicationVersions.Alpha">
            <summary>
            The alpha distribution. Should never be publicly distributed
            </summary>
        </member>
        <member name="T:RelhaxModpack.App">
            <summary>
            Interaction logic for App.xaml
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="M:RelhaxModpack.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:RelhaxModpack.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:RelhaxModpack.MainWindow">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="F:RelhaxModpack.MainWindow.OriginalWidth">
            <summary>
            The original width and height of the application before applying scaling
            </summary>
        </member>
        <member name="F:RelhaxModpack.MainWindow.OriginalHeight">
            <summary>
            The original width and height of the application before applying scaling
            </summary>
        </member>
        <member name="M:RelhaxModpack.MainWindow.#ctor">
            <summary>
            Creates the instance of the MainWindow class
            </summary>
        </member>
        <member name="M:RelhaxModpack.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:RelhaxModpack.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.discord_brand">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.donation">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.DotNetZip">
             <summary>
               Looks up a localized string similar to Software Licenses that apply to the DotNetZip library and tools
            
            As DotNetZip includes work derived from other projects, you are required to comply with the terms and conditions for each of them. These licenses include BSD, Apache, and zlib.
            
            To use the software, you must accept the licenses. If you do not accept the licenses, do not use the software.
            
            Original intellectual property in DotNetZip is provided under the Ms-PL:
                
                Copyright (c) 2006 - 2011 Dino Chiesa 
                Copyright (c) 2006, 200 [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.EMail">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.error_loading_picture">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.facebook_brand">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.flag_de">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.flag_gb">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.flag_us">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.grey_area_mod">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.Home">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.HtmlAgilityPack">
             <summary>
               Looks up a localized string similar to The MIT License (MIT)
            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the &quot;Software&quot;), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:
            
            The above copyright notice and this permission n [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.Json_NET">
             <summary>
               Looks up a localized string similar to The MIT License (MIT)
            
            Copyright (c) 2007 James Newton-King
            
            Permission is hereby granted, free of charge, to any person obtaining a copy of
            this software and associated documentation files (the &quot;Software&quot;), to deal in
            the Software without restriction, including without limitation the rights to
            use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
            the Software, and to permit persons to whom the Software is furnished to do so,
            subject to the following conditions:
            
            The ab [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.modpack_icon">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.modpack_license_agrement">
             <summary>
               Looks up a localized string similar to                                  Apache License
                                       Version 2.0, January 2004
                                    http://www.apache.org/licenses/
            
               TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
            
               1. Definitions.
            
                  &quot;License&quot; shall mean the terms and conditions for use, reproduction,
                  and distribution as defined by Sections 1 through 9 of this document.
            
                  &quot;Licensor&quot; shall mean the copyright owner or entity authorized by
                  the copyright owner that is [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.NAudio">
             <summary>
               Looks up a localized string similar to Microsoft Public License (Ms-PL)
            
            This license governs use of the accompanying software. If you use the software, you accept this license. If you do not accept the license, do not use the software.
            
            1. Definitions
            
            The terms &quot;reproduce,&quot; &quot;reproduction,&quot; &quot;derivative works,&quot; and &quot;distribution&quot; have the same meaning here as under U.S. copyright law.
            
            A &quot;contribution&quot; is the original software, or any additions or changes to the software.
            
            A &quot;contributor&quot; is any person that distributes its contribution [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.obfuscated_package_icon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.play_pause">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.popular_icon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.report">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.SpriteSheetPacker">
             <summary>
               Looks up a localized string similar to Copyright (c) 2014-2015 amakaseev.
            
            Permission is hereby granted, free of charge, to any person obtaining
            a copy of this software and associated documentation files (the
            &quot;Software&quot;), to deal in the Software without restriction, including
            without limitation the rights to use, copy, modify, merge, publish,
            distribute, sublicense, and/or sell copies of the Software, and to
            permit persons to whom the Software is furnished to do so, subject to
            the following conditions:
            
            The above copyright notice and t [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.stop2">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.TeximpNet">
             <summary>
               Looks up a localized string similar to Copyright (c) 2016-2018 TeximpNet - Nicholas Woodfield
             
            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the &quot;Software&quot;), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:
            
            The above co [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.twitter_brand">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.WindowsAPICodePack">
             <summary>
               Looks up a localized string similar to License: Custom License
            MICROSOFT SOFTWARE LICENSE TERMS
            MICROSOFT WINDOWS API CODE PACK FOR MICROSOFT .NET FRAMEWORK
            ___________________________________________________
            These license terms are an agreement between Microsoft Corporation (or based on where you live, one of its affiliates) and you. Please read them. They apply to the software named above, which includes the media on which you received it, if any. The terms also apply to any Microsoft
            • updates,
            • supplements,
            • Internet-based services, [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:RelhaxModpack.Properties.Resources.WoT_brand_light_grey">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
